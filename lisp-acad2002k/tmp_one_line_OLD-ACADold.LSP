(defun C:HST()   (prompt " = Style's Make ")  (setvar "REGENMODE" 0)  (command "style" "hs" "simplex,hs" "" "" "" "" "" "")      (command "style" "standard" "simplex" "" "" "" "" "" "")  (command "style" "hgt" "simplex,hgtxt" "" "" "" "" "" "")    (command "style" "ghd" "helved,ghd" "" "" "" "" "" "")  (command "style" "ghs" "simplex,ghs" "" "" "" "" "" "")  (command "Style" "UTM" "À¸¶äÃ¼" "" "" "" "" "" "")  (prompt "\n Make Style [HGT],[GHS],[Standard] and Current is [À¸¶äÃ¼=UTM] !!!")  (prin1))(defun eeee(a b)(setq ent-des (cdr (assoc b a))))(defun rm_set1(_ent)  (setq po-10 (eeee _ent 10))  (setq x10 (car po-10) y10 (cadr po-10))  (setq po-11 (eeee _ent 11))  (setq x11 (car po-11) y11 (cadr po-11))  (setq th-40 (eeee _ent 40))  (setq h-40 (* th-40 0.5 (sqrt 2)))  (setq p1 (polar po-10 (dtr 225) h-40)))  (defun rm_set2(_ent)  (rm_set1 _ent)  (setq ang-mi (angle po-10 po-11))  (setq dis-mi (distance po-10 po-11))  (setq p5 (list x11 y10))  (setq dis-mi2(distance po-10 p5)))(defun rm_pnt2()  (if (> dis-mi2 (* th-40 2.681353334))    (progn       (setq p2a (polar p5 0 dis-mi2))      (setq p2 (polar p2a (dtr 315) h-40))      (setq p3a (polar p2a (dtr 90) th-40))      (setq p3 (polar p3a (dtr 45) h-40))      (setq p4a (polar po-10 (dtr 90) th-40))      (setq p4 (polar p4a (dtr 135) h-40))    )    (progn       (setq dis-mi2 (* th-40 2.627776667))      (setq p1a (polar po-11 (dtr 180) dis-mi2))      (setq p1b (polar p1a (dtr 270) (/ th-40 2)))      (setq p1  (polar p1b (dtr 225) h-40))      (setq ddii (+ (* dis-mi2 2) th-40))      (setq p2  (polar p1 (dtr 0) ddii))       (setq p3  (polar p2 (dtr 90) (* th-40 2)))      (setq p4  (polar p1 (dtr 90) (* th-40 2)))    )  ))(defun rm_flag2 (entty)  (setq f72 (cdr (assoc 72 (entget (car entty))))        f73 (cdr (assoc 73 (entget (car entty))))  )  (if (and (= f72 4)(= f73 0))    (prompt "\n Select Text is Middle-Option ")    (txt_midd entty)   ))(defun txt_midd(a / flag72 flag73 t2 pnt1)  (setq key_rmbox 1)  (setq flag72 4 flag73 0)  (setq t2(entget (car a)))  (setq pnt1 (cdr (assoc 10 t2)))  (setq pnt_l pnt1)  (setq t2(subst (cons 11 pnt1)(assoc 11 t2) t2))  (setq t2(subst (cons 72 flag72)(assoc 72 t2) t2))  (setq t2(subst (cons 73 flag73)(assoc 73 t2) t2))  (entmod t2))(defun txt_left(a pnt_l / e1 nl n i e2 t2)  (setq t2(entget (car a)))  (setq pnt2 (cdr (assoc 10 t2)))  (setq t2(subst (cons 10 pnt_l)(assoc 10 t2) t2))  (setq t2(subst (cons 72 0)(assoc 72 t2) t2))  (setq t2(subst (cons 73 0)(assoc 73 t2) t2))  (entmod t2))(defun C:RM2(/ entty po-10 po-11 th-40 x10 y10 x11 y11 h40 p2a p2 p3a p3 p1)  (setq entty (entsel "\nSelect-one Text for Room-Box : "))  (setq i 0 ent-des nil)  (setq _ent (entget (car entty)))  (if (= "TEXT" (eeee _ent 0))    (progn      (old-non)      (RM_SET1 _ent)       (if (or (= y11 x10)(= y11 y10))        (progn          (setq p2 (polar po-11 (dtr 315) h-40))          (setq p3a (polar po-11 (dtr 90) th-40))          (setq p3 (polar p3a (dtr 45) h-40))        )        (if (= y11 0.0)          (progn            (setq dis-mi (* th-40 2.627776667))            (setq p2a (polar po-10 0 dis-mi))            (setq p2 (polar p2a (dtr 315) h-40))            (setq p3a (polar p2a (dtr 90) th-40))            (setq p3 (polar p3a (dtr 45) h-40))          )          (progn            (setq ang-mi (angle po-10 po-11))            (setq dis-mi (distance po-10 po-11))            (setq p5 (list x11 y10))            (setq dis-mi2(distance po-10 p5))            (setq p2a (polar p5 0 dis-mi2))            (setq p2 (polar p2a (dtr 315) h-40))            (setq p3a (polar p2a (dtr 90) th-40))            (setq p3 (polar p3a (dtr 45) h-40))          )        )      )      (setq p4a (polar po-10 (dtr 90) th-40))      (setq p4 (polar p4a (dtr 135) h-40))      (la-set "RM-BOX" 4)      (command "pline" p1 p2 p3 p4 "c")      (la-back)      (new-sn)    )  )  (prin1))(defun C:RM1(/ entty po-10 po-11 th-40 x10 y10 x11 y11 h40 p2a p2 p3a p3 p1               p1a p1b)  (setq entty (entsel "\nSelect-one Text for Room-Box : "))  (RM_FLAG2 entty)     (setq i 0 ent-des nil)  (setq _ent (entget (car entty)))  (if (= "TEXT" (eeee _ent 0))    (progn      (old-non)      (RM_SET2 _ent)                            (RM_PNT2)       (la-set "RM-BOX" 4)      (command "pline" p1 p2 p3 p4 "c")      (la-back)      (new-sn)    )  )  (prin1))(defun C:RM(/ entty po-10 po-11 th-40 x10 y10 x11 y11 h40 p2a p2 p3a p3 p1               p1a p1b key_rmbox pnt2 pnt_l _ent)  (setq entty (entsel "\nSelect-one Text for Room-Box : "))  (RM_FLAG2 entty)   (setq i 0 ent-des nil)  (setq _ent (entget (car entty)))  (if (= "TEXT" (eeee _ent 0))    (progn      (old-non)      (RM_SET2 _ent)                            (RM_PNT2)       (la-set "RM-BOX" 4)      (command "pline" p1 p2 p3 p4 "c")      (if key_rmbox        (progn          (setq key_rmbox nil)          (txt_left entty pnt_l)          (command "move" (entlast) "" pnt2 pnt_l)        )      )      (la-back)      (new-sn)    )  )  (prin1))(defun rm_set1(_ent)  (setq po-10 (eeee _ent 10))  (setq x10 (car po-10) y10 (cadr po-10))  (setq po-11 (eeee _ent 11))  (setq x11 (car po-11) y11 (cadr po-11))  (setq th-40 (eeee _ent 40))  (setq h-40 (* th-40 0.5 (sqrt 2)))  (setq p1 (polar po-10 (dtr 225) h-40)))  (defun rm_set2a(_ent)  (rm_set1 _ent)  (setq ang-mi (angle po-10 po-11))  (setq dis-mi (distance po-10 po-11))  (setq p5 (list x11 y10))  (setq dis-mi2(distance po-10 p5)))(defun rm_flag2a (entty)  (setq f72 (cdr (assoc 72 (entget entty)))        f73 (cdr (assoc 73 (entget entty)))        f8  (cdr (assoc 8  (entget entty)))         f62 (cdr (assoc 62 (entget entty))) : Color  )  (if (and (= f72 4)(= f73 0))    (prompt "\n Select Text is Middle-Option ")    (txt_midd2a entty)   )  (if (or (/= f8 "RM-TEXT") (/= f62 nil))    (progn      (setq t2(entget entty))      (setq flag8 "RM-TEXT")      (setq t2(subst (cons 8 flag8)(assoc 8 t2) t2))      (setq t2(subst (cons 62 256)(assoc 62 t2) t2))      (entmod t2)    )  ))(defun txt_midd2a(a / flag72 flag73 t2 pnt1)  (setq key_rmbox 1)  (setq flag72 4 flag73 0)  (setq t2(entget a))  (setq pnt1 (cdr (assoc 10 t2)))  (setq pnt_l pnt1)  (setq t2(subst (cons 72 flag72)(assoc 72 t2) t2))  (setq t2(subst (cons 73 flag73)(assoc 73 t2) t2))  (entmod t2))(defun txt_left2a(a pnt_l / e1 nl n i e2 t2)  (setq t2(entget a))  (setq pnt2 (cdr (assoc 10 t2)))  (setq t2(subst (cons 10 pnt_l)(assoc 10 t2) t2))  (setq t2(subst (cons 72 0)(assoc 72 t2) t2))  (setq t2(subst (cons 73 0)(assoc 73 t2) t2))  (entmod t2))(defun rm_pnt2a()  (if (> dis-mi2 (* th-40 2.681353334))    (progn       (setq p2a (polar p5 0 dis-mi2))      (setq p2 (polar p2a (dtr 315) h-40))      (setq p3a (polar p2a (dtr 90) th-40))      (setq p3 (polar p3a (dtr 45) h-40))      (setq p4a (polar po-10 (dtr 90) th-40))      (setq p4 (polar p4a (dtr 135) h-40))    )    (progn       (setq dis-mi2 (* th-40 2.627776667))      (setq p1a (polar po-11 (dtr 180) dis-mi2))      (setq p1b (polar p1a (dtr 270) (/ th-40 2)))      (setq p1  (polar p1b (dtr 225) h-40))      (setq ddii (+ (* dis-mi2 2) th-40))      (setq p2  (polar p1 (dtr 0) ddii))       (setq p3  (polar p2 (dtr 90) (* th-40 2)))      (setq p4  (polar p1 (dtr 90) (* th-40 2)))    )  ))(defun C:RM4(/ entty po-10 po-11 th-40 x10 y10 x11 y11 h40 p2a p2 p3a p3 p1               p1a p1b key_rmbox pnt2 pnt_l dis-se pnt-s1 pnt-e1 _ent)  (prompt "\nSelect Text's for Text-Groop-Box : ")  (setq e1(sel_text))  (setq nl(sslength e1))  (setq z1 e1)  (prompt "\n Wating Sorting...... ")  (sort_down e1 nl)   (prompt "\t Sorting is Complete ")  (setq e1 sel_t1)  (RM_XPNT e1)   (setq i 0)  (setq nl(sslength e1))  (setq n(- nl 1))  (setq pnt-s1 (cdr (assoc 10 (entget (ssname e1 n)))))  (setq pnt-e1 (cdr (assoc 10 (entget (ssname e1 0)))))  (setq dis-se (distance pnt-s1 pnt-e1))  (setq entty (ssname e1 0))  (RM_FLAG2a entty)   (setq _ent (entget entty))  (old-non)  (RM_SET2a _ent)                    (RM_PNT2a)   (la-set "RM-BOX" 4)  (setq p1(polar p1 (dtr 270) (+ 0 dis-se)))  (setq p2(polar p2 (dtr 270) (+ 0 dis-se)))  (command "pline" p1 p2 p3 p4 "c")  (if key_rmbox    (progn      (setq key_rmbox nil)      (txt_left2a entty pnt_l)      (command "move" (entlast) "" pnt2 pnt_l)    )  )  (la-back)  (new-sn))(defun cal_c1(i) (ssname e1 i))(defun cal_cy(i) (cadr (cdr (assoc 10 (entget (ssname e1 i))))))(defun cal_cx(i) (car (cdr (assoc 10 (entget (ssname e1 i))))))(defun sort_down(e1 nl)   (setq n (- nl 1))   (setq sel_t1 (ssadd))   (while (>= n 0)      (setq max-i 0)      (setq nx(sslength e1))      (setq i 1)      (repeat (- nx 1)        (if (>= (cal_cy i) (cal_cy max-i))            (setq max-i i)        )        (setq i (1+ i))      )      (ssadd (cal_c1 max-i) sel_t1)      (ssdel (cal_c1 max-i) e1)      (setq n (- n 1))   ))(defun RM_ipx(b)   (setq T-IPX1(CAR (CDR (ASSOC 10 (ENTGET b)))))   (setq T-IPX2(CAR (CDR (ASSOC 11 (ENTGET b)))))   (setq T-IPy1(CaDR (cdr (ASSOC 10 (ENTGET b)))))   (setq T-IPy2(CaDR (cdr (ASSOC 11 (ENTGET b)))))   (if (= t-ipx2 0.0)(setq t-ipx t-ipx1)(setq t-ipx t-ipx2))   (if (= t-ipy2 0.0)(setq t-ipy t-ipy1)(setq t-ipy t-ipy2)))(defun RM_ipp (t2 a)  (setq ip-z 0.0)  (setq TT-IP(CDR (ASSOC a T2)))  (setq IP-X T-IPX IP-Y (CADR TT-IP))  (setq PT-NEW (LIST IP-X IP-Y IP-Z))  (setq t2(subst (cons a pt-new)(assoc a t2) t2))  (entmod t2)  (setq COUNT(1+ COUNT)))(defun RM_XPNT (ts)  (setq b (ssname ts 0))  (RM_ipx b)  (setq L(SSLENGTH ts))  (setq i 0 COUNT 0)  (setq l1(- l 1))  (while (<= i l1)    (setq t1(ssname ts i))    (setq t2(entget t1))    (setq t0(cdr (assoc 0 t2)))    (setq t11(cadr (cdr (assoc 11 t2))))    (RM_ipp t2 10)    (setq i(+ i 1))  ))(defun c:rmm(/ ix e1 nl n e2 )  (prompt "\nSelect Text's for Text-Box : ")  (setq olderr  *error* *error* TEXERROR chm 0)  (setq ix 0)  (setq e1(sel_text))  (if e1    (progn      (setq nl(sslength e1))      (setq n(- nl 1))      (if (= (tblsearch "LAYER" "RM-TEXT") nil)        (command "layer" "N" "RM-TEXT" "c" 3 "RM-TEXT" "")      )      (old-non)      (la-set "RM-BOX" 4)      (while (<= ix n)        (setq e2(ssname e1 ix))                (TEXT_BOX1 e2)                (setq ix(1+ ix))      )      (la-back)      (new-sn)    )  )  (prompt "Box Drawing => ")(prin1 ix)(prompt "(ea)")  (prin1))(defun text_box1(entty / po-10 po-11 th-40 x10 y10 x11 y11 h40 p2a p2 p3a p3 p1               p1a p1b key_rmbox pnt2 pnt_l _ent)  (RM_FLAG2a entty)   (setq i 0 ent-des nil)  (setq _ent (entget entty))  (if (= "TEXT" (eeee _ent 0))    (progn      (RM_SET2x _ent)                            (RM_PNT2x)       (command "pline" p1 p2 p3 p4 "c")      (if key_rmbox        (progn          (setq key_rmbox nil)          (txt_left2a entty pnt_l)          (command "move" (entlast) "" pnt2 pnt_l)        )      )    )  ))(defun rm_set2x(_ent)  (setq th-40 (eeee _ent 40))  (setq h-40  (* th-40 0.5 (sqrt 2)))  (setq po-10 (eeee _ent 10))  (setq po-11 (eeee _ent 11))  (setq line-p1p2(distance po-10 po-11))  (setq l-ang (angle po-10 po-11))  (setq t-ang (eeee _ent 50))  (setq ang-1 (- l-ang t-ang))  (setq line-1(* line-p1p2 (cos ang-1)))  (setq p1 (polar po-10 (+ t-ang (dtr 225)) h-40))  (setq p5 (polar po-10 t-ang line-1))  (setq dis-mi2 (distance po-10 p5)))(defun rm_pnt2x()  (if (> dis-mi2 (* th-40 2.681353334))    (progn       (setq p2a (polar p5 t-ang dis-mi2))      (setq p2 (polar p2a (+ t-ang (dtr 315)) h-40))      (setq p3a (polar p2a (+ t-ang (dtr 90)) th-40))      (setq p3 (polar p3a (+ t-ang (dtr 45)) h-40))      (setq p4a (polar po-10 (+ t-ang (dtr 90)) th-40))      (setq p4 (polar p4a (+ t-ang (dtr 135)) h-40))    )    (progn       (setq dis-mi2 (* th-40 2.627776667))      (setq p1a (polar po-11 (+ t-ang (dtr 180)) dis-mi2))      (setq p1b (polar p1a (+ t-ang (dtr 270)) (/ th-40 2)))      (setq p1  (polar p1b (+ t-ang (dtr 225)) h-40))      (setq ddii (+ (* dis-mi2 2) th-40))      (setq p2  (polar p1 (+ t-ang (dtr 0)) ddii))       (setq p3  (polar p2 (+ t-ang (dtr 90)) (* th-40 2)))      (setq p4  (polar p1 (+ t-ang (dtr 90)) (* th-40 2)))    )  ))(defun C:EMM(/ la name nl n i e2 t2 ed laname ername)   (prompt " = Erase at Lock-Entty (Multiple) ")   (prompt "\n\t Select of object on the Lock-Entty :")   (setq la (ssget) laname "" ername nil)   (setq i 0)   (if la      (progn         (setq nl(sslength la))         (setq n(- nl 1))         (while (<= i n)           (setq ed(entget (setq e2(ssname la i))))           (setq t2(cdr (assoc 8 ed)))           (setq laname (strcat laname "," t2))           (if ername                (setq ername (ssadd e2 ername))                (setq ername (ssadd e2))           )           (setq i(1+ i))         )         (command "Layer" "U" laname "")         (command "Erase" ername "")         (command "Layer" "Lock" laname "")      )   ))(DEFUN C:off2(/ i a aa aa-l aaa)	(SETQ I T)(setq aaa "0")	(tblnext "layer" t)	(while i		(setq a(tblnext "layer"))		(if a			(progn 				(setq aa (cdr (assoc 6 a)))				(setq aa-l (cdr (assoc 2 a)))				(if (= aa "CONTINUOUS")					(setq aaa (strcat aaa "," aa-l))				)			)			(setq i nil)		)	)	(command "layer" "off" aaa "" "")	(prin1))(DEFUN C:off3(/ i a aa aa-l aaa)	(SETQ I T)(setq aaa "")	(tblnext "layer" t)	(while i		(setq a(tblnext "layer"))		(if a			(progn 				(setq aa (cdr (assoc 6 a)))				(setq aa-l (cdr (assoc 2 a)))				(if (/= aa "CONTINUOUS")					(if (= aaa "")						(setq aaa aa-l)						(setq aaa (strcat aaa "," aa-l))					)				)			)			(setq i nil)		)	)	(if (/= aaa "")		(command "layer" "off" aaa "" "")	)	(prin1))(defun C:E11(/ la name)   (prompt " = Erase at Lock-Entty (Single) ")   (setq la(car (entsel "\n\t Pick an object on the Lock-Entty :")))   (if la      (progn         (setq name (cdr (assoc 8 (entget la))))         (command "layer" "U" name "")         (command "Erase" "Si" la )         (command "layer" "Lock" name "")      )      (prompt "\n\t Select is Noting")   ))(defun C:EMM(/ la name nl n i e2 t2 ed laname ername)   (prompt " = Erase at Lock-Entty (Multiple) ")   (prompt "\n\t Select of object on the Lock-Entty :")   (setq la (ssget) laname "" ername nil)   (setq i 0)   (if la      (progn         (setq nl(sslength la))         (setq n(- nl 1))         (while (<= i n)           (setq ed(entget (setq e2(ssname la i))))           (setq t2(cdr (assoc 8 ed)))           (setq laname (strcat laname "," t2))           (if ername                (setq ername (ssadd e2 ername))                (setq ername (ssadd e2))           )           (setq i(1+ i))         )         (command "Layer" "U" laname "")         (command "Erase" ername "")         (command "Layer" "Lock" laname "")      )   ))(DEFUN C:OS3()(SETVAR "SNAPANG" (DTR 30)))(DEFUN C:OS4()(SETVAR "SNAPANG" (DTR 45)))(DEFUN C:OS6()(SETVAR "SNAPANG" (DTR 60)))(DEFUN C:OS0()(SETVAR "SNAPANG" 0))(defun c:ggf(/ dis)(setq dis 170)(gg-line dis))(defun c:gg (/ dis)(setq dis 150)(gg-line dis))(defun c:ggf2(/ dis)(setq dis (* 170 gg-sc))(gg-line dis))(defun gg-line(dis / p1 p2 p3 p4 gg-ang1 gg-ang2 xx)  (old-cen)  (setq XX 1)  (setq p1 (getpoint "\t Pick First Point ? :"))  (while XX    (setq p2 (getpoint p1 "\n Pick Second Point ? :"))    (if p2      (progn        (setvar "OSMODE" 0)        (setq gg-ang1(angle p1 p2))        (setq gg-ang2(angle p2 p1))        (setq p3 (polar p1 gg-ang1 dis))        (setq p4 (polar p2 gg-ang2 dis))        (command "line" p3 p4 "")        (setvar "OSMODE" 4)        (setq p1 p2)      )      (setq xx nil)    )  )  (new-sn)  (prin1))(defun c:ggsc(/ a)  (if (= wire-scale nil)		(setq wire-scale (/ (getvar "LTSCALE") 100))  )  (if (= gg-sc nil)(setq gg-sc wire-scale))  (prompt "\n Current [GG2] scale is [")  (prin1 gg-sc)  (setq a(getreal "] Enter [GG2] Scale is ? : "))  (if a (setq gg-sc a))  (prompt "\n [GG2] Scale Setting is <")(prin1 gg-sc)  (prompt "> ")  (prin1))(defun c:gg2(/ p1 p2 p3 p4 gg-ang1 gg-ang2 gg-dist xx)  (if (or (= gg-sc nil) (= gg-sc 0.0))(setq gg-sc wire-scale))  (prompt "\t [GG2] Scale is <")(prin1 gg-sc)  (prompt "> if change as \"GGSC\" Typing ")  (if gg-sc    (progn      (old-cen)      (setq gg-dist (* gg-sc 150))      (setq p1 (getpoint "\n Pick First Point ? :"))      (setq xx 1)      (while xx        (setq p2 (getpoint p1 "\n Pick Second Point ? :"))        (if p2          (progn            (setvar "OSMODE" 0)            (setq gg-ang1(angle p1 p2))            (setq gg-ang2(angle p2 p1))            (setq p3 (polar p1 gg-ang1 gg-dist))            (setq p4 (polar p2 gg-ang2 gg-dist))            (command "line" p3 p4 "")            (setvar "OSMODE" 4)            (setq p1 p2)          )          (setq xx nil)        )      )      (new-sn)    )    (prompt "\n [GG2] Scale was Nothing --> Enter is \"GGSC\" !! ")  )  (prin1))(defun c:gg3(/ p1 p2 p3 p4 gg-ang1 gg-ang2 gg-dist xx)  (if (or (= gg-sc nil) (= gg-sc 0.0))(setq gg-sc wire-scale))  (prompt "\t [GG2] Scale is <")(prin1 gg-sc)  (prompt "> if change as \"GGSC\" Typing ")  (if gg-sc    (progn      (old-cen)      (setq gg-dist 50)      (setq p1 (getpoint "\n Pick First Point ? :"))      (setq xx 1)      (while xx        (setq p2 (getpoint p1 "\n Pick Second Point ? :"))        (if p2          (progn            (setvar "OSMODE" 0)            (setq gg-ang1(angle p1 p2))            (setq gg-ang2(angle p2 p1))            (setq p3 (polar p1 gg-ang1 gg-dist))            (setq p4 (polar p2 gg-ang2 gg-dist))            (command "line" p3 p4 "")            (setvar "OSMODE" 4)            (setq p1 p2)          )          (setq xx nil)        )      )      (new-sn)    )    (prompt "\n [GG2] Scale was Nothing --> Enter is \"GGSC\" !! ")  )  (prin1))(defun c:sss()   (setq nnn(strcat (getvar "dwgprefix")(getvar "dwgname")))  (command "saveasr12" nnn "Y")  (command "open" "y" "~"))(defun c:mss()(command "mslide" "" "OPEN" "y" "~"))(defun c:vss()(command "vslide" "~"))(defun blk-list(a)(acad_helpdlg "blk-list.hlp" a))(defun test1()(blk-list "WIRE"))(defun pds_key()  (prompt "\n----------------------------------------------------")  (prompt "\n* This Program Maked by [Park D.S] HP:016-465-7324 *")  (prompt "\n----------------------------------------------------")  (prin1))(defun C:SEL(/ sell sel_key)  (prompt "\n = Chprop \"Select\" command ")  (initget 1 "Text Block Poly Line Dim Arc Circle")  (setq sel_key (getkword    "\n Enter Select => Arc/Block/Circle/Dim/Line/Poly/Text : "))  (cond    ((= sel_key "Text")  (setq sell (sel_text)))    ((= sel_key "Block") (setq sell (sel_block)))    ((= sel_key "Poly")  (setq sell (sel_poly)))    ((= sel_key "Line")  (setq sell (sel_line)))    ((= sel_key "Dim")   (setq sell (sel_dim)))    ((= sel_key "Arc")   (setq sell (sel_arc)))    ((= sel_key "Circle")(setq sell (sel_cir)))    (T nil)  )  (if sell    (command "chprop" sell "")    (prompt "\n Select is Nothing ! ")  )  (prin1))(defun li_find(a b)(setq data1(cdr (assoc a b))))(defun eeee(a b)(setq ent-des (cdr (assoc b a))))(defun C:ENTSEL(/ entty i ent-des _ent)   (setq entty (entsel "\nSelect object/<None>: "))   (setq i -5 ent-des nil)(setq _ent (entget (car entty)))   (prompt "Select Point : ")(prin1 (cadr entty))   (while i      (eeee _ent i)      (if ent-des         (progn            (prompt "\n [")(prin1 i)(prompt "] => ")(prin1 ent-des)         )      )      (setq ent-des nil)(setq i (1+ i))(if (> i 255)(setq i nil))   )   (setq pds-select entty))(defun sel_text() (ssget (list (cons 0 "TEXT"))))(defun sel_mtext()(ssget (list (cons 0 "MTEXT"))))(defun sel_block()(ssget (list (cons 0 "INSERT"))))(defun sel_poly() (ssget (list (cons 0 "LWPOLYLINE"))))(defun sel_line() (ssget (list (cons 0 "LINE"))))(defun sel_arc()  (ssget (list (cons 0 "ARC"))))(defun sel_cir()  (ssget (list (cons 0 "CIRCLE"))))(defun sel_dim()  (ssget (list (cons 0 "DIMENSION"))))(defun sel_oth(a b)(ssget (list (cons a b))))(defun dtr(a)(* pi (/ a 180.0)))(defun rtd(a)(/ (* a 180.0) pi))(defun old-sn()(OLD-ERR)(set-os 0))(defun old-cen()(OLD-ERR)(set-os 4))(defun old-ins()(OLD-ERR)(set-os 64))(defun old-mid()(OLD-ERR)(set-os 2))(defun old-qua()(OLD-ERR)(set-os 16))(defun old-non()(OLD-ERR)(set-os 0))(defun old-int()(OLD-ERR)(set-os 32))(defun old-NEA()(OLD-ERR)(set-os 512))(defun old-end()(OLD-ERR)(set-os 1))(defun old-endint()(OLD-ERR)(set-os 33))(defun old-endintnod()(OLD-ERR)(set-os 41))(defun set-os(a)   (setq olds(getvar "osmode"))(setvar "osmode" a)   (prompt " \"OSMODE\" is Change at [")(prin1 a)(prompt "] "))(defun new-sn()   (setvar "OSMODE" olds)(prompt "\n \"OSMODE\" is Return at [")   (prin1 olds)(prompt "] ")(setq olds nil)(prin1))(DEFUN SNAP-RO()(SETVAR "ORTHOMODE" 1))(defun la-set (a b)   (setq old-la(getvar "CLAYER"))(if (tblsearch "LAYER" a)      (command "layer" "s" a "")(command "layer" "m" a "c" b a "")))(defun la-back ()   (if old-la (command "Layer" "S" old-la "")(prompt "**ERROR**"))   (setq old-la nil))(defun OLD-ERR()(setq olderr  *error* *error* myerror chm 0))(defun TEXERROR (s)   (if (/= s "Function cancelled")(alert (strcat "\nError: " s)))  (setq p nil)(setq *error* olderr)(princ))(defun MYERROR (s)  (if (/= s "Function cancelled")(alert (strcat "\nError: " s)))  (if olds (new-sn))(setq *error* olderr)(princ))(defun REERROR (s)    (if (/= s "Function cancelled")      (progn (new-la)(new-sn)(setq *error* olderr)         (setq olds nil c_layer nil)(princ))))(defun c:jinkey()(acad_helpdlg "lisp-hlp.hlp" "command"))(defun C:WBB(/ wb-name wb-enty)  (setq wb-name(getstring "\n Enter Wblock Name ? : "))  (setq wb-enty(ssget))  (command "wblock" wb-name "" "0,0" wb-enty "" "oops"))(defun C:LLMT(/ a b c lim-l lim-h lim-b)   (setq a (getvar "LIMMIN") b (getvar "LIMMAX") c (getvar "INSBASE"))   (old-endintnod)   (prompt " = Limits & Base ")   (prompt "\n\t Enter Limits Point (Lower Left) ? <")(prin1 a)   (setq lim-l (getpoint "> :"))   (if (or (= lim-l nil)(= lim-l ""))(setq lim-l a))   (prompt "\n\t Enter Limits Point (Higher Right) ? :")(prin1 b)   (setq lim-h (getcorner lim-l "> :"))   (if (or (= lim-h nil)(= lim-h ""))(setq lim-h b))   (prompt "\n\t Enter Base Point (Lower Left) ? :")(prin1 c)   (setq lim-b (getpoint "> :"))   (if (or (= lim-b nil)(= lim-b ""))(setq lim-b c))   (command "Limits" lim-l lim-h "Base" lim-b)(prin1)   (command "._ZOOM" "ALL" )   (new-sn))(defun C:DEL() (prompt " = Erase ")(command "ERASE"))(defun C:EF()  (prompt " = Erase & Fence ")(command "ERASE" "F"))(defun C:EWW()   (prompt " = Erase & View-All ")   (command "ERASE" "W" (getvar "VSMIN") (getvar "VSMAX") "")   (prin1))(defun C:CWW()   (prompt " = Chprop & View-All ")   (command "CHPROP" "W" (getvar "VSMIN") (getvar "VSMAX") "")   (prin1))(defun C:CCW()   (prompt " = Copy & View-All ")   (command "COPY" "W" (getvar "VSMIN") (getvar "VSMAX") "")   (prin1))(DEFUN C:ST()  (prompt " = STRETCH ")(snap-ro)(command ".STRETCH"))(defun C:ZW()(prompt " = Zoom [Window] ")   (command ".ZOOM" "W")(prin1))(defun C:W() (prompt " = Zoom [Window] ")   (command ".ZOOM" "W")(prin1))(defun C:ZD()(prompt " = Zoom [Dinamic] ")  (command ".ZOOM" "D")(prin1))(defun C:ZP()(prompt " = Zoom [Previews] ") (command ".ZOOM" "P")(prin1))(defun C:ZZ()(prompt " = Zoom [Previews] ") (command ".ZOOM" "P")(prin1))(defun C:ZV()(prompt " = Zoom [Vmax-View] ")(command ".ZOOM" "V")(prin1))(defun C:ZE()  (prompt " = Zoom & Extend ")(command "'.ZOOM" "e")(prin1))(defun C:ZA()   (prompt " = Zoom & Max-view ")   (command ".zoom" "w" (getvar "EXTMIN") (getvar "EXTMAX")))(defun C:VS(/ vs-name)   (prompt " = View & Save ")   (setq vs-name(getstring "\n Enter View Name ? : "))   (if vs-name (command "view" "s" vs-name)))(defun C:VR()(prompt " = View & Restore ")(command "view" "r"))(defun S::STARTUP()	(setq m_data (strcat "(ÁÖ) ÁøÀü±â ¿£Áö´Ï¾î¸µ" " : ¹Ú ´ë½Ä "))	(command "MODEMACRO" m_data)	(prin1)  (setvar "BLIPMODE" 1)(setvar "CMDECHO" 0)(setvar "mirrtext"  0)  (setvar "CHAMFERA" 0)(setvar "CHAMFERB" 0)  (setq name (getvar "dwgname"))  (command "UNDEFINE" "END")  (command "UNDEFINE" "load")  (command "undefine" "qsave")  (command "FILL" "ON")  (command "REGENAUTO" "OFF")	(y3name)  (setq dwg-scale (GETVAR "USERR1")        bk1 (GETVAR "USERR2")        wire-scale (GETVAR "USERR3"))  (command "Layer" "Color" 4 "Sht,Sheet,FORM" "")  (PRIN1))(defun C:QSAVE()  (if c:date-time(C:DATE-TIME))(command ".qsave"))(defun C:QQ()     (if c:date-time(C:DATE-TIME))(command ".qsave"))(defun C:END (/ a olds)   (setq a (getvar "cmdecho"))(setvar "cmdecho" 0)(initget "Yes No")   (if (= (getkword "\nEND the drawing session?  Yes(save)/No(cancel): ") "Yes")   (progn (command ".qsave" "" ".quit" ))   (princ "\nYou must enter Yes to END a drawing session."))   (if a (setvar "cmdecho" a))(princ))(defun c:path(/ a b c d)  (setq a (getvar "dwgname"))  (setq b (getvar "dwgprefix"))  (prompt "\n Drawing-File Name is => ")(prin1 a)  (prompt "\n Drawing Path is => ")(prin1 b)  (prin1))(defun C:NAME()	(setq m_data (strcat "¸ôº¸³ª? ¾¾´ó±¸¸®¾ß!!! -.-" " : º¸Áö¸¶¶ó..."))	(command "MODEMACRO" m_data))(defun Y3NAME(/ x1 x2 y1 y2)   (setq x1 (strlen (setq x2 (getvar "dwgprefix"))))   (setq y1 (strlen (setq y2 (getvar "dwgname"))))   (cond      ((< y1 9)  (setq y3 y2))      ((= x1 y1) (setq y3 y2))      ((> y1 x1) (setq y3 (substr y2 (+ x1 1) y1)))      ((< y1 x1) (setq y3 y2))   )   (setq _dwgname y3))(defun C:NAME2(/ tth p1)  (setq tth(getreal "\n Enter DWG-NAME's text hight ? : "))  (setq p1 (getpoint "\n Enter Text point ? : "))  (command "text" p1 tth "" _dwgname))(defun C:MX(/ ts a b c t11 t-ipx1 t-ipx2 t-ipx t-ipy1 t-ipy2 t-ipy l l1               pt-new tt-ip ip-x ip-y ip-z count i t1 t2 et1 x_y t0)                  (setq olderr  *error* *error* TEXERROR chm 0)   (prompt " = Block's Insert-Point Change -> (X) Point ")   (ch_blkp T))(defun C:MY(/ ts a b c t11 t-ipx1 t-ipx2 t-ipx t-ipy1 t-ipy2 t-ipy l l1                pt-new tt-ip ip-x ip-y ip-z count i t1 t2 et1 x_y t0)                   (setq olderr  *error* *error* TEXERROR chm 0)   (prompt " = Block's Insert-Point Change -> (Y) Point ")   (ch_blkp nil))(defun ch_blkp (set_t)   (if (= set_t T) (setq x_y "X") (setq x_y "Y"))   (setq ts(sel_block))   (prompt "\n\t !!! select BLOCK : TARGET BLOCK [")(prompt x_y)   (prompt "-POINT ] : ONLY ONE SELECT !!!")   (setq et1(CAR (ENTSEL)))   (setq T-IPX(CAR (CDR (ASSOC 10 (ENTGET et1)))))   (setq T-IPy(CaDR (cdr (ASSOC 10 (ENTGET et1)))))   (setq L(SSLENGTH ts))   (setq i 0 COUNT 0)   (setq l1(- l 1))   (while (<= i l1)      (setq t1(ssname ts i))      (setq t2(entget t1))      (setq t0(cdr (assoc 0 t2)))      (setq t11(cadr (cdr (assoc 11 t2))))         (_ipp t2 x_y 10)      (setq i(+ i 1))   )   (prompt "\n\t CHANGE POINT-")(prompt x_y)(prompt " is --> ")   (PRIN1 COUNT)(prompt "/")(PRIN1 i)(prin1))(defun c:mla()  (command "layer" "n" "line,recep,plan,title"           "c" "1" "line" "c" "6" "recep"           "c" "253" "plan" "c" "101" "title"           "lt" "rece100" "recep" "s" "plan" "")  (prompt "\n MLA1 [ LINE(1),RECEP(6),PLAN(253) ]"))(defun C:MLA1()  (command "color" "bylayer")  (command "layer"   "n" "e-line,e-title,e-wire,e-sym,e-recep,e-elp,e-plan,e-text"   "c" "2" "e-line,e-line2,e-elp,e-recep" "c" "3" "e-sym,e-text"   "c" "253" "e-plan" "c" "1" "e-wire"   "lt" "pds3" "e-line2" "lt" "rece4" "e-recep" "lt" "elp" "e-elp" "C" "4" "SHEET"   "S" "E-PLAN" "")  (prompt "\n ** Layer [ E-LINE(2),E-LINE2(2),E-WIRE(1),E-SYM(3),E-RECEP(3),ELP(2),PLAN(15) ] in Make ! **"))(defun C:MLA2()  (command "color" "bylayer")  (command "layer" "n" "line,line2,wire,elec,recep,elp,plan,mach,50"           "c" "2" "line,line2,elp" "c" "3" "50,elec,recep" "c" "253" "plan"           "c" "1" "wire" "lt" "pds3" "line2" "c" "5" "mach" "C" "4" "SHEET"           "lt" "rece4" "recep" "lt" "elp" "elp" "S" "PLAN" "")  (prompt "\n ** Layer [ LINE(2),LINE2(2),WIRE(1),ELEC(3),RECEP(3),ELP(2),PLAN(15),MACH(5) ] in Make ! **"))(defun C:MLAs()  (command "COLOR" "BYLAYER")  (command "LAYER"   "N" "SHEET,ARCH,SP,SL,SRE,STE,STV,SSE,SF,SW,L1,L2,L3,L4,T3,TE"   "C" "2" "STE,STV,SSE,SF,SW,TE" "C" "253" "ARCH" "C" "4" "L1,L2,L3,L4"   "C" "6" "T3" "C" "10" "SP,SL,SRE" "C" "4" "SHEET"   "LT" "RECE4" "L2" "LT" "ELP" "L3" "LT" "PDS" "L4" "S" "L1" "")  (prompt "\n ** LAYER-MAKE WAS COMPLETE ( FOR ELECTRIC DESIGN ) **")  )(defun C:CL(/ a1 a2 b2 la-name)   (prompt " = Change Layer (Target)")   (setq olderr  *error* *error* myerror chm 0)   (prompt "\n ** Select entities to be changed : ")   (setq a1 (ssget))   (if a1      (progn         (prompt "\n ** Select-Pick to entity on target layer : ")         (setq a2 (entsel))         (if a2            (progn               (setq b2 (entget (car a2)))               (setq la-name (cdr (assoc 8 b2)))            )            (setq la-name (getstring "\n Enter target Layer Name : "))         )         (command "CHPROP" a1 "" "layer" la-name "c" "bylayer" "")      )   )   (prompt "\n Change Layer is [")(prin1 la-name)(prompt "] ")(prin1))(defun C:CC(/ a la-name)   (prompt " = Change Layer (Current)")   (setq olderr  *error* *error* myerror chm 0)   (prompt "\n ** Select entities to be changed : ( By-Current LAYER )")   (setq a (ssget))   (if a      (progn         (setq la-name(getvar "CLAYER"))         (command "CHPROP" a "" "layer" la-name "c" "bylayer" "")      )   )   (prompt "\n Change Layer is [")(prin1 la-name)(prompt "] ")(prin1))(defun C:CC2(/ a la-name)   (prompt " = Change Layer (Current)")   (setq olderr  *error* *error* myerror chm 0)   (prompt "\n ** Select entities to be changed : ( By-Current LAYER )")   (setq a (ssget))   (if a      (progn         (setq la-name(getvar "CLAYER"))         (command "CHPROP" a "" "layer" la-name "c" "bylayer" "ltype" "bylayer" "")      )   )   (prompt "\n Change Layer is [")(prin1 la-name)(prompt "] ")(prin1))(defun C:SLA(/ la name)   (prompt " = Set Layer (Pick)")   (setq olderr  *error* *error* myerror chm 0)   (setq la(car (entsel "\n\t Pick an object on the SETTING LAYER :")))   (if la      (progn         (setq name (cdr (assoc 8 (entget la))))         (command "layer" "set" name "")         (command "layer" "Unlock" name "")      )      (progn         (setq name (getstring "\n\t Enter the SET-LAYER to NAME ? : "))         (command "layer" "set" name "")         (command "layer" "Unlock" name "")      )   )   (prin1 name)(prin1))(defun C:FLA(/ la name)   (prompt " = Off Layer (Pick)")   (setq olderr  *error* *error* myerror chm 0)   (setq la (car (entsel "\n\t Pick an object to be --OFF-- layer :")))   (if la      (progn         (setq name (cdr (assoc 8 (entget la))))         (command "layer" "off" name "")      )      (progn         (setq name (getstring "\n\t Enter the OFF-LAYER's to NAME ? : "))         (command "layer" "off" name "")      )   )   (prin1 name)(prin1))(defun C:UULA(/ la name)   (prompt " = Un-Lock Layer (Pick)")   (setq olderr  *error* *error* myerror chm 0)   (setq la (car (entsel "\n\t Pick an object to be --UNLOCK-- layer :")))   (if la      (progn         (setq name (cdr (assoc 8 (entget la))))         (command "layer" "unlock" name "")      )      (progn         (setq name (getstring "\n\t Enter the Un-LOCK-LAYER's to NAME ? : "))         (command "layer" "unlock" name "")      )   )   (prin1 name)(prin1))(defun C:LLA(/ la name)   (prompt " = Lock Layer (Pick)")   (setq olderr  *error* *error* myerror chm 0)   (setq la (car (entsel "\n\t Pick an object to be --LOCK-- layer :")))   (if la      (progn         (setq name (cdr (assoc 8 (entget la))))         (command "layer" "lock" name "")      )      (progn         (setq name (getstring "\n\t Enter the LOCK-LAYER's to NAME ? : "))         (command "layer" "lock" name "")      )   )   (prin1 name)(prin1))(defun C:LOCK(/ la)   (prompt " = Lock-Layer (*)")   (prompt "\n\t Typing the With Un Lock layer Name :")   (setq la (getstring " Enter is Only Current Layer : "))   (if (or (= la nil)(= la ""))(setq la nil))   (command "layer" "lock" "*" "u" (getvar "CLAYER") "")   (if la (command "layer" "u" la "")))(defun C:ULA()(prompt " = Un-Lock Layer (*)")   (command "Layer" "U" "*" "")(prin1))(defun C:TLA()(prompt " = Un-Freeze Layer (*)")   (command "Layer" "T" "*" "")(prin1))(defun C:ELA(/ la la_name del_la del_no)   (prompt " = Erase-Layer (Pick)")(setvar "cmdecho" 0)   (setq la(car (entsel "\n\t *** Pick an object to be DELETED LAYER :")))   (if (= la nil)      (setq la_name (strcase (getstring "\n\t *** Type Layer name to be ERASED :")))      (setq la_name (cdr (assoc 8 (entget la))))   )   (setq del_la (ssget "X" (list (cons 8 la_name))))   (setq index 0)   (if (/= del_la nil)      (progn         (command "erase" del_la "")         (setq del_no (sslength del_la))      )   )   (setq del_la nil)   (prompt (strcat "\n\t** Thank you! selected ["la_name"] layer erasd = "))   (prin1 del_no)   (prin1))(defun C:ON() (prompt " = On-Layer (*)")(command "layer" "on" "*" ""))(defun C:OFF()(prompt " = Off-Layer (*)")(command "LAYER" "OFF" "*" "N" ""))(defun C:OLA(/ lam)  (prompt " = On-Layer (Name)")  (setq lam (getstring "\n\t Typing the -On- Layer Name ? : "))  (setq lam (strcat lam "*"))  (if lam (command "layer" "on" lam ""))  (prin1 lam)(prin1))(DEFUN C:CHH()  (PROMPT "\n CH1 : [Layer=LINE], [Color=bylayer], [Ltype=bylayer] ")  (PROMPT "\n CH2 : [Layer=100],  [Color=4],       [Ltype=ELP] ")  (PROMPT "\n CH3 : [Layer=RECEP],[Color=bylayer], [Ltype=bylayer] ")  (PROMPT "\n CH4 : [Layer=ELP],  [Color=bylayer], [Ltype=bylayer] ")  (PROMPT "\n CH5 : [Layer=PLAN], [Color=7],       [Ltype=ELP] ")  (PROMPT "\n CH6 : [Layer=PLAN], [Color=7],       [Ltype=PDS3] ")  (PROMPT "\n CH7 : [Layer=PLAN], [Color=bylayer], [Ltype=Default] ")  (PROMPT "\n 33  : [Layer=Default], [Color=3], [Ltype=PDS] "))(defun chg-lalt(a / b)   (setq b(ssget))   (command "CHPROP" b "" "layer" a "c" "bylayer" "LT" "BYLAYER" ""))(defun C:CH1(/ a)  (prompt "\n Change of layer=[LINE], color=[byl], ltype=[byl]")  (chg-lalt "LINE"))(defun c:ch2()  (setq a (car (entsel)))  (prompt "\n Change of layer=[100], color=[4], ltype=[ELP]")  (command "chprop" a "" "layer" "100" "c" 4 "ltype" "elp" ""))(defun C:CH3(/ a)  (prompt "\n Change of layer=[RECEP], color=[byl], ltype=[byl]")  (chg-lalt "RECEP"))(defun C:CH4(/ a)  (prompt "\n Change of layer=[ELP], color=[byl], ltype=[byl]")  (chg-lalt "ELP"))(defun c:33()  (prompt "\n Change of layer=[None], color=[3], ltype=[PDS]")  (setq a (ssget))  (command "chprop" a "" "c" 3 "ltype" "pds" ""))(defun c:ch5()  (prompt "\n Change of layer=[PLAN], color=[7], ltype=[ELP]")  (setq a(ssget))  (command "chprop" a "" "layer" "plan" "c" 7 "ltype" "elp" ""))(defun c:ch6()  (prompt "\n Change of layer=[PLAN], color=[7], ltype=[PDS3]")  (setq a(ssget))  (command "chprop" a "" "layer" "plan" "c" 7 "ltype" "pds3" ""))(defun c:ch7()  (prompt "\n Change of layer=[PLAN], color=[byl], ltype=[None]")  (setq a(ssget))  (command "chprop" a "" "layer" "plan" "c" "bylayer" ""))(defun chg-ltype(a / b)   (prompt "\n LINETYPE to CHANGE at [ ")   (prin1 a)(prompt " ] :")   (setq b(ssget))   (command "CHPROP" b "" "LT" a ""))(defun C:LT1(/ a) (chg-ltype "PDS"))(defun C:LT1A(/ a)(chg-ltype "PDS2"))(defun C:LT1B(/ a)(chg-ltype "PDS3"))(defun C:LT2(/ a) (chg-ltype "RECE4"))(defun C:LT2A(/ a)(chg-ltype "RECE5"))(defun C:LT2B(/ a)(chg-ltype "RECE3"))(defun C:LT3(/ a) (chg-ltype "ELP7"))(defun C:LT4(/ a) (chg-ltype "ELP"))(defun C:LT5(/ a) (chg-ltype "ELP2A"))(defun C:LT6(/ a) (chg-ltype "ELP2B"))(defun C:LTY(/ a)   (if (= ltname nil)(setq ltname "BYLAYER"))   (prompt "\n CHANGE-LINETYPE <")(prin1 ltname)(prompt "> : ")   (prompt "  if LineType Setting --> command : LTT ")   (prompt "\n Select Object for change : ")   (setq a(ssget))   (if a (command "CHPROP" a "" "lt" ltname ""))   (prin1))(defun C:LTT()   (setq LTNAME (getstring "\n Enter LineType name ? : "))   (prompt "\t Now Changing LineType is [")(prin1 ltname)(prompt "] --")   (c:lty))(defun C:R1(/ a b p1) (bl-r1 180))(defun C:R2(/ a b p1) (bl-r1 90))(defun C:RO1(/ a b p1)(bl-r1 60))(defun C:RO2(/ a b p1)(bl-r1 -60))(defun bl-r1(b)   (prompt " = Block Rotate at [")(prin1 b)(prompt "] ")   (setq olderr  *error* *error* myerror chm 0)   (old-non)   (setq a (entsel))   (setq p1 (cdr (assoc 10 (entget (car a)))))   (command "rotate" a "" p1 b)   (new-sn))(defun C:R3(/ ro-x ebl nl n ctts e2 ed p1 i)   (prompt "\n Select Block's Groop-Rotate at +90")   (bl-ro 90)   (prin1))(defun C:R4(/ ro-x ebl nl n ctts e2 ed p1 i)   (prompt "\n\t Select Block's Groop-Rotate ")   (bl-ro 0)   (prin1))(defun C:R5(/ ro-x ebl nl n ctts e2 ed p1 i)   (prompt "\n\t Select Block's Groop-Rotate <All is Rotate = 0> ")   (bl-ro "0")   (prin1))(defun bl-ro(ro-x)   (if (= ro-x 0)(setq b "??")(setq b ro-x))   (prompt " = Block Rotate at [")(prin1 b)(prompt "] ")   (setq olderr  *error* *error* myerror chm 0)   (setq ebl(SSGET))   (setq nl(sslength ebl))   (setq n(- nl 1))   (setq ctts 0)   (setq i 0)   (old-non)   (if (= ro-x 0)      (setq r_ang (getreal "\n  Enter the Rotation's ANGLE ? : "))      (if (= ro-x "0")(setq r_ang 0)(setq r_ang 90))   )   (while (<= i n)      (setq ed(entget (setq e2(ssname ebl i))))      (setq bna0 (cdr (assoc 0 ed)))      (if (= "INSERT" bna0)         (progn            (setq p1(cdr (assoc 10 ed)))            (command "rotate" e2 "" p1 r_ang)            (setq ctts (+ ctts 1))         )      )      (setq i(1+ i))   )   (new-sn)   (prompt "\n Rotate at -- [")(prin1 ctts)(prompt "] ea "))(defun C:R0(/ e1 nl n i chm e2 t0 tt1 tts1 ed)  (setq olderr  *error* *error* TEXERROR chm 0)  (prompt " = Block's Angle -> [0] ")  (setq i 0)(setq e1(sel_block))  (if e1    (progn      (setq nl(sslength e1))      (setq n(- nl 1))      (while (<= i n)        (setq ed(entget (setq e2(ssname e1 i))))        (setq ed(subst (cons 50 0)(assoc 50 ed) ed))        (entmod ed)        (setq i(1+ i))) ) ) )(defun err()(alert " [ Missing the non-input !!! ] "))(setq bl-sc (getvar "USERR4"))(defun set-blsc()  (prompt "\n\t Enter Block Sclae <")(prin1 bl-sc)(prompt "> : ")  (setq sold bl-sc)  (initget (+ 2 4))  (setq bl-sc(getreal))  (if (= bl-sc nil)(setq bl-sc sold))  (setvar "userr4" bl-sc))(defun C:SS(/ sold tag p3)   (setq olderr  *error* *error* myerror chm 0)   (if (or (= bl-sc 0.0) (= bl-sc nil))(setq bl-sc wire-scale))   (prompt "\n\t SCALE at [")(prin1 bl-sc)(prompt "] ")   (prompt " and Select<Pick> / Scale(Enter) : ")   (old-non)   (setq tag (entsel))   (if tag      (progn         (setq p3 (cdr (assoc 10 (entget (car tag)))))         (command "scale" tag "" p3 bl-sc)      )      (set-blsc)   )   (new-sn))(defun C:SM(/ sold tag bl bl1 i n nl p3)   (setq olderr  *error* *error* myerror chm 0)   (if (or (= bl-sc 0.0) (= bl-sc nil))(setq bl-sc wire-scale))   (prompt "\n\t SCALE at [")(prin1 bl-sc)(prompt "] ")   (prompt " and Select<Multiple> / Scale(Enter) : ")   (old-non)   (setq tag (ssget (list (cons 0 "INSERT"))))   (if tag      (progn         (setq i 0)         (setq nl (sslength tag))         (setq n (- nl 1))         (while (<= i n)            (setq bl (entget (setq bl1 (ssname tag i))))            (if (= "INSERT" (cdr (assoc 0 bl)))               (progn                  (setq p3 (cdr (assoc 10 bl)))                  (command "scale" bl1 "" p3 bl-sc)                )            )            (setq i (1+ i))         )      )      (set-blsc)   )   (new-sn))(defun C:MI1(/ kk A P3)   (prompt " = Block Mirring Vertical (Old is Del)")   (old-non)   (setq kk 1)   (while kk      (setq A (ENTSEL))      (if a         (progn            (setq P3 (CDR (ASSOC 10 (ENTGET (CAR A)))))            (command "MIRROR" A "" P3 "@100<90" "Y")         )         (setq kk nil)      )   )   (new-sn))(defun C:MI2(/ kk A P3)   (prompt " = Block Mirring Horigental (Old is Del)")   (old-non)(setq kk 1)(while kk(setq A (ENTSEL))   (if a(progn (setq P3 (CDR (ASSOC 10 (ENTGET (CAR A)))))   (command "MIRROR" A "" P3 "@100<0" "Y"))   (setq kk nil)))(new-sn))(defun mirr-yn(key1 key2)   (old-non)   (setvar "OSMODE" 0)   (if (= key1 "H")      (setq pnt2 "@1<90")      (setq pnt2 "@1<0")   )   (prompt "\n Select the Mirror's entty : ")   (setq MI(ssget))   (if MI      (progn         (setvar "OSMODE" 2)         (setq P1 (getpoint "\n Pick the Mirroring Base Point (mid) : "))         (setvar "OSMODE" 0)         (command "MIRROR" MI "" P1 pnt2 key2)      )      (prompt "\n Select was Empty .....")   )   (new-sn))(defun C:MI3()(mirr-yn "H" "Y"))(defun C:MI4()(mirr-yn "V" "Y"))(defun C:MI5()(mirr-yn "H" "N"))(defun C:MI6()(mirr-yn "V" "N"))(defun C:UCSE()(SNAP-RO)(command "Ucsicon" "On")(command "Ucs" "E"))(defun C:UCSW()(SNAP-RO)(command "Ucsicon" "Off")(command "Ucs" "W"))(defun C:UCSV()(SNAP-RO)(command "Ucsicon" "On")(command "Ucs" "V"))(defun per_li(b / pt1 pt2)   (setq pt1(cdr (assoc 10 b)))(setq pt2(cdr (assoc 11 b)))   (setq ang1 (angle pt1 pt2)) (SNAP-RO) (setvar "SNAPANG" ang1))(defun per_bl(b)   (setq ang1 (cdr (assoc 50 b))) (SNAP-RO) (setvar "SNAPANG" ang1))(defun per_ar(b / ang2)   (setq ang1 (cdr (assoc 50 b))) (setq ang2 (cdr (assoc 51 b)))   (setq ang1 (/ (+ ang1 ang2) 2)) (SNAP-RO) (setvar "SNAPANG" ang1))(defun C:PER(/ b pt1 pt2 ang1 ang2 xx last-po ent_name)  (setq olderr  *error* *error* myerror chm 0)  (setq xx nil ang1 nil ent_name nil last-po nil)  (graphscr)  (setq last-po(getvar "lsatpoint"))  (setq b(entget (car (entsel "\n Select the \"Snap Angle Change\" at Line,Arc,Block :"))))  (if b (setq ent_name (cdr (assoc 0 b))))  (cond    ((= ent_name "LINE")  (per_li b))    ((= ent_name "INSERT")(per_bl b))    ((= ent_name "TEXT")  (per_bl b))    ((= ent_name "ARC")   (per_ar b))    (T nil)  )  (if last-po (setvar "lastpoint" last-po))  (if ang1    (progn      (setq xx (rem (rtd ang1) 360))      (prompt "\n** Select Angle is [")(prin1 xx)(prompt "] **")    )    (prompt "\n !!! Select is Fail !!!")  )  (prin1))(defun DIMENSION(/ p1 dsc dsc1 dsc2)   (setq olderr  *error* *error* myerror chm 0)   (command "layer" "unlock" "*" "")   (setq p1 (getvar "VIEWCTR"))   (command ".insert" "dimdot" p1 """""" "ERASE" (entlast) "")   (command "dim" "dimblk" "dimdot" "dimasz" "1.3" "dimcen" "-1"            "dimdle" "2" "dimdli" "8" "dimexe" "2" "dimexo" "2"            "dimlfac" "1" "dimtad" "on" "dimtih" "off" "dimtix" "on"            "dimtm" "0" "dimtofl" "off" "dimtoh" "on" "dimtol" "off"            "dimtxt" "2.5" "dimse1" "off" "dimse2" "off" "dimaso" "on"            "dimclre" "bylayer" "dimclrd" "bylayer" "dimclrt" "bylayer"            "dimtofl" "on"            "exit")   (setq dsc(getvar "DIMSCALE"))   (prompt "\n\t Dimension scale's ? <")(prin1 dsc)   (setq dsc1(getreal "> : "))   (if (or (= dsc1 nil)(= dsc1 ""))(setq dsc2 dsc)(setq dsc2 dsc1))   (setvar "dimscale" dsc2))(defun C:DIMension()(DIMENSION))(defun C:DIMS()(DIMENSION)(C:UPD))(defun C:HOR()(command "DIM1" "HOR" )(prin1))(defun C:VER()(command "DIM1" "VER" )(prin1))(defun C:UPD()(command "DIM1" "UPD" )(prin1))(defun C:BAS()(command "DIM1" "BAS" )(prin1))(defun C:DTT()(command "DIM1" "NEW" )(prin1))(DEFUN C:CON(/ p1)  (setq xx 1)  (while xx    (setq p1 (getpoint "\n Pick Continuous Next-Point ? :"))    (if p1 (command "dim" "con" p1 "")(PROGN (COMMAND "E")(setq xx nil)))  ))(defun C:IWB(/ na)   (command ".qsave")   (setq NA(GETVAR "DWGNAME"))   (prompt "\n* End & Purge to [")(PRIN1 NA)(prompt "] !")   (command "WBLOCK" NA "Y" "*" "OPEN" "Y" "~"))(defun C:IWB2(/ na a)  (textscr)  (prompt "\n !!! Warning !!! Warning !!! Warning !!! Warning !!! Warning !!!")  (prompt "\n !!! Warning !!! Warning !!! Warning !!! Warning !!! Warning !!!")  (prompt "\n !!! Warning !!! Warning !!! Warning !!! Warning !!! Warning !!!")  (prompt "\n !!! °æ°í !!! °æ°í !!! °æ°í !!! ¾Èº¸ÀÌ´Â°Ç ¸ðµÎ°¡ »èÁ¦µÈ´Ù !!!")  (prompt "\n !!! °æ°í !!! °æ°í !!! °æ°í !!! ¾Èº¸ÀÌ´Â°Ç ¸ðµÎ°¡ »èÁ¦µÈ´Ù !!!")  (prompt "\n !!! °æ°í !!! °æ°í !!! °æ°í !!! ¾Èº¸ÀÌ´Â°Ç ¸ðµÎ°¡ »èÁ¦µÈ´Ù !!!")  (prompt "\n This Command is Only viewing-object Saving=>Clocking object as erase")  (prompt "\n This Command is Only viewing-object Saving=>Clocking object as erase")  (prompt "\n This Command is Only viewing-object Saving=>Clocking object as erase")  (setq a (getvar "cmdecho"))  (setvar "cmdecho" 0)  (initget "Yes No")  (if (= (getkword "\n Purge the drawing session ?  Yes/No: ") "Yes")    (progn      (command ".qsave")            (command "LAYER" "U" "*" "")      (command "zoom" "e")      (setq p1(getvar "EXTMIN"))      (setq p2(getvar "EXTMAX"))      (setq NA(GETVAR "DWGNAME"))      (prompt "\n* End & Purge to [")(PRIN1 NA)(prompt "] !")      (command "WBLOCK" NA "Y" "" "0,0" "c" p1 p2 "" "OPEN" "Y" "~")    )    (princ "\n [Yes] is Purge to drawing session.")  )  (if a (setvar "cmdecho" a))(princ))(defun C:RC() (prompt " = Lead-Line (Tick+Cir) - 1")(lead-l 0 1 "A"))(defun C:RC2()(prompt " = Lead-Line (Tick+Cir) - 2")(lead-l 0 2 "A"))(defun C:RR() (prompt " = Lead-Line (Room) - 1")    (lead-l 0 1 "C"))(defun C:RR2()(prompt " = Lead-Line (Room) - 2")    (lead-l 0 2 "C"))(defun C:RE() (prompt " = Lead-Line (Tick) - 1")    (lead-l 0 1 "T"))(defun C:RE2()(prompt " = Lead-Line (Tick) - 2")    (lead-l 0 2 "T"))(defun C:RE3()(prompt " = Lead-Line (Tick) - @60")  (lead-l 60 2 "T"))(defun C:RE4()(prompt " = Lead-Line (Tick) - @30")  (lead-l 30 2 "T"))(defun C:RE5()(prompt " = Lead-Line (Tick) - @45")  (lead-l 45 2 "T"))(defun lead-l (a_k p_k e_k / stp po1 po2 po3 ang olds c_layer)   (setq olderr  *error* *error* reerror chm 0)   (old-non)(snap-ro)   (IF (= ARD NIL) (setq ARD (GETVAR "LTSCALE")))   (setq STP (GETPOINT "\nPick Point of START (none) : "))   (setq PO1 (GETPOINT STP "\nPick Point of SECOND (none) : "))   (grdraw stp po1 133)   (setq trr nil)   (cond     ((= p_k 1)(setq trr 1))     ((= p_k 2)(setvar "SNAPANG" (dtr a_k)))   )   (if (= trr nil)(setq PO2 (GETPOINT PO1 "\nPick Point of END (none) : ")))   (SETVAR "SNAPANG" (DTR 0))   (if po2      (progn (cond ((= e_k "T")(re_draw_t 2))                   ((= e_k "A")(re_draw_a 2))                   ((= e_k "C")(re_draw_c 2))))      (progn (cond ((= e_k "T")(re_draw_t 1))                   ((= e_k "A")(re_draw_a 1))                   ((= e_k "C")(re_draw_c 1))))   )   (new-sn))(defun re_draw_a(a)  (la-set "100" 4)  (setq RAD (GETVAR "LTSCALE"))  (setq RAD (/ RAD 2))  (if (= a 2)    (progn      (setq ANG (ANGLE PO1 PO2))      (setq PO3 (POLAR PO2 (- ANG (dtr 180)) (* 2 ARD)))      (command "PLINE" STP PO1 PO3 "W" (* ARD 0.8) "0" PO2 "")      (command "CIRCLE" STP RAD)    )    (progn      (setq ANG (ANGLE STP PO1))      (setq PO2 (POLAR PO1 (- ANG (dtr 180)) (* 2 ARD)))      (command "PLINE" STP PO2 "W" (* ARD 0.8) "0" PO1 "")      (command "CIRCLE" STP RAD)    )  )  (la-back))(defun re_draw_t(a)  (la-set "100" 4)  (if (= a 2)    (progn      (setq ANG (ANGLE PO1 PO2))      (setq PO3 (POLAR PO2 (- ANG (dtr 180)) (* 2 ARD)))      (command "PLINE" STP PO1 PO3 "W" (* ARD 0.8) "0" PO2 "")    )    (progn      (setq ANG (ANGLE STP PO1))      (setq PO2 (POLAR PO1 (- ANG (dtr 180)) (* 2 ARD)))      (command "PLINE" STP PO2 "W" (* ARD 0.8) "0" PO1 "")    )  )  (la-back))(defun re_draw_c(a)  (la-set "100" 4)  (setq RAD (GETVAR "LTSCALE"))  (setq RAD (/ RAD 2))  (if (= a 2)    (progn      (setq ANG (ANGLE PO1 PO2))      (command "PLINE" STP PO1 PO2 "" "CIRCLE" PO2 RAD))    (progn      (setq ANG (ANGLE STP PO1))      (command "LINE" STP PO1 "" "CIRCLE" PO1 RAD))  )  (la-back))(defun C:PB(/ p1 p2 p3 p4 XXXX YYYY)   (setq olderr  *error* *error* myerror chm 0)   (graphscr)   (old-non)   (if (= len-x nil)(setq len-x 300.0))   (prompt "\n\t Enter PULL-BOX size? (Horigental) <")(PRIN1 LEN-X)   (setq XXXX (getdist "> : "))   (IF XXXX (setq LEN-X XXXX))   (prompt "\n\t Enter PULL-BOX size? (Vertical) : <")   (prin1 LEN-X)   (setq YYYY (getdist "> : "))   (if YYYY (setq len-y YYYY)(setq LEN-Y LEN-X))   (setq p1 (getpoint "\n\t Enter POINT? (none) : "))   (setq p2 (list (car p1) (+ (cadr p1) len-y)))   (setq p4 (list (+ (car p1) len-x) (cadr p1)))   (setq p3 (list (car p4) (cadr p2)))   (SETVAR "CMDECHO" 0)   (command "pline" p1 p2 p3 p4 "c" "color" "bylayer")   (NEW-SN))(defun C:PX(/ p1 p2 p3 p4 XXXX YYYY)   (setq olderr  *error* *error* myerror chm 0)   (graphscr)   (old-non)   (if (= len-x nil)(setq len-x 300.0))   (prompt "\n\t Enter PULL-BOX size? (Horigental) <")(PRIN1 LEN-X)   (setq XXXX (getdist "> : "))   (IF XXXX (setq LEN-X XXXX))   (prompt "\n\t Enter PULL-BOX size? (Vertical) : <")   (prin1 LEN-X)   (setq YYYY (getdist "> : "))   (if YYYY (setq len-y YYYY)(setq LEN-Y LEN-X))   (setq p1 (getpoint "\n\t Enter POINT? (none) : "))   (setq p2 (list (car p1) (+ (cadr p1) len-y)))   (setq p4 (list (+ (car p1) len-x) (cadr p1)))   (setq p3 (list (car p4) (cadr p2)))   (SETVAR "CMDECHO" 0)   (command "pline" p1 p2 p3 p4 p1 p3 p4 p2 "" "color" "bylayer")   (NEW-SN))(defun C:D(/ po1 po2 dis ang)    (setq po1 (getpoint "\n Enter First Point : ")        po2 (getpoint po1 ", Enter Second Point : ")  )  (setq dis (distance po1 po2) ang (rtd (angle po1 po2)))  (prompt "\n Distance = [")(prin1 dis)(prompt "], ")  (prompt "Angle = [")(prin1 ang)(prompt "] ")  (prin1))(defun C:ME(/ a aname olds)   (setq olderr  *error* *error* myerror chm 0)   (setq a (entsel))   (IF (OR (= BLNAME "")(= BLNAME NIL))(setq blname "IL60"))   (prompt "\n Divide Block Name ([.] is Points) ? <")(prin1 blname)   (setq aname (getstring "> : "))   (if (/= aname ".")      (progn         (if (/= aname "")(setq blname (strcase aname)))         (prompt "\n ** Enter Block-distance ? : ")         (command "MEASURE" a "Block" blname "Y" pause )      )      (progn         (prompt "\n ** Enter Distance ? : ")         (command "MEASURE" a pause)      )   ))(defun C:DV(/ a aname olds wd_1 wd-no)   (setq olderr  *error* *error* myerror chm 0)   (setq a (entsel))   (if (= blname nil)(setq blname "IL60"))   (prompt "\n Divide Block Name ([.] is Points) ? <")(prin1 blname)   (setq aname (getstring "> : "))   (if (/= aname ".")      (progn         (if (/= aname "")(setq blname (strcase aname)))         (setq wd-no(getint "\n ** Enter number of segupment ? : "))         (command "DIVIDE" a "Block" blname "Y" wd-no)         (setq po1 (cdr (assoc 10 (setq list2 (entget (car a))))))         (setq po2 (cdr (assoc 11 list2)))         (setq wd_1 (/ (distance po1 po2) wd-no))         (prompt "\t Witdh is = ")(prin1 wd_1)(prompt " *")(prin1)      )      (progn         (setvar "pdmode" 3)(setvar "pdsize" -3)         (prompt "\n ** Enter number of segupment ? : ")         (command "DIVIDE" a pause)         (prin1)         (setvar "pdmode" 0)(setvar "pdsize" 0)      )   ))(defun C:UNIT()(command "UNITS" "2" "0" "1" "4" "0" "N"))(defun C:BF(/ a)   (prompt "\n Break command : First point option is \"INT\"")   (setq a (entsel))   (if a(command "BREAK" a "F" "INT" pause pause)))(defun C:BI(/ a)   (prompt "\n Break command : Second point is Same at First point : option is \"INT\"")   (setq A (entsel))   (if A (command "BREAK" A "F" "INT" pause (GETVAR "LASTPOINT"))))(defun C:BBB(/ p1 p2 p3 a)   (if (or (= bb-w nil)(= bb-w 0))(setq bb-w 150))   (prompt " Break command : Block-side (ex:E-L,G-L....)")   (prompt "\n Width is [")(prin1 bb-w) (prompt "].. change is \"(BBW)\" ")   (setq A (entsel))(old-ins)   (setq p1 (getpoint"Enter BREAK Point ? (Insert-point) : "))   (SETVAR "OSMODE" 0)   (setq p2(list(+ (car p1) bb-w) (cadr p1)))   (setq p3(list(- (car p1) bb-w)(cadr p1)))   (if A (command "BREAK" A "F" p2 p3))   (new-sn))(defun bbw()(setq bb-w(getreal "\n Enter [C:BBB] width is ?")))(defun chg-col(key)   (prompt "\n Change Color command : ")   (cond      ((= key 1)(setq key "Red"))      ((= key 2)(setq key "Yellow"))      ((= key 3)(setq key "Green"))      ((= key 4)(setq key "Cyan"))      ((= key 5)(setq key "Blue"))      ((= key 6)(setq key "Magenta"))      ((= key 7)(setq key "White"))   )   (prompt " Select Objetct for Change-Color as [")(prin1 key)(prompt "]")   (setq A(SSGET))   (command "CHPROP" A ""  "C" key "" ))(defun C:C1(/ a)(chg-col 1))(defun C:C2(/ a)(chg-col 2))(defun C:C3(/ a)(chg-col 3))(defun C:C4(/ a)(chg-col 4))(defun C:C5(/ a)(chg-col 5))(defun C:C6(/ a)(chg-col 6))(defun C:C7(/ a)(chg-col 7))(defun C:C8(/ a)(chg-col 8))(defun C:C9(/ a)(chg-col 9))(defun C:C10(/ a)(chg-col 10))(defun C:C11(/ a)(chg-col 11))(defun C:C12(/ a)(chg-col 12))(defun C:C13(/ a)(chg-col 13))(defun C:C14(/ a)(chg-col 14))(defun C:C15(/ a)(chg-col 15))(defun C:C101(/ a)(chg-col 101))(defun C:C41(/ a)(chg-col 41))(defun C:COO(/ a)   (prompt "\n Change Color command : ")   (setq a (ssget))   (if a      (progn         (initget (+ 1 2 4))         (setq co-no(getint "\n Enter you want color number ? :"))         (command "CHPROP" A ""  "C" co-no "" )      )   ))(defun C:PW(/ a l-pl p-w)  (prompt "\n LWPOLYLINE's Width Setting command :")  (IF (= PL-WD NIL)    (prompt "\n Current Width is \"0\" ! ")    (PROGN      (prompt "\n Current Width is [")      (PRIN1 PL-WD)      (prompt "] ... If You Change Width to \"command:PWL\" ")    )  )  (setq A (ENTSEL))  (setq L-PL(CDR (ASSOC 0 (ENTGET (CAR A)))))  (if (= pl-wd nil)      (if a (setq p-w (getreal "\n Enter Poly-line's Width ? ")))      (setq p-w pl-wd)  )  (setq pl-wd p-w)  (if p-w    (IF (= L-PL "LWPOLYLINE")        (command "PEDIT" A "W" p-w "X")        (command "PEDIT" A "" "W" p-w "X")    )  ))(defun C:PWL()(setq pl-wd nil)(C:PW))(defun C:PWWL()(setq pl-wd nil)(C:PWW))(defun C:PWW(/ E1 E2 ED NL N I l-pl p-w)  (prompt "\n LWPOLYLINE's Width Setting command :")  (IF (= PL-WD NIL)    (prompt "\n Current Width is \"0\" ! ")    (PROGN      (prompt "\n Current Width is [")      (PRIN1 PL-WD)      (prompt "] ... If You Change Width to \"command:PWWL\" ")    )  )  (setq i 0)  (setq e1(ssget))  (if e1    (progn      (setq nl(sslength e1))      (setq n(- nl 1))      (while (<= i n)        (setq ed(entget (setq e2(ssname e1 i))))        (setq L-PL(cdr (assoc 0 ed)))        (if (= pl-wd nil)            (if a (setq p-w (getreal "\n Enter Poly-line's Width ? ")))            (setq p-w pl-wd)        )        (setq pl-wd p-w)        (if p-w            (IF (= L-PL "LWPOLYLINE")                (command "PEDIT" E2 "W" p-w "X")                (command "PEDIT" E2 "" "W" p-w "X")            )        )        (setq I (+ 1 I))      )    )  ))(defun C:PJ(/ a l-pl kk)   (prompt "\n Line's or Pline's Joint command :")   (prompt "\n Select the Base [Line] or [Pline] : ")   (setq A (ENTSEL))   (setq L-PL(CDR (ASSOC 0 (ENTGET (CAR A)))))   (prompt "\n Select the Other [Line's] or [Pline's] : ")   (setq KK (SSGET))   (IF (= L-PL "LWPOLYLINE")      (command "PEDIT" A "J" KK "" "X")      (command "PEDIT" A "" "J" KK "" "X")   ))(defun C:PJ2(/ a l-pl kk)   (prompt "\n Line's or Pline's Joint command :")   (prompt "\n Select the Base [Line] or [Pline] : ")   (setq A (ENTSEL))   (setq L-PL(CDR (ASSOC 0 (ENTGET (CAR A)))))   (prompt "\n Select the Other [Line's] or [Pline's] : ")   (setq KK (SSGET))   (IF (= L-PL "LWPOLYLINE")      (command "PEDIT" A "J" KK "" "X")      (command "PEDIT" A "" "J" KK "" "X")   )   (command "chprop" "L" "" "layer" "100" "c" "byl" ""))(defun C:PS(/ a)   (prompt "\n Pline Corve command :")   (setq a (entsel "\n Select Pline to Spline Corve : "))   (command "pedit" a "s" "x"))(defun C:MM(/ a p1 p2 p3 MMK olds)  (prompt "\n Extended Move command :")  (setq olderr  *error* *error* myerror chm 0)    (old-sn)  (snap-ro)  (if (= m_dis nil)(setq m_dis 25))  (prompt "\n Select the MOVING target <")(prin1 m_dis)(prompt "> ? : ")  (setq a(ssget))  (if (= a nil)    (progn      (prompt "\n Enter moving DISTANCE ? : <")(PRIN1 M_DIS)      (setq MMK (GETDIST "> ? : "))      (IF MMK (setq M_DIS MMK)(setq M_DIS M_DIS))    )    (progn      (setq p1 (getpoint "\n Start Ponit ? (none) : "))      (setq p2 (getpoint p1 "\n To point ? (none) : "))      (setq p3 (polar p1 (angle p1 p2) m_dis))      (command "move" a "" p1 p3)    )  )  (new-sn))(defun C:MM1()(mes-mm)(MOVEXX 1))(defun C:MM2()(mes-mm)(MOVEXX 2))(defun C:MM3()(mes-mm)(MOVEXX 3))(defun C:MM4()(mes-mm)(MOVEXX 4))(defun C:MM5()(mes-mm)(MOVEXX 5))(defun C:MM6()(mes-mm)(MOVEXX 6))(defun C:MM7()(mes-mm)(MOVEXX 7))(defun C:MM8()(mes-mm)(MOVEXX 8))(defun C:MM9()(mes-mm)(MOVEXX 9))(defun C:MM10()(mes-mm)(MOVEXX 10))(defun C:MM15()(mes-mm)(MOVEXX 15))(defun C:MM20()(mes-mm)(MOVEXX 20))(defun C:MM25()(mes-mm)(MOVEXX 25))(defun C:MM30()(mes-mm)(MOVEXX 30))(defun mes-mm()(prompt "\n Extended Move command :"))(defun movexx(xx / a p1 p2 p3 MMK olds)  (setq olderr  *error* *error* myerror chm 0)  (old-sn)  (snap-ro)  (setq m_dis (* 100 xx))  (prompt "\n Select the MOVING target <")(prin1 m_dis)(prompt "> ? : ")  (setq a(ssget))  (if a    (progn      (setq p1 (getpoint "\n Start Ponit ? (none) : "))      (setq p2 (getpoint p1 "\n To point ? (none) : "))      (setq p3 (polar p1 (angle p1 p2) m_dis))      (command "move" a "" p1 p3)    )    (prompt "\n !!! Select was Not Found !!! ")  )  (new-sn))(defun C:M2(/ m_dis2 a p1 p2 p3 olds)  (prompt "\n Extended Move command : Distance is (Offset/2) ")  (setq m_dis2 (/ (getvar "offsetdist") 2))  (setq xx (/ m_dis2 100))  (movexx xx))(defun C:M3(/ m_dis3 a p1 p2 p3 olds)  (prompt "\n Extended Move command : Distance is (Multiple-Copy/2) ")  (if (= c_dis nil)(setq c_dis 2000))  (setq m_dis3 (/ c_dis 2))  (setq xx (/ m_dis3 100))  (movexx xx))(defun C:MC1()(mes-mc)(COPYXX 1))(defun C:MC2()(mes-mc)(COPYXX 2))(defun C:MC3()(mes-mc)(COPYXX 3))(defun C:MC4()(mes-mc)(COPYXX 4))(defun C:MC5()(mes-mc)(COPYXX 5))(defun C:MC6()(mes-mc)(COPYXX 6))(defun C:MC7()(mes-mc)(COPYXX 7))(defun C:MC8()(mes-mc)(COPYXX 8))(defun C:MC9()(mes-mc)(COPYXX 9))(defun C:MC10()(mes-mc)(COPYXX 10))(defun C:MC15()(mes-mc)(COPYXX 15))(defun C:MC20()(mes-mc)(COPYXX 20))(defun C:MC25()(mes-mc)(COPYXX 25))(defun C:MC30()(mes-mc)(COPYXX 30))(defun mes-mc()(prompt "\n Multiple Copy command :"))(defun copyxx(xx / a p1 p2 p3 MMK olds)  (setq olderr  *error* *error* myerror chm 0)  (old-sn)  (snap-ro)  (setq m_dis (* 100 xx))  (prompt "\n Select the COPY target <")(prin1 m_dis)(prompt "> ? : ")  (setq a(ssget))  (if a     (progn       (setq aa 1)      (setq p1 (getpoint "\n Start Ponit ? (none) : "))      (setq p2 (getpoint p1 "\n To point ? (none) : "))	  (setq mc-ang (angle p1 p2))	  (setq pc-pnt (polar p1 mc-ang (* m_dis aa)))      (command "copy" a "" p1 pc-pnt)      (while a  	    (setq p3 (getpoint p1 "\n Next ? : "))	    (if p3 		  (progn 		    (setq aa (1+ aa))	        (setq pc-pnt (polar p1 mc-ang (* m_dis aa)))            (command "copy" a "" p1 pc-pnt)		  )		  (setq a nil)		)      )	)    (prompt "\n !!! Select was Not Found !!! ")  )  (new-sn))(defun C:MC(/ a i ddd olds)   (prompt "\n Multiple Copy command :")   (setq olderr  *error* *error* myerror chm 0)      (snap-ro)   (old-sn)      (IF (= C_DIS NIL)(setq C_DIS 2000))   (prompt "\n Select the Multiple-Copy target <D=")   (prin1 c_dis)(prompt "> ? : ")   (setq a(ssget))   (if (= a nil)      (progn         (prompt "\n Enter coping DISTANCE <")(prin1 c_dis)         (setq ddd (getdist "> ? : "))         (if ddd (setq c_dis ddd))         (prompt "\n Select the COPYNG target ? : ")         (setq a (ssget))         (if a (copy_m a c_dis))      )      (copy_m a c_dis)   )   (new-sn))(defun copy_m(sel dist1 / p1 p2 p3 count dist2)   (setq p1 (getpoint "\n Start Ponit ? (none) : "))   (setq count 1 dist2 dist1)   (while p1      (if (setq p2 (getpoint p1 "\n To point ? (none) : "))         (progn            (setq p3 (polar p1 (angle p1 p2) dist2))            (command "copy" sel "" p1 p3)            (setq count (1+ count))            (setq dist2 (* count dist1))         )         (setq p1 nil)      )   ))(defun C:BNAME(/ ENTTY LIST1 LIST2 B-NAME P1)  (setq ENTTY (ENTSEL))  (if entty (setq list1 (cdr (assoc 0 (setq list2 (entget (car entty)))))))  (IF (= LIST1 "INSERT")    (PROGN      (prompt "[name=")(setq B-NAME(prin1 (li_find 2 LIST2)))(prompt "]")      (setq P1 (GETPOINT))      (command "TEXT" P1 "" "" B-NAME)    )  ))(defun n2i(/ tag1 tag2 p1 p2 p3 p4 p5)  (prompt "\n\t Point at Line by Line Int-point : ")   (setq olderr  *error* *error* myerror chm 0)   (setq tag1 (entsel "\t Select First line : "))   (setq tag2 (entsel "\n Select other Line : \n"))   (if tag1      (progn         (old-non)         (setq p1 (cdr (assoc 10 (entget (car tag1)))))         (setq p2 (cdr (assoc 11 (entget (car tag1)))))         (setq p3 (cdr (assoc 10 (entget (car tag2)))))         (setq p4 (cdr (assoc 11 (entget (car tag2)))))         (setq p5 (inters p1 p2 p3 p4 nil))         (new-sn)         (setvar "LASTPOINT" p5)      )   ))(defun c:3()(n2i))(defun c:mil()(n2i)(prin1)(command "line" (getvar "lastpoint")))(defun n2 (/ p1 p2 ang dts)  (old-endint)  (setq p1 (getpoint "\First point (end+int) : "))  (setq p2 (getpoint p1 "\Second point (end+int) : "))  (grdraw p1 p2 133)  (setq ang (angle p1 p2))  (setq dts (/ (distance p1 p2) 2))  (SETVAR "OSMODE" 0)  (setvar "LASTPOINT" (setq p3 (polar p1 ang dts)))  (new-sn)	(prin1 p3))(defun C:2()(n2))(defun C:ML()(C:2)(prin1)(command "line" (getvar "lastpoint")))(defun C:CI2()(OLD-ENDINT)(command "circle" "2P" PAUSE PAUSE)(NEW-SN))(setq dwg-scale (/ (getvar "LTSCALE") 100))(defun in-wi(a)   (if (or (= wire-scale 0.0)(= wire-sacle 0))      (prompt "\n [wire-scale] is Nothing => First Running command [DWGS]")      (progn         (prompt "\n Now Wire-Scale is [")         (prin1 wire-scale)         (prompt"] If You Change Scale to Run --> [DWGS]")         (prompt "\n Pick the Insert Point for [")         (prin1 a)         (prompt "] : ")         (command ".insert" a pause wire-scale "")         (command "'setvar" "osmode" 0)         (command pause)      )   ))(defun ossxx()(setvar "OSMODE" 0)(prin1))(defun C:CT(/ OLDS)(old-endint)(in-wi "CCT-F")(new-sn))(defun C:11()(command ".insert" "LEAD11" "nea" pause wire-scale ""))(defun C:12()(command ".insert" "LEAD12" "nea" pause wire-scale ""))(defun C:13()(command ".insert" "LEAD13" "nea" pause wire-scale ""))(defun C:14()(command ".insert" "LEAD14" "nea" pause wire-scale ""))(defun C:21()(command ".insert" "LEAD21" "nea" pause wire-scale ""))(defun C:22()(command ".insert" "LEAD22" "nea" pause wire-scale ""))(defun C:23()(command ".insert" "LEAD23" "nea" pause wire-scale ""))(defun C:24()(command ".insert" "LEAD24" "nea" pause wire-scale ""))(defun in-wi2(a)  (if (or (= line-work "Other") (= line-work nil))      (progn          (prompt "\n Wiring-Work at [Tel,Tv,Fir,Spk..] => C:LWW")          (in-wi a)      )     (progn          (prompt "\n Wiring-Work at [Light,Recep] => C:LWW")          (setvar "OSMODE" 2)          (in-wi a)      )   ))(setq line-work nil)(defun c:lww()(line-ww jlww))(defun line-ww(jlww / a)	(if jlww		(if (= jlww 1)			(setq line-work "Light")			(setq line-work "Other")		)		(progn			(prompt "\n Enter Line's Wiring-Work Style? : Light(MIDp)/Other(NEAp) <")			(prin1 line-work)			(initget "Light Other")			(setq a (getkword "> ? :"))			(cond 				((= a "Light")(setq line-work "Light"))				((= a "Other")(setq line-work "Other"))				(T (prompt "\n Not Changed"))			)		)	)	(setq jlww nil))(defun C:W1(/ OLDS)(old-nea)(in-wi2 "WIRE-1")(new-sn))(defun C:W2(/ OLDS)(old-nea)(in-wi2 "WIRE-2")(new-sn))(defun C:W3(/ OLDS)(old-nea)(in-wi2 "WIRE-3")(new-sn))(defun C:W4(/ OLDS)(old-nea)(in-wi2 "WIRE-4")(new-sn))(defun C:W5(/ OLDS)(old-nea)(in-wi2 "WIRE-5")(new-sn))(defun C:W6(/ OLDS)(old-nea)(in-wi2 "WIRE-6")(new-sn))(defun C:W7(/ OLDS)(old-nea)(in-wi2 "WIRE-7")(new-sn))(defun C:W8(/ OLDS)(old-nea)(in-wi2 "WIRE-8")(new-sn))(defun C:W9(/ OLDS)(old-nea)(in-wi2 "WIRE-9")(new-sn))(defun C:W10(/ OLDS)(old-nea)(in-wi2 "WIRE-10")(new-sn))(defun C:WH1(/ OLDS)(old-nea)(in-wi2 "wire-h1")(new-sn))(defun C:WH2(/ OLDS)(old-nea)(in-wi2 "wire-h2")(new-sn))(defun C:WH3(/ OLDS)(old-nea)(in-wi2 "wire-h3")(new-sn))(defun C:WH4(/ OLDS)(old-nea)(in-wi2 "wire-h4")(new-sn))(defun C:WH5(/ OLDS)(old-nea)(in-wi2 "wire-h5")(new-sn))(defun C:WH6(/ OLDS)(old-nea)(in-wi2 "wire-h6")(new-sn))(defun C:WH7(/ OLDS)(old-nea)(in-wi2 "wire-h7")(new-sn))(defun C:WH8(/ OLDS)(old-nea)(in-wi2 "wire-h8")(new-sn))(defun C:WR2(/ OLDS)(old-nea)(in-wi2 "WIRE-r2")(new-sn))(defun C:WR3(/ OLDS)(old-nea)(in-wi2 "WIRE-r3")(new-sn))(defun C:WR4(/ OLDS)(old-nea)(in-wi2 "WIRE-r4")(new-sn))(defun C:WR5(/ OLDS)(old-nea)(in-wi2 "WIRE-r5")(new-sn))(defun C:WR6(/ OLDS)(old-nea)(in-wi2 "WIRE-r6")(new-sn))(defun C:WR7(/ OLDS)(old-nea)(in-wi2 "WIRE-r7")(new-sn))(defun C:WR8(/ OLDS)(old-nea)(in-wi2 "WIRE-r8")(new-sn))(defun C:ENDS(/ OLDS)(old-end)(in-wi "END")(new-sn))(defun C:ENDD(/ OLDS)(old-int)(in-wi "ENDD")(new-sn))(defun C:CL1(/ OLDS)(old-NON)(in-wi "CL1")(new-sn))(defun C:CR1(/ OLDS)(old-NON)(in-wi "CR1")(new-sn))(defun C:CE1(/ OLDS)(old-NON)(in-wi "CE1")(new-sn))(defun in-dw(a)   (if (or (= dwg-scale 0)(= dwg-scale 0.0))      (prompt "\n [dwg-scale] is Nothing ...               \n First Running command [DWGS] ")      (progn         (prompt "\n Now Drawing-Scale is [")         (prin1 dwg-scale)         (prompt"] If You Change Scale to Run --> [DWGS]")         (prompt "\n Pick the Insert Point for [")         (prin1 a)         (prompt "] (int) : ")         (command ".insert" a pause dwg-scale "" "" )      )   ))(defun in-dw2(a)   (if (or (= wire-scale 0.0)(= wire-sacle 0))      (prompt "\n [wire-scale] is Nothing ...               \n First Running command [DWGS]")      (progn         (prompt "\n Now Wire-Scale is [")         (prin1 wire-scale)         (prompt"] If You Change Scale to Run --> [DWGS]")         (prompt "\n Pick the Insert Point for [")         (prin1 a)         (prompt "] (int) : ")         (command ".insert" a pause wire-scale "" "")      )   ))(defun C:LQ()(old-end)(in-dw "LQT")(new-sn))(defun C:AB()(old-mid)(in-dw "ABC")(new-sn))(defun C:LQQ()(old-end)(in-dw2 "LQT")(new-sn))(defun C:ABB()(old-mid)(in-dw2 "ABC")(new-sn))(defun C:LOAD(/ lla olds)   (setq olderr  *error* *error* myerror chm 0)   (if (= ln nil)(setq ln "ACAD"))   (prompt (strcat"\n\n\t Enter the LISP name ? <"ln"> : ="))   (setq lla(strcase(getstring)))   (if (= lla "")(load ln)(progn (load lla)(setq ln lla)))(PRIN1))(defun C:HA1(/ entty list1 list2)   (command "undo" "group")   (old-non)   (setq hh2 nil)   (setq entty (entsel "\nSelect object <Line=TRAY> / (Enter is ?) : "))   (if entty (setq ha-entty entty))   (if entty      (setq list1 (cdr (assoc 0 (setq list2 (entget (car entty))))))      (setq list2 "WIRE")   )   (cond ((= list1 "LINE") (arr-hanger list2))         ((= list2 "WIRE") (blk-list "WIRE"))         (T (progn (prompt "\n Select is Not \"LINE\" --> ")(prin1 list1))))   (prin1)(new-sn)   (command "undo" "end"))(defun C:HA2(/ entty list1 list2 hh2 kkk)	(if ha-entty		(progn			(command "u")			(command "undo" "group")			(old-non)			(setq hh2 1)			(setq entty ha-entty)			(setq ha-entty nil)			(setq list1 (cdr (assoc 0 (setq list2 (entget (car entty))))))			(arr-hanger2 list2)			(prin1)(new-sn)			(command "undo" "end")		)      (progn			(C:HA1)			(setq ha-entty nil)		)	))(defun arr-hanger (_d / xx ang dist1 k2 k3 k2a k3a p1 p2 p3 _arr -arr)   (setq xx(li_find 10 _d))(setq yy(li_find 11 _d))   (setq ang (angle xx yy))   (setq dist1 (distance xx yy))   (if (= hpost-d nil)(setq hpost-d 1500))   (prompt "\n Enter Hanger-Post Distance ? <")(prin1 hpost-d)   (setq k2a (getreal "> : "))   (if (or (= k2a nil)(= k2a ""))(setq k2 hpost-d)(setq k2 k2a))   (if (= hpost-n nil)(setq hpost-n "H60"))   (prompt "\n Enter Hanger-Post Name ? <")(prin1 hpost-n)   (setq k3a (getstring "> : "))   (if (or (= k3a nil)(= k3a ""))(setq k3 hpost-n)(setq k3 k3a))   (setq _arr (setq -arr (fix (/ dist1 k2) )))   (if (= 2 (gcd 2 _arr))      (setq p1 (polar xx ang (/ (- dist1 (* k2 _arr)) 2)))      (setq p1 (polar xx ang (/ (- dist1 (* k2 _arr)) 2)))   )   (if hh2      (command ".insert" k3 p1 "" "" (+ (rtd ang) 180))      (command ".insert" k3 p1 "" "" (rtd ang))   )   (setq p3 (polar p1 ang k2))   (repeat -arr      (command "copy" "L" "" p1 p3)      (setq p1 p3)      (setq p3 (polar p1 ang k2))   )   (if (= hh2 nil)      (progn (prompt "\n Do You Rotation -->  command:HA2 ")      )   )   (setq hpost-d k2 hpost-n k3))(defun arr-hanger2 (_d / xx ang dist1 k2 k3 k2a k3a p1 p2 p3 _arr -arr)  (setq xx(li_find 10 _d))(setq yy(li_find 11 _d))  (setq ang (angle xx yy))  (setq dist1 (distance xx yy))  (setq k2 hpost-d)  (setq k3 hpost-n)  (setq _arr (setq -arr (fix (/ dist1 k2) )))  (if (= 2 (gcd 2 _arr))    (setq p1 (polar xx ang (/ (- dist1 (* k2 _arr)) 2)))    (setq p1 (polar xx ang (/ (- dist1 (* k2 _arr)) 2)))  )  (command ".insert" k3 p1 "" "" (+ (rtd ang) 180))  (setq p3 (polar p1 ang k2))  (repeat -arr    (command "copy" "L" "" p1 p3)    (setq p1 p3)    (setq p3 (polar p1 ang k2))  )  (setq hpost-d k2 hpost-n k3))(defun os-int()(setvar "OSMODE" 32))(defun os-non()(setvar "OSMODE" 0))(setq bk1 200)(defun C:BR()   (setq olderr  *error* *error* myerror chm 0)   (old-int)(setvar "CMDECHO" 0)   (if (= b_mode nil)(setq b_mode "Horigental"))   (if (or (= bk1 nil)(= bk1 0.00))      (progn         (prompt " Break Width is none [ 0.00 ] Press \"W\" or \"w\"")         (SETQ BK1 0)      )      (progn         (prompt "\t Break harf WIDTH is = ")         (prin1 bk1)      )   )   (setq temp T)   (while temp      (initget "Width Horigental Vertical")      (prompt "\n\t Width/Horigental/Vertical/<")(prin1 b_mode)(prompt ">: ")      (setq b_word (getkword))      (cond         ((= b_word "Width")(bkw))         ((= b_word "Horigental")(bah 1))         ((= b_word "Vertical")(bah 0))         ((null b_word)(b_pre))      )   )   (new-sn))(defun b_pre()   (if (= b_mode "Width")(bkw))   (if (= b_mode "Horigental")(bah 1))   (if (= b_mode "Vertical")(bah 0)))(defun bah(_s / p1 p2 p3 e1 o1 nl n i e2 ed t0)   (setq s-a 1)(setq s-b 0)   (if (= _s 1)       (setq b_mode "Horigental")       (setq b_mode "Vertical")   )   (while (> s-a s-b)      (setq i 0)      (prompt "\t Enter TARGET of the Break's ")(prin1 b_mode)      (prompt "-harf width is (")(prin1 bk1)      (prompt ")- \n If you Change of Width at Typing the [DWGS] or [BKW]")      (setq e1(ssget))      (IF (/= e1 nil)         (progn            (prompt "\n Enter Break Point ?")(prin1 b_mode)            (setq P1(getpoint))            (if (= _s 1)               (progn                  (setq p2(list(+ (car p1) BK1)(cadr p1)))                  (setq p3(list(- (car p1) BK1)(cadr p1)))               )               (progn                  (setq p2(list(CAR P1)(+ (CADR P1) BK1)))                  (setq p3(list(CAR P1)(- (CADR P1) BK1)))               )            )            (setq nl(sslength e1))            (setq n(- nl 1))            (while (<= i n)               (setq ed(entget(setq e2(ssname e1 i))))               (setq t0(cdr (assoc 0 ed)))               (if (or (= "LINE" t0)(= "POLYLINE" t0)(= "LWPOLYLINE" t0))                  (progn                     (os-non)                     (command "break" e2 p2 p3)                     (os-int)                  )               )               (setq i(1+ i))            )         )         (setq s-b 2)      )   )   (setq Temp nil))(defun BKW(/ bsp bk2)   (if (= bk1 nil)(setq bk2 200)(setq bk2 bk1))   (prompt "\n\t Pleas Typing the Break harf spase <")   (prin1 bk2)(prompt "> : ")   (setq bsp(getreal))   (if (= bsp nil)(setq bk1 bk2)(setq bk1 bsp))   (setvar "userr2" bk1)   (setq b_mode "Horigental"))(setq bk1 (getvar "userr2"))(defun C:BKW()(old-int)(terpri)(bkw)(c:br)(NEW-SN))(defun C:BH()(old-int)(terpri)(bah 1)(NEW-SN))(defun C:BV()(old-int)(terpri)(bah 0)(NEW-SN))(defun C:BB()   (setq s-a 1)(setq s-b 0)   (while (> s-a s-b)      (setq i 0)      (prompt "\t Enter TARGET of the Break's ")(prin1 b_mode)      (prompt "-harf width is (")(prin1 bk1)      (prompt ")- \n If you Change of Width at Typing the [DWGS] or [BKW]")      (setq e1(ssget))      (IF (/= e1 nil)         (progn            (prompt "\n Enter Break Point ?")(prin1 b_mode)            (old-int)            (setq P1(getpoint))            (setq nl(sslength e1))            (setq n(- nl 1))            (while (<= i n)               (setq ed(entget(setq e2(ssname e1 i))))               (setq t0(cdr (assoc 0 ed)))               (if (= "LINE" t0)                  (progn                     (os-non)                     (setq pps(cdr (assoc 10 ed)))                     (setq ppe(cdr (assoc 11 ed)))                     (setq ang-bb (angle pps ppe))                     (setq p2(polar p1 ang-bb bk1))                     (setq p3(polar p1 (- ang-bb (dtr 180)) bk1))                     (command "break" e2 p2 p3)                     (os-int)                  )               )               (setq i(1+ i))            )            (new-sn)         )         (setq s-b 2)      )   )   (setq Temp nil))(defun C:BII()   (OLD-INT)   (setq aaaaa 1)   (setq bbbbb 0)   (while (> aaaaa bbbbb)     (setq i 0)     (prompt "\n Enter TARGET of the Break's (Select Object)-- \n")     (setq e1(ssget))        (IF (/= e1 nil)            (PROGN                (SETQ P1(GETPOINT "\n ENTER BREAK POINT ? (First Point) :"))                (setq nl(sslength e1))                (setq n(- nl 1))                (while (<= i n)                    (setq ed(entget(setq e2(ssname e1 i))))                    (setq t0(cdr (assoc 0 ed)))                    (if (or (= "LINE" t0)(= "POLYLINE" t0))                        (progn                            (os-non)                            (command "break" e2 P1 P1)                            (os-int)                        )                    )                    (setq i(1+ i))                )            )            (setq bbbbb 2)        )   )   (new-sn)   (setq Temp nil))(prin1)(defun ssx_fe (/ x data fltr ent)  (setq ent (car (entsel "\nSelect object/<None>: ")))  (if ent(progn(setq data (entget ent))  (foreach x '(0 2 6 7 8 39 62 66 90 210)   (if (assoc x data)(setq fltr (cons (assoc x data) fltr))))(reverse fltr))))(defun ssx_re (element alist)(append (reverse (cdr (member element (reverse alist))))(cdr (member element alist))))(defun ssx_er (s)          						  (if (/= s "Function cancelled")(princ (strcat "\nError: " s))) (if olderr (setq *error* olderr))    (princ))(defun ssx (/ olderr)  (gc)                   (setq olderr *error*	*error* ssx_er  )  (setq fltr (ssx_fe))  (ssx_gf fltr))(defun ssx_gf (f1 / t1 t2 t3 f1 f2)  (while	(progn	 (cond (f1 (prompt "\nFilter: ") (prin1 f1)))	 (initget	"Block Color Entity Flag LAyer LType Pick Style Thickness Vector")	 (setq t1 (getkword (strcat	"\n>>Block name/Color/Entity/Flag/"	"LAyer/LType/Pick/Style/Thickness/Vector: ")))	)	(setq t2	 (cond	((eq t1 "Block")      2)   ((eq t1 "Color")     62)	((eq t1 "Entity")     0)   ((eq t1 "LAyer")      8)	((eq t1 "LType")      6)   ((eq t1 "Style")      7)	((eq t1 "Thickness") 39)   ((eq t1 "Flag" )     66)	((eq t1 "Vector")   210)	(T t1)	 )	)	(setq t3	 (cond	((= t2    2)  (getstring "\n>>Block name to add/<RETURN to remove>: "))	((= t2 62)  (initget 4 "?")	  (cond		((or (eq (setq t3 (getint		 "\n>>Color number to add/?/<RETURN to remove>: ")) "?")		 (> t3 256))		 (ssx_pc)        		 nil		)		(T		 t3     		)	  ))	((= t2    0) (getstring "\n>>Entity type to add/<RETURN to remove>: "))	((= t2    8) (getstring "\n>>Layer name to add/<RETURN to remove>: "))	((= t2    6) (getstring "\n>>Linetype name to add/<RETURN to remove>: "))	((= t2    7)	  (getstring "\n>>Text style name to add/<RETURN to remove>: ")	)	((= t2 39)  (getreal   "\n>>Thickness to add/<RETURN to remove>: "))	((= t2 66)  (if (assoc 66 f1) nil 1))	((= t2 210)	  (getpoint  "\n>>Extrusion Vector to add/<RETURN to remove>: ")	)	(T   nil)	 )	)	(cond	 ((= t2 "Pick") (setq f1 (ssx_fe) t2 nil))   ((and f1 (assoc t2 f1))     (if (and t3 (/= t3 ""))  (setq f1 (subst (cons t2 t3) (assoc t2 f1) f1))  (setq f1 (ssx_re (assoc t2 f1) f1))))  ((and t3 (/= t3 ""))(setq f1 (cons (cons t2 t3) f1)))(T nil)))  (if f1 (setq f2 (ssget "x" f1)))(setq *error* olderr)  (if (and f1 f2)(progn	 (princ (strcat "\n" (itoa (sslength f2)) " found. ")) f2 )	 (progn (princ "\n0 found.") (prin1))))(defun ssx_pc ()(if textpage (textpage) (textscr))  (princ "\n                                                     ")  (princ "\n                 Color number   |   Standard meaning ")  (princ "\n                ________________|____________________")  (princ "\n                                |                    ")  (princ "\n                       0        |      <BYBLOCK>     ")  (princ "\n                       1        |      Red           ")  (princ "\n                       2        |      Yellow        ")  (princ "\n                       3        |      Green         ")  (princ "\n                       4        |      Cyan          ")  (princ "\n                       5        |      Blue          ")  (princ "\n                       6        |      Magenta       ")  (princ "\n                       7        |      White         ")  (princ "\n                    8...255     |      -Varies-      ")  (princ "\n                      256       |      <BYLAYER>     ")  (princ "\n                                               \n\n\n"))(defun c:CHS () (ssx)(princ)(command "change" "p" ""))(defun C:TRA () 	(if tra_data 		(command "trim" tra_data "")		(progn			(setq tra_data (ssx))			(command "trim" tra_data "")		)	)	(princ))(defun c:traa()(setq tra_data nil)(c:tra))(defun C:ESS () (ssx)(princ)(command "erase" "p" ))(defun c:sslt(/ xxx lt-ta lt-tt)	(setq lt-ta(strcase (getstring "\n Line Type ? :")))	(setq lt-tt(strcase (getstring "\n Line Type !!! :")))	(setq xxx(ssget "X" (list (cons 6 lt-ta))))	(if xxx (command "chprop" xxx "" "lt" lt-tt "")))(defun C:BLK(/kkk key)   (setq kkk 1)   (while (> kkk 0)      (initget "Erase Select CHange COunt ?")      (setq key         (getkword "\n\t Option was Select/Erase/COunt/CHange/? : <Count>"))      (cond         ((= key "Erase") (c:ebk))         ((= key "Select")(c:sbk))         ((= key "COunt") (c:ctt))         ((= key "CHange")(c:chbb))         ((= key "?")     (c:jinkey))         (T (c:ctt))      )   ))(defun b_sel(a)(ssget "X"(list (cons 0 "INSERT")(cons 2 a))))(defun b_set_run(a)   (cond      ((= a "DEL")(setq b_set " -DELETE- " b_comm "ERASE"))      ((= a "SEL")(setq b_set " -SELECT- " b_comm "SELECT"))      ((= a "COU")(setq b_set " -COUNT- "))      ((= a "CHB1")(setq b_set " -TARGET- "))      ((= a "CHB2")(setq b_set " -SERVICE- "))      (T (setq b_set " -COUNT- "))   )   (prompt (strcat "\n* Pick an object to be"b_set"block :"))   (setq blk1(car(entsel)))   (if (= blk1 nil)      (progn         (prompt (strcat "\n* Typing block name to be"b_set"block :"))         (setq bna(strcase(GETSTRING)))      )      (progn         (setq bna(cdr(assoc 2(entget blk1))))         (prompt (strcat "....Select Block Name is ["bna"] :"))      )   )   (prin1))(defun blk_comm(a)   (setvar"cmdecho"0)   (setq qtts 0)   (command b_comm a "")   (setq qtts(sslength a))   (setq a nil)   (prompt(strcat"\n""* Thank-you! Target ["bna"] block(s) to"B_SET" = "))   (prin1 qtts))(defun C:EBK(/ qtts bna blk1 ebl a)   (b_set_run "DEL")   (setq ebl (B_SEL BNA))   (BLK_COMM ebl)   (prin1))(defun C:SBK(/ qtts bna blk1 ebl a)   (b_set_run "SEL")   (setq ebl (B_SEL BNA))   (BLK_COMM ebl)   (prin1))(defun C:CTT(/ qtts bna blk1 ebl a i nl n ctts bna0 bna1 ed e2)   (setq ctts 0 i 0)   (b_set_run "COU")   (prompt "\n Select Object the Count...!! ")   (setq ebl(ssget (list (cons 2 bna))))   (prompt "\n\t Wating please Counting.....")   (setq nl(sslength ebl))   (setq n(- nl 1))   (while (<= i n)      (setq ed(entget (setq e2(ssname ebl i))))      (setq bna0(cdr (assoc 0 ed)))      (if (= "INSERT" bna0)         (progn            (setq bna1(cdr (assoc 2 ed)))               (if (= (strcase bna) (strcase bna1))                  (setq ctts (+ ctts 1))               )            )      )      (setq i(1+ i))   )   (setq cccc (strcat"["bna"] block's count = " (rtos ctts 2 0)))   (grtext -1 cccc)   (prompt(strcat"\n* Thank-you! Target ["bna"] block(s) to"B_SET" = "))   (prin1 ctts)   (prin1));               \n First Running command [W-SC] ")(defun c:ct1 (/ po1 po2 angs1)   (old-qua)   (if (or (= wire-scale 0.0)(= wire-sacle 0))      (prompt "\n [wire-scale] is Nothing ...               \n First Running command [W-SC] ")      (progn         (setq po1 (getpoint "\n At Circuit Start Point ? <QUA> :"))         (setvar "OSMODE" 0)         (setq po2 (getpoint po1 "\n At Circuit End Point ? <none> :"))         (setq angs1 (angle po2 po1))         (command "line" po1 po2 "")         (command "INSERT" "CCT-F" po2 wire-scale "" (rtd angs1))      )   )   (new-sn))(defun c:ct2 (/ po1 po2 po3 angs1 a b)   (old-qua)   (if (or (= wire-scale 0.0)(= wire-sacle 0))      (prompt "\n [wire-scale] is Nothing ...               \n First Running command [W-SC] ")      (progn         (setq po1 (getpoint "\n At Circuit Start Point ? <QUA> :"))         (setvar "OSMODE" 0)         (setq po2 (getpoint po1 "\n At Circuit Second Point ? <none> :"))         (setq po3 (getpoint po2 "\n At Circuit Last Point ? <none> :"))         (setq angs1 (angle po3 po2))         (command "line" po1 po2 "")         (setq a (entlast))         (command "line" po2 po3 "")         (setq b (entlast))         (command "INSERT" "CCT-F" po3 wire-scale "" (rtd angs1))         (command "FILLET" a b)      )   )   (new-sn))(defun c:ct3(/ ango ortho po1 po2 po3 po4 pt4 pt5 dist1 dist2)   (old-qua)   (if (or (= wire-scale 0.0)(= wire-sacle 0))      (prompt "\n [wire-scale] is Nothing ...               \n First Running command [W-SC] ")      (progn         (setq ango(getvar "SNAPANG"))         (setq ortho(getvar "ORTHOMODE"))         (setq po1 (getpoint "\n At Circuit Start Point ? <QUA> :"))         (setvar "OSMODE" 0)         (setq po2 (getpoint po1 "\n At Circuit End Point ? <none> :"))         (setq angs1 (angle po1 po2))         (setq dist1 (distance po1 po2))         (setq dist2 (/ dist1 2))         (setvar "SNAPANG" angs1)         (setvar "ORTHOMODE" 1)         (setq po3 (polar po1 angs1 dist2))         (setq po4 (getpoint po3 "\n At Circuit Center Point ? :"))         (setq angs2 (angle po3 po4))         (setq pt4 (polar po4 angs1 dist2))         (setq pt5 (polar pt4 (+ (dtr 180) angs1) dist1))         (command "pline" po1 "w" 0 0 pt5 "a" pt4 "l" po2 "")         (command "explode" "l")         (command "INSERT" "CCT-F" po2 wire-scale "" (rtd angs2))                                    (setvar "SNAPANG" ango)         (setvar "ORTHOMODE" ortho)      )   )   (new-sn)   (prin1))(defun dtr (a) (* pi (/ a 180.0)))(defun rtd (a) (/ (* a 180.0) pi))(defun new-sn () (setvar "osmode" olds)(setq olds nil)(prin1))(defun old-nea () (setq olderr *error* *error* wierror chm 0)  (setq snap-ang (getvar "snapang"))(setq olds (getvar "osmode"))  (setvar "osmode" 512))(defun old-mid () (setq olds (getvar "osmode"))(setvar "osmode" 2))(defun old-non () (setq olds (getvar "osmode"))(setvar "osmode" 0))(defun wierror (s)  (if (/= s "function cancelled") (princ (strcat "\nerror: " s)))  (setvar "osmode" olds)  (setq *error* olderr)  (princ))(setq key-n (getvar "USERR5"))(if (or (= key-n 0.0)(= key-n nil))(setq key-n (getvar "LTSCALE")))(defun sel00()  (cond    ((= bl_in "LINE-TV")(setq wd_in (* key-n 2.3)))    ((= bl_in "LINE-EX")(setq wd_in (* key-n 2.3)))    ((= bl_in "LINE-ES")(setq wd_in (* key-n 2.3)))    ((= bl_in "LINE-DC")(setq wd_in (* key-n 2.3)))    ((= bl_in "LINE-OA")(setq wd_in (* key-n 2.3)))    (T                  (setq wd_in (* key-n 1.5)))  ))(defun sel45()  (cond    ((< 75 bbb 115)     (setq wd_in (* key-n 2.15)))    ((= bl_in "LINE-DC")(setq wd_in (* key-n 2.4)))    ((= bl_in "LINE-TV")(setq wd_in (* key-n 2.4)))    ((= bl_in "LINE-EX")(setq wd_in (* key-n 2.4)))    ((= bl_in "LINE-ES")(setq wd_in (* key-n 2.4)))    ((= bl_in "LINE-OA")(setq wd_in (* key-n 2.4)))    (T                  (setq wd_in (* key-n 2)))  ))(defun wire_in (bl_in / p1 p2 p3 p4 p5 ang_l1 sel_l1 dis_l1 aaa bbb wd_in os-inp)  (if (= line-work "Light")(setq os-inp "mid")(setq os-inp "nea"))  (setq olderr *error* *error* wierror chm 0)  (prompt "\n Change Break-Width as Typing -> [DWGS] ")  (prompt "\n where block [")(prin1 bl_in)(prompt "] insert point ? :")  (prompt "..")(prin1 os-inp)(prompt "..")  (setq sel_line(entsel))  (setq sel_l1(entget (car sel_line)))  (if (= (cdr (assoc 0 sel_l1)) "LINE")    (progn      (old-non)      (setq p1(cdr (assoc 10 sel_l1)))      (setq p2(cdr (assoc 11 sel_l1)))      (setq dis_l1(distance p1 p2))      (setq ang_l1 (angle p1 p2))      (setq aaa (fix (/ (rtd ang_l1) 180)))      (setq bbb (- (rtd ang_l1) (* aaa 180)))      (if (< 30 bbb 160) (sel45) (sel00))      (if (= os-inp "mid")		(setq p3 (osnap (cadr sel_line) "mid"))		(setq p3 (osnap (cadr sel_line) "nea"))	  )      (setq p4 (polar p3 ang_l1 wd_in))      (setq p5 (polar p3 (- ang_l1 (dtr 180)) wd_in))      (command "Break" sel_line "F" p4 p5 "insert" bl_in p3 wire-scale """")      (new-sn)    )    (if (or (= (cdr (assoc 0 sel_l1)) "LWPOLYLINE") (= (cdr (assoc 0 sel_l1)) "POLYLINE"))      (progn        (old-non)        (if sel_ang (setq key-xx sel_ang)(setq sel_ang "Horigental"))        (setq key-xx sel_ang)        (initget "Horigental Vertical  ")        (prompt "\n Enter Horigental/Vertical <")(prin1 key-xx)        (setq key-xx(getkword "> ? :"))        (if (or (= key-xx nil)(= key-xx ""))          (setq key-xx sel_ang)          (setq sel_ang key-xx)        )        (if (= sel_ang "Horigental")          (progn (setq bbb 0)(setq ang_l1 (dtr 0))))        (if (= sel_ang "Vertical")          (progn (setq bbb 90)(setq ang_l1 (dtr 90))))        (if (< 30 bbb 160) (sel45) (sel00))        (if (= os-inp "mid")			(setq p3 (osnap (cadr sel_line) "mid"))     		(setq p3 (osnap (cadr sel_line) "nea"))		)        (setq p4 (polar p3 ang_l1 wd_in))        (setq p5 (polar p3 (- ang_l1 (dtr 180)) wd_in))        (command "Break" sel_line "F" p4 p5 "insert" bl_in p3 wire-scale """")        (new-sn)      )      (prompt "\n Select is Not \"LINE\" or \"PLINE\" Tri-Again.....")    )  ))(defun C:LLE() (wire_in "LINE-E"))(defun C:LLEX()(wire_in "LINE-EX"))(defun C:LLES()(wire_in "LINE-ES"))(defun C:LLT() (wire_in "LINE-T"))(defun C:LLTV()(wire_in "LINE-TV"))(defun C:LLS() (wire_in "LINE-S"))(defun C:LLF() (wire_in "LINE-F"))(defun C:LLOA()(wire_in "LINE-OA"))(defun C:LLDC()(wire_in "LINE-DC"))(defun C:LLU() (wire_in "LINE-U"))(defun C:LLG() (wire_in_g "*LINE-G"))(defun C:1() (wire_in "LINE-E"))(defun C:3() (wire_in "LINE-T"))(defun C:4() (wire_in "LINE-TV"))(defun C:5() (wire_in "LINE-OA"))(defun C:6() (wire_in "LINE-U"))(defun C:7() (wire_in "LINE-S"))(defun C:8() (wire_in "LINE-F"))(defun C:9() (wire_in "LINE-EX"))(defun C:10()(wire_in "LINE-ES"))(defun wire_in_g (bl_in / p1 p2 p3 p4 p5 ang_l1 sel_l1 dis_l1 aaa bbb wd_in)  (setq olderr *error* *error* wierror chm 0)  (prompt "\n Change Break-Width as Typing -> [DWGS] ")  (prompt "\n where block [")(prin1 bl_in)(prompt "] insert point ? :")  (setq sel_line(entsel))  (setq sel_l1(entget (car sel_line)))  (if (= (cdr (assoc 0 sel_l1)) "LINE")    (progn      (old-non)      (setq p1(cdr (assoc 10 sel_l1)))      (setq p2(cdr (assoc 11 sel_l1)))      (setq dis_l1(distance p1 p2))      (setq ang_l1 (angle p1 p2))      (setq aaa (fix (/ (rtd ang_l1) 180)))      (setq bbb (- (rtd ang_l1) (* aaa 180)))      (sel00)      (setq p3 (osnap (cadr sel_line) "nea"))      (setq p4 (polar p3 ang_l1 (* wd_in 2)))      (setq p5 (polar p3 (- ang_l1 (dtr 180)) (* wd_in 2)))      (command "Break" sel_line "F" p4 p5 "insert" bl_in p3 (* wire-scale 2) """")      (new-sn)    )    (if (= (cdr (assoc 0 sel_l1)) "POLYLINE")      (progn        (old-non)        (if sel_ang (setq key-xx sel_ang)(setq sel_ang "Horigental"))        (setq key-xx sel_ang)        (initget "Horigental Vertical  ")        (prompt "\n Enter Horigental/Vertical <")(prin1 key-xx)        (setq key-xx(getkword "> ? :"))        (if (or (= key-xx nil)(= key-xx ""))          (setq key-xx sel_ang)          (setq sel_ang key-xx)        )        (if (= sel_ang "Horigental")          (progn (setq bbb 0)(setq ang_l1 (dtr 0))))        (if (= sel_ang "Vertical")          (progn (setq bbb 90)(setq ang_l1 (dtr 90))))        (if (< 30 bbb 160) (sel45) (sel00))        (setq p3 (osnap (cadr sel_line) "nea"))        (setq p4 (polar p3 ang_l1 (* wd_in 2)))        (setq p5 (polar p3 (- ang_l1 (dtr 180)) (* wd_in 2)))        (command "Break" sel_line "F" p4 p5 "insert" bl_in p3 (* wire-scale 2) """")        (new-sn)      )      (prompt "\n Select is Not \"LINE\" or \"PLINE\" Tri-Again.....")    )  ))(defun c:g-l (/ olderr p1 p2 p3)  (old-nea)  (setq olderr *error* *error* wierror chm 0)  (setq p1 (getpoint "\n where block \" e3 \" insert point ? (hor) :"))  (pp-selh1 p1 br-wdh3)  (command "break" p1 "f" p2 p3 "insert" "*LINE-G" p1 (* (GETVAR "LTSCALE") 0.02) "")  (new-sn))(defun c:g-l2 (/ olderr p1 p2 p3)  (old-nea)  (setq olderr *error* *error* wierror chm 0)  (setq p1 (getpoint "\n where block \" e3 \" insert point ? (ver) :"))  (pp-selv1 p1 br-wdv3)  (command "break" p1 "f" p2 p3 "insert" "*LINE-G" p1 (* (GETVAR "LTSCALE") 0.02) "")  (new-sn))(defun br-harf ()  (setq br-wdh1 (* (getvar "ltscale") 1.5))  (setq br-wdv1 (* (getvar "ltscale") 2.0))  (setq br-wdh2 (* (getvar "ltscale") 2.3))  (setq br-wdh3 (* (getvar "ltscale") 3.2))  (setq br-wdv3 (* (getvar "ltscale") 2.3)))(if (or (= br-wdh1 nil)(= br-wdh1 0.0))(br-harf))(defun pp-selh1 (a b)  (setvar "osmode" 0)  (setq p2 (list (+ (car a) b) (cadr a)))  (setq p3 (list (- (car a) b) (cadr a))))(defun pp-selhx (a b)  (setvar "osmode" 0)  (setq p2x (polar a snap-ang b))  (setq p3x (polar a (- snap-ang (dtr 180)) b)))(defun pp-selv1 (a b)  (setvar "osmode" 0)  (setq p2 (list (car a) (+ (cadr a) b)))  (setq p3 (list (car a) (- (cadr a) b))))(defun wx-in (w-x _s / olderr p1 p2 p3 w-x)   (old-nea) (setq olderr *error* *error* wierror chm 0)   (prompt "\n Change Break-Width as Typing -> [DWGS] ")   (prompt "\n where block \"")(prin1 w-x)(prompt "\" insert point ? :")   (setq p1 (getpoint))   (cond      ((= _s "X")(pp-selh1 p1 br-wdh1))      ((= _s "X2")(pp-selh1 p1 br-wdh2))      ((= _s "Y")(pp-selv1 p1 br-wdv1))      (t nil)   )  (command "break" p1 "f" p2 p3 "insert" w-x p1 wire-scale "" 0)  (new-sn))(defun c:e-l ()(wx-in "LINE-E" "X"))(defun c:e-l2()(wx-in "LINE-E" "Y"))(defun c:f-l ()(wx-in "LINE-F" "X"))(defun c:f-l2()(wx-in "LINE-F" "Y"))(defun c:s-l ()(wx-in "LINE-S" "X"))(defun c:s-l2()(wx-in "LINE-S" "Y"))(defun c:t-l ()(wx-in "LINE-T" "X"))(defun c:t-l2()(wx-in "LINE-T" "Y"))(defun c:tv-l ()(wx-in "LINE-TV" "X2"))(defun c:tv-l2()(wx-in "LINE-TV" "Y" ))(defun c:ex-l ()(wx-in "LINE-EX" "X2"))(defun c:ex-l2()(wx-in "LINE-EX" "Y" ))(defun c:es-l ()(wx-in "LINE-ES" "X2"))(defun c:es-l2()(wx-in "LINE-ES" "Y" ))(defun c:dc-l ()(wx-in "LINE-DC" "X2"))(defun c:dc-l2()(wx-in "LINE-DC" "Y" ))(defun c:oa-l ()(wx-in "LINE-OA" "X2"))(defun c:oa-l2()(wx-in "LINE-OA" "Y" ))(defun c:u-l ()(wx-in "LINE-U" "X"))(defun c:u-l2()(wx-in "LINE-U" "Y"))(defun cp-ch1011(a1)  (setq n (sslength a1))  (setq index 0)  (repeat n    (setq b1 (entget (ssname a1 index)))    (setq c1 (assoc 10 b1))    (setq c2 (list 10 (car (cdr c1)) (car (cdr (cdr c1))) 0))    (setq c3 (subst c2 c1 b1))    (entmod c3)     (setq c1 (assoc 11 b1))    (setq c2 (list 11 (car (cdr c1)) (car (cdr (cdr c1))) 0))    (setq c3 (subst c2 c1 b1))    (entmod c3)     (setq index (+ index 1))  ))(defun cp-chdim(a1)  (setq n (sslength a1))  (setq index 0)  (repeat n    (setq b1 (entget (ssname a1 index)))    (setq c1 (assoc 10 b1))    (setq c2 (list 10 (car (cdr c1)) (car (cdr (cdr c1))) 0))    (setq c3 (subst c2 c1 b1))    (entmod c3)     (setq c1 (assoc 11 b1))    (setq c2 (list 11 (car (cdr c1)) (car (cdr (cdr c1))) 0))    (setq c3 (subst c2 c1 b1))    (entmod c3)     (setq c1 (assoc 12 b1))    (setq c2 (list 12 (car (cdr c1)) (car (cdr (cdr c1))) 0))    (setq c3 (subst c2 c1 b1))    (entmod c3)     (setq c1 (assoc 13 b1))    (setq c2 (list 13 (car (cdr c1)) (car (cdr (cdr c1))) 0))    (setq c3 (subst c2 c1 b1))    (entmod c3)     (setq c1 (assoc 14 b1))    (setq c2 (list 14 (car (cdr c1)) (car (cdr (cdr c1))) 0))    (setq c3 (subst c2 c1 b1))    (entmod c3)     (setq c1 (assoc 15 b1))    (setq c2 (list 15 (car (cdr c1)) (car (cdr (cdr c1))) 0))    (setq c3 (subst c2 c1 b1))    (entmod c3)     (setq c1 (assoc 16 b1))    (setq c2 (list 16 (car (cdr c1)) (car (cdr (cdr c1))) 0))    (setq c3 (subst c2 c1 b1))    (entmod c3)     (setq index (+ index 1))  ))(defun cp-chxx(a1 xx)  (setq n (sslength a1))  (setq index 0)  (repeat n    (setq b1 (entget (ssname a1 index)))    (setq c1 (assoc xx b1))    (setq c2 (list xx (car (cdr c1)) (car (cdr (cdr c1))) 0))    (setq c3 (subst c2 c1 b1))    (entmod c3)     (setq index (+ index 1))  ))(defun cp-ch10(a1)  (setq n (sslength a1))  (setq index 0)  (repeat n    (setq b1 (entget (ssname a1 index)))    (setq c1 (assoc 10 b1))    (setq c2 (list 10 (car (cdr c1)) (car (cdr (cdr c1))) 0))    (setq c3 (subst c2 c1 b1))    (entmod c3)     (setq index (+ index 1))  ))(defun cp-ch11(a1)  (setq n (sslength a1))  (setq index 0)  (repeat n    (setq b1 (entget (ssname a1 index)))    (setq c1 (assoc 11 b1))    (setq c2 (list 11 (car (cdr c1)) (car (cdr (cdr c1))) 0))    (setq c3 (subst c2 c1 b1))    (entmod c3)     (setq index (+ index 1))  ))(defun cp-block ()  (graphscr)   (setq i 0)  (setq a1 (ssget "x" (list (cons 0 "INSERT"))))  (if a1 (cp-ch10 a1)))(defun cp-pline ()  (graphscr)   (setq i 0)  (setq a1 (ssget "x" (list (cons 0 "POLYLINE"))))  (if a1 (cp-ch10 a1)))(defun cp-solid ()  (graphscr)   (setq i 0)  (setq a1 (ssget "x" (list (cons 0 "SOLID"))))  (if a1 (cp-chxx a1 10))  (setq a1 nil)  (setq a1 (ssget "x" (list (cons 0 "SOLID"))))  (if a1 (cp-chxx a1 11))  (setq a1 nil)  (setq a1 (ssget "x" (list (cons 0 "SOLID"))))  (if a1 (cp-chxx a1 12))  (setq a1 nil)  (setq a1 (ssget "x" (list (cons 0 "SOLID"))))  (if a1 (cp-chxx a1 13)))(defun cp-arc ()  (graphscr)   (setq a1 (ssget "x" (list (cons 0 "ARC"))))  (if a1 (cp-ch10 a1)))(defun cp-circle ()  (graphscr)   (setq a1 (ssget "x" (list (cons 0 "CIRCLE"))))  (if a1 (cp-ch10 a1))) (defun cp-text ()  (graphscr)   (setq a1 (ssget "x" (list (cons 0 "TEXT"))))  (if a1 (cp-ch11 a1))  (setq a1 nil)  (setq a1 (ssget "x" (list (cons 0 "ATTDEF"))))  (if a1 (cp-ch1011 a1))) (defun cp-dimm ()  (graphscr)   (setq a1 (ssget "x" (list (cons 0 "DIMENSION"))))  (if a1 (cp-chxx a1 10))  (setq a1 nil)  (setq a1 (ssget "x" (list (cons 0 "DIMENSION"))))  (if a1 (cp-chxx a1 11))  (setq a1 nil)  (setq a1 (ssget "x" (list (cons 0 "DIMENSION"))))  (if a1 (cp-chxx a1 12))  (setq a1 nil)  (setq a1 (ssget "x" (list (cons 0 "DIMENSION"))))  (if a1 (cp-chxx a1 13))  (setq a1 nil)  (setq a1 (ssget "x" (list (cons 0 "DIMENSION"))))  (if a1 (cp-chxx a1 14))  (setq a1 nil)  (setq a1 (ssget "x" (list (cons 0 "DIMENSION"))))  (if a1 (cp-chxx a1 15))  (setq a1 nil)  (setq a1 (ssget "x" (list (cons 0 "DIMENSION"))))  (if a1 (cp-chxx a1 16)))  (defun cp-line()    (setq a1 (ssget "x" (list (cons 0 "LINE"))))  (if a1 (cp-ch10 a1))  (setq a1 nil)  (setq a1 (ssget "x" (list (cons 0 "LINE"))))  (if a1 (cp-ch11 a1)))(defun cp-all()        (cp-line)(cp-block)(cp-arc)(cp-circle)(cp-text)        (cp-pline)(cp-solid))(defun c:chpp()  (prompt "\n\t Change at \"Z\" Point to --> \"0\" ")  (initget 1 "Line Block Arc Circle Text All Pline Solid Dim")  (setq key_chpp (getkword "\n Select Changing Object ?                            \n Line/Pline/Solid/Block/Arc/Dim/Circle/Text/All: ? "))  (cond ((= key_chpp "Line")  (cp-line))        ((= key_chpp "Block") (cp-block))        ((= key_chpp "Arc")   (cp-arc))        ((= key_chpp "Circle")(cp-circle))        ((= key_chpp "Text")  (cp-text))        ((= key_chpp "Pline") (cp-pline))        ((= key_chpp "Solid") (cp-solid))        ((= key_chpp "Dim")   (cp-dimm))        ((= key_chpp "All")   (cp-all))        (T (prompt "\n Select is Fail "))  ))(defun c:pipe-con(/ p1)   (old-end)   (LA-SET "100" 4)   (setq p1 (getpoint "\n Pick Pipe-end Point (end) :"))   (command "insert" "end" p1 wire-scale """")   (command "circle" p1 (* dwg-scale 300))   (command "chprop" "l" "" "lt" "elp" "")   (LA-BACK)   (new-sn))(defun c:tray-con(/ p1 p2 p3 p4 p5 ang1 dist1)   (old-end)   (LA-SET "100" 4)   (setq p1 (getpoint "\n Pick Tray's First End Point (end) : "))   (setq p2 (getpoint p1 "\n Pick Tray's Second End Point (end) : "))   (setq ang1 (angle p1 p2))   (setq dist1 (distance p1 p2))   (setq p3 (polar p1 ang1 (/ dist1 2)))   (setq p4 (polar p3 (+ ang1 (dtr 90)) (/ dist1 3)))   (setq p5 (polar p3 (+ ang1 (dtr 180)) (* (distance p3 p4) 2.5) ))   (setvar "OSMODE" 0)   (command "line" p1 p2 "")   (command "scale" "l" "" p3 1.5)   (command "insert" "end" p3 wire-scale "" (+ (rtd ang1) 90))   (command "ellipse" "c" p3 p4 p5)   (command "chprop" "l" "" "lt" "elp" "")   (LA-BACK)   (new-sn)   (JPLUD))(defun jplud(/ plud_ss pline_info old new)   (setq plud_ss (entlast))   (setq pline_info (entget plud_ss))   (setq old (assoc '70 pline_info))   (setq new (cons 70 (logior (cdr old) 128)))   (entmod (subst new old pline_info))   (prin1))(defun plud_err (s)   (if (/= s "Function cancelled")(princ (strcat "\nError: " s)))   (setq *error* old_err)   (princ))(defun c:plud(/ a method plud_ss pline_info old new)  (setq old_err *error* *error* plud_err)  (setq a 0)  (setq plud_ss      (ssget         (list            (cons 0 "POLYLINE")(cons -4 "<NOT")(cons -4 "&")            (cons 70 248)(cons -4 "NOT>")         )      )  )  (while (< a (sslength plud_ss))      (setq pline_info (entget (ssname plud_ss a)))      (setq old (assoc '70 pline_info))      (setq new (cons 70 (logior (cdr old) 128)))      (entmod (subst new old pline_info))      (setq a (1+ a))  )  (princ (strcat (itoa a) " Polyline(s) updated."))  (princ))(defun la-set (a b)	(setq old-la(getvar "CLAYER"))(if (tblsearch "LAYER" a)	(command "layer" "s" a "")(command "layer" "m" a "c" b a "")))(defun new_blk(/ a pt1 aa aaa e0 en bb)	(old-sn)(la-set "PLAN" 253)	(prompt "\n Select Inserting-Block : ")	(setq a (entlast))	(setq pt1 (cdr (assoc 10 (entget (setq aaa a)))))	(setq e0 (entlast))	(setq en (entnext e0))	(while (not (null en))      		(setq e0 en)		(setq en (entnext e0))	)	(command "explode" (xp_val -1 aaa nil))	(setq aa (ssadd))	(while (entnext e0)		(ssadd (setq e0 (entnext e0)) aa)	)	(setq color (xp_scn))	(setq layer (xp_sla))	(prompt "\n Block explode complete....")	(prompt "\n Select Remove Entity's of New-Block's ? <All is Enter> : ")	(setq bb (ssget))	(if bb		(progn			(command "chprop" aa "R" bb "" "c" color "la" layer "")			(command "block" bl-n "Y" pt1 aa "R" bb "")		)		(progn			(command "chprop" aa "" "c" color "la" layer "")			(command "block" bl-n "Y" pt1 aa "")		)	)	(new-sn))(defun c:xpp(/ a1 a2 po1 bl-n)	(setq a1 (entsel " Enter Pick for \"Xplode\" : "))	(if a1 (setq bl-n (cdr (assoc 2 (setq a2 (entget (car a1)))))))	(prompt " Enter Block ")(prin1 bl-n)	(setq po1 (getpoint " Isert-Point ? : "))	(command "insert" bl-n po1 "" "" "")	(new_blk))(defun xp_val (n e f)	(if f (cdr (assoc n e))(cdr (assoc n (entget e)))))(defun xp_scn ()	(setq arg 257)	(while (> arg 256)		(initget 2 "Red Yellow Green Cyan Blue Magenta White BYLayer BYBlock")		(setq arg (getint (strcat "\n\nNew color for exploded entities.  "								  "\nRed/Yellow/Green/Cyan/Blue/"                        			  "Magenta/White/BYLayer/BYBlock/<"								  (if (= (type (getvar "cecolor")) 'INT)                       				(itoa (getvar "cecolor"))(getvar "cecolor")								  )								   ">: "							)					)		)		(cond 			((= arg "BYLayer") (setq arg 0))		   ((= arg "Red")     (setq arg 1))			((= arg "Yellow")  (setq arg 2))	      ((= arg "Green")   (setq arg 3))			((= arg "Cyan")    (setq arg 4))			((= arg "Blue")    (setq arg 5))			((= arg "Magenta") (setq arg 6))	      ((= arg "White")   (setq arg 7))			((= arg "BYBlock") (setq arg 256))			((= arg nil)       (setq arg (atoi (getvar "CECOLOR"))))	      (T 				(if (= (type arg) 'INT)					(if (> arg 255)						(progn 							(princ "\nColor number out of range 1 - 255. ")							(setq arg 257)						)					)					(setq arg 						(if (= (type (setq arg (getvar "cecolor"))) 'INT)							(getvar "cecolor") 							(cond 								((= arg "BYLAYER") (setq arg 0))								((= arg "BYBLOCK") (setq arg 256))							)						)					)				)			)		)	)	(cond		((= arg 0) (setq arg "BYBLOCK"))		((= arg 256) (setq arg "BYLAYER"))	)arg)(defun xp_slt ()	(princ "\n\nChoose from the following list of linetypes. ")	(tblnext "ltype" T)	(setq xp_lta "CONTINUOUS,CONT BYLayer BYBlock" xp_ltb "BYBlock/BYLayer/CONTinuous")	(while (setq xp_lt (cdr(assoc 2 (tblnext "ltype"))))		(setq xp_lta (strcat xp_lta " " xp_lt) xp_ltb (strcat xp_ltb "/" xp_lt))	)	(initget xp_lta)	(princ 		(strcat "\nEnter new linetype name. \n" xp_ltb "/<" (getvar "celtype") "> : ")	)	(setq xp_nln (getkword))	(if (or (= xp_nln nil)(= xp_nln ""))		(setq xp_nln (getvar "celtype"))	)xp_nln)(defun xp_sla (/ temp)	(while (null temp)		(initget 1)		(setq temp (getstring (strcat "\n\nXPlode onto what layer?  <" (getvar "clayer") ">: ")))		(if (or (= temp "") (null temp))			(setq temp (getvar "clayer"))			(if (not (tblsearch "layer" temp))				(progn 					(princ "\nInvalid layer name. ")					(setq temp nil)				)			)		)	)temp)(defun c:xp    () (c:xpp))(defun c:xplode() (c:xpp))(defun dtr(a)(* pi (/ a 180.0)))(defun rtd(a)(/ (* a 180.0) pi))(defun old-non()(set-os 0))(defun set-os(a)   (setq olds(getvar "osmode"))(setvar "osmode" a)   (prompt " \"OSMODE\" is Change at [")(prin1 a)(prompt "] "))(defun new-sn()   (setvar "OSMODE" olds)(prompt "\n \"OSMODE\" is Return at [")   (prin1 olds)(prompt "] ")(setq olds nil)(prin1))(DEFUN SNAP-RO()(SETVAR "ORTHOMODE" 1))(defun c:cmm4()  (cmark-4))(defun call_cmm_size(/ a)  (if (= cmm_key nil)(setq cmm_key 800.0))  (prompt "\n ARC Radius ? *800/1200/1600* :<")(prin1 cmm_key)  (prompt "> : ")(setq a (getint))  (if (or (= a nil)(= a ""))(setq a cmm_key))  (setq cmm_key a))(defun cmark-4  (/ p1 p2 p3 p4 po-x1 po-x2 po-y1 po-y2 ps ps2 ps2c po-xlw po-xhi     po-ylw po-yhi lt-scale r-dist x-dist x-mdist y-dist y-mdist x-ang p1s     key key_1 key_2)  (old-non)(snap-ro)  (if (= cmm_key nil) (call_cmm_size))  (prompt "\n First Point for C-mark ? <")(prin1 cmm_key)  (setq p1 (getpoint "> :"))  (if (= p1 nil)    (progn      (call_cmm_size)      (setq p1 (getpoint "\n First Point for C-mark ? :"))    )  )  (setq p1s p1 key 3 key_1 1 key_2 nil)  (setq lt-scale (getvar "LTSCALE"))  (setq r-dist (* cmm_key (/ lt-scale 100)))  (while key    (setq p2 nil)    (setq p2 (getpoint p1 "\n Second Point ? :"))    (if p2      (progn        (setq x-dist (distance p1 p2))        (setq x-ang(angle p1 p2))        (setq x-mdist (fix (/ x-dist (* cmm_key (/ lt-scale 100)))))        (if (< x-mdist 1)(setq x-mdist 1))        (setq x-dist (/ x-dist x-mdist))        (setq ps p1)        (if key_1 (command "PLINE" ps "W" 0 0 "A"))        (repeat x-mdist          (setq ps2c (polar ps (dtr (+ (rtd x-ang) 327)) (/ r-dist 1.9)))          (setq ps2 (polar ps x-ang x-dist))          (command "S" ps2c ps2)          (setq ps ps2)        )        (setq p1 p2)        (setq key_1 nil)      )      (progn        (prompt "\n ** Game is Over **  By By By....")        (prompt "\n Press *CANCEL* *CANCEL* *CANCEL* ")        (setq key nil key_2 2)      )    )  )  (if key_2 (command ""))  (new-sn)  (prin1))(defun C:CMM1()(setq cmm_key 800) (c-mark))(defun C:CMM2()(setq cmm_key 1200)(c-mark))(defun C:CMM3()(setq cmm_key 1600)(c-mark))(defun C:CMM()  (c-mark))(defun C-MARK  (/ p1 p2 p3 p4 po-x1 po-x2 po-y1 po-y2 ps ps2 ps2c po-xlw po-xhi     po-ylw po-yhi lt-scale r-dist x-dist x-mdist y-dist y-mdist)  (old-sn)(snap-ro)  (if (= cmm_key nil) (call_cmm_size))  (prompt "\n First Point for C-mark ? <")(prin1 cmm_key)  (setq p1 (getpoint "> :"))  (if (= p1 nil)    (progn      (call_cmm_size)      (setq p1 (getpoint "\n First Point for C-mark ? :"))    )  )  (setq p2 (getcorner p1 "\n Second Point ? :"))  (setq po-x1 (car p1) po-x2 (car p2) po-y1 (cadr p1) po-y2 (cadr p2))  (if (< po-x1 po-x2)    (setq po-xlw po-x1 po-xhi po-x2)    (setq po-xlw po-x2 po-xhi po-x1))  (if (< po-y1 po-y2)    (setq po-ylw po-y1 po-yhi po-y2)    (setq po-ylw po-y2 po-yhi po-y1))  (setq p1 (list po-xlw po-ylw))  (setq p2 (list po-xhi po-ylw))  (setq p3 (list po-xhi po-yhi))  (setq p4 (list po-xlw po-yhi))  (setq lt-scale (getvar "LTSCALE"))  (setq r-dist (* cmm_key (/ lt-scale 100)))  (setq x-dist (distance p1 p2))  (setq x-mdist (fix (/ x-dist (* cmm_key (/ lt-scale 100)))))  (if (< x-mdist 1)(setq x-mdist 1))  (setq x-dist (/ x-dist x-mdist))  (setq ps p1)  (command "PLINE" ps "W" 0 0 "A")  (repeat x-mdist    (setq ps2c (polar ps (dtr (+ 0 327)) (/ r-dist 1.9)))    (setq ps2 (polar ps (dtr 0) x-dist))    (command "S" ps2c ps2)    (setq ps ps2)  )  (setq y-dist (distance p1 p4))  (setq y-mdist (fix (/ y-dist (* cmm_key (/ lt-scale 100)))))  (if (< y-mdist 1)(setq y-mdist 1))  (setq y-dist (/ y-dist y-mdist))  (setq ps p2)  (repeat y-mdist    (setq ps2c (polar ps (dtr (+ 90 327)) (/ r-dist 1.9)))    (setq ps2 (polar ps (dtr 90) y-dist))    (command "S" ps2c ps2)    (setq ps ps2)  )  (setq ps p3)  (repeat x-mdist    (setq ps2c (polar ps (dtr (+ 180 327)) (/ r-dist 1.9)))    (setq ps2 (polar ps (dtr 180) x-dist))    (command "S" ps2c ps2)    (setq ps ps2)  )  (setq ps p4)  (repeat y-mdist    (setq ps2c (polar ps (dtr (+ 270 327)) (/ r-dist 1.9)))    (setq ps2 (polar ps (dtr 270) y-dist))    (command "S" ps2c ps2)    (setq ps ps2)  )  (command "")  (new-sn)(prin1))(defun draw_cmm_mark (cmm_key cp1 cp2)  (setq lt-scale (getvar "LTSCALE"))  (setq r-dist (* cmm_key (/ lt-scale 100)))  (setq x-dist (distance cp1 cp2))  (setq x-ang (angle cp1 cp2))  (setq x-mdist (fix (/ x-dist (* cmm_key (/ lt-scale 100)))))  (if (< x-mdist 1)(setq x-mdist 1))  (setq x-dist (/ x-dist x-mdist))  (setq ps cp1)  (repeat x-mdist    (setq ps2c (polar ps (dtr (+ (rtd x-ang) 327)) (/ r-dist 1.9)))    (setq ps2 (polar ps x-ang x-dist))    (command "S" ps2c ps2)    (setq ps ps2)  ))(defun c:sw1()(command "insert" "sw1"))(defun c:sw2()(command "insert" "sw2"))(defun c:sw3()(command "insert" "sw3"))(defun c:sw4()(command "insert" "sw4"))(defun c:swg()(command "insert" "swg"))(setq jinbox_bl(load_dialog "jblock")) (defun help_jjb()(acad_helpdlg "lisp-hlp.hlp" "block"))(defun C:JJB()(c:jblock))(defun C:JBLOCK(/ jinbox xxx)  (if (= jinbox_bl nil)(setq jinbox_bl(load_dialog "jblock")))  (new_dialog "jinblock" jinbox_bl)  (setq xxx 3 jkey nil)    (action_tile "jbct"  "(setq jkey 1)(done_dialog)")    (action_tile "jbeb"  "(setq jkey 2)(done_dialog)")    (action_tile "jbsb"  "(setq jkey 3)(done_dialog)")    (action_tile "jbch"  "(setq jkey 4)(done_dialog)")    (action_tile "jbep1" "(setq jkey 5)(done_dialog)")    (action_tile "jbep2" "(setq jkey 6)(done_dialog)")    (action_tile "jbep3" "(setq jkey 7)(done_dialog)")    (action_tile "jbwb"  "(setq jkey 8)(done_dialog)")    (action_tile "jbbl"  "(setq jkey 9)(done_dialog)")    (action_tile "jbxp"  "(setq jkey 10)(done_dialog)")    (action_tile "jdel1" "(setq jkey 11)(done_dialog)")    (action_tile "jbs7"  "(setq jkey 12)(done_dialog)")    (action_tile "pds_key"  "(setq jkey 98)(done_dialog)")    (action_tile "help"  "(help_jjb)")    (setq xxx (start_dialog))  (action_tile "accept" "(done_dialog)")  (action_tile "cancel" "(setq jkey 11)(done_dialog)")  (done_dialog)  (if jkey (jsel_run_b jkey))  (prin1))(defun jsel_run_b(a)  (cond    ((= a 1)(c:ctt))    ((= a 2)(c:ebk))    ((= a 3)(c:sbk))    ((= a 4)(c:chbb))    ((= a 5)(blep))    ((= a 6)(c:miep))    ((= a 7)(c:blo_exp))    ((= a 8)(command "wblock" "~"))    ((= a 9)(command "block"))    ((= a 10)(c:xp))    ((= a 11)(jsel_not))    ((= a 12)(c:s7))    ((= a 98)(pds_key))  ))(defun jsel_not()(prompt "\n Select is \"Cancel\"... "))(defun blep()  (setq a(sel_block))  (setq nl (sslength a))  (setq n (- nl 1))  (setq i 0)  (while (<= i n)    (setq e2(entget (setq e1 (ssname a i))))    (command "explode" e1 )    (setq i(1+ i))  ))(defun C:MIEP(/ sold tag bl bl1 i n nl p3)   (setq olderr  *error* *error* myerror chm 0)   (setq lay(getvar "CLAYER"))   (prompt "\n\t Exploding at [Mirring Block] Only")   (old-non)   (setq tag (sel_block))   (if tag      (progn         (setq i 0)         (setq nl (sslength tag))         (setq n (- nl 1))         (while (<= i n)            (setq bl (entget (setq bl1 (ssname tag i))))            (setq x (cdr (assoc 41 bl)))            (setq y (cdr (assoc 42 bl)))            (setq z (cdr (assoc 43 bl)))            (cond               ((< x 0.0)(miep bl1))               ((< y 0.0)(miep bl1))               ((< z 0.0)(miep bl1))               (T (miep2 bl1))            )            (setq i (1+ i))         )      )   )   (prompt "\n !! Mirror & Explode was Complete !! ")   (new-sn))(defun miep (bl1)   (setq p3 (getvar "VIEWCTR"))   (command "Mirror" bl1 "" p3 "@100<90" "Y")   (command "Explode" bl1 )   (command "Mirror" "P" "" p3 "@100<90" "Y" ))(defun miep2 (bl1)(command "Explode" bl1 ))(defun c:s7()(jblock_s7 nil))(defun jblock_s7(sel_na / b_name sbl_na sbl_sc)  (prompt "\t *** Block Groop Scale - ( Mong-DDang Scale ) ***")  (if (null sel_na)    (progn      (setq b_name (car (entsel "\n\t [ Pick the BLOCK ] :")))      (if (= b_name nil)         (setq sbl_na (strcase (getstring "\n [ What is the Block name ? ] :")))         (setq sbl_na (cdr (assoc 2 (entget b_name))))      )      (if (= b_name nil)        (prompt "\Block Scale ????")        (setq sbl_sc (cdr (assoc 41 (entget b_name))))      )    )    (progn      (setq sbl_na sel_na)      (prompt "\Block Scale ????")    )  )  (setq jinbox2(load_dialog "jblock"))  (new_dialog "jinblock2" jinbox2)  (set_tile "jsbn" sbl_na)  (if sbl_sc (set_tile "jsbs" (rtos sbl_sc 2 4)))  (setq xxx 3 jkey nil)  (while (> xxx 2)    (action_tile "jsa" "(setq jkey 1)(done_dialog)")    (action_tile "jsr" "(setq jkey 2)(done_dialog)")    (action_tile "jsn" "(setq jkey 3)(done_dialog)")    (action_tile "jss" "(setq jkey $value)(done_dialog)")    (setq xxx(start_dialog))  )  (action_tile "accept" "(jsel_run_b2 jkey)(done_dialog)")  (action_tile "cancel" "(setq jkey nil)(done_dialog)")  (done_dialog)  (if jkey (jsel_run_b2 jkey))  (unload_dialog jinbox2)  (prin1))(defun jsel_run_b2(jkey)  (cond    ((= jkey 1)(scale_n "A"))    ((= jkey 2)(scale_n "R"))    ((= jkey 3)(scale_n "N"))    (T (scale_n "S"))  ))(defun scale_n (jja)  (old-non)  (prompt "\n *!*!* Select of Changing Block / [Enter] is Select-All : ")  (setq a (ssget (list (cons 0 "INSERT") (cons 2 sbl_na))))  (if (= a nil)(setq a (ssget "X" (list (cons 0 "INSERT") (cons 2 sbl_na)))))  (setq nl (sslength a))  (setq n (- nl 1))  (prompt "\n Select Block [")(prin1 sbl_na)(prompt "] is => ")  (prin1 nl)(prompt "EA :")  (setq i 0 tr1 0)   (if (= jja "N")(setq old-sc(getreal "\n\t Enter Select Block-Scale ? : ")))  (if (= jja "N")(setq new-sc(getreal "\n\t Enter New Setting Scale ? : ")))  (if (= jja "R")(setq old-sc(getreal "\n\t Enter Defaoult Scale ? : ")))  (if (= jja "R")(setq new-sc(getreal "\n\t Enter New Setting Scale ? : ")))  (if (= jja "A")(setq old-sc 1))  (if (= jja "A")(setq new-sc(getreal "\n\t Enter New Setting Scale ? : ")))  (if (= jja "S")(setq old-sc 1))  (if (= jja "S")(setq new-sc(atof jkey)))  (while (<= i n)    (setq ed (entget (setq e2 (ssname a i))))    (setq sca (ABS (cdr (assoc 41 ed))))    (if (= jja "A")(setq old-sc sca))    (setq sca-1 (rtos sca 2 8))    (cond      ((= jja "N")(if (= sca-1 (rtos old-sc 2 8))(ch-sc old-sc new-sc)))      ((= jja "R")(ch-sc old-sc new-sc))      ((= jja "A")(ch-sc old-sc new-sc))      ((= jja "S")(ch-sc old-sc new-sc))      (T (err))    )    (setq i (+ i 1))  )  (setq scc nil)  (new-sn)  (prompt "\n\t changed block is [")(prin1 sbl_na)(prompt "] ---> ")  (prin1 tr1)(prompt "/")(prin1 i))(defun ch-sc(old-sc new-sc)   (setq pnt (cdr (assoc 10 ed)))   (command "scale" e2 "" pnt "r" old-sc new-sc)   (setq tr1 (+ tr1 1)))(defun C:S9(/ sold tag bl bl1 i n nl p3)   (setq olderr  *error* *error* myerror chm 0)   (if (= bl-sc9 nil)(setq bl-sc9 1.0))   (prompt "\n\t SCALE at [")(prin1 bl-sc9)(prompt "] ")   (prompt " and Select Object / Scale(Enter) : ")   (setq tag (ssget))   (if tag      (progn        (old-non)        (setq p3 (getpoint "\n Enter Base Point ? : "))        (command "Scale" tag "" p3 bl-sc9)        (new-sn)      )      (progn        (setq bl-sc9 (getreal "\n Enter Scale Factor ? : "))      )   )   (prin1))(DEFUN C:S8(/ a b c)   (IF KEY-S8      (progn         (prompt "\t Scale command { S8 } : Working ")         (old-sn)         (setq a (getpoint "\n First corner ? : "))         (setq b (getcorner a "\t Other corner ? : "))         (setvar "OSMODE" 32)         (setq c (getpoint "\n Enter Base Point ? : <Int>"))         (COMMAND "SCALE" "C" a b "" c KEY-S8)         (new-sn)      )      (PROGN         (prompt "\t Scale command { S8 } : Setting ")         (SETQ A (GETREAL "\n Enter Old Scale ? :"))         (setq b (getreal "\n Enter New Scale ? :"))         (setq key-s8 (/ b a))         (prompt "\n KEY-S8 is { ")(prin1 key-s8)(prompt " }... ")      )   )   (prompt "\n Change Scale is --> SS8 !! ")(prin1))(defun c:ss8()(setq key-s8 nil)(c:s8))(defun Y3NAME(/ x1 x2 y1 y2)   (setq x1 (strlen (setq x2 (getvar "dwgprefix"))))   (setq y1 (strlen (setq y2 (getvar "dwgname"))))   (cond      ((< y1 9)  (setq y3 y2))      ((= x1 y1) (setq y3 y2))      ((> y1 x1) (setq y3 (substr y2 (+ x1 1) y1)))      ((< y1 x1) (setq y3 y2))   )   (setq _dwgname y3))(defun brfsett(key)   (setq br-wdh1 (* key 1.5)         br-wdv1 (* key 2.0)         br-wdh2 (* key 2.3)         br-wdh3 (* key 3.2)         br-wdv3 (* key 2.3)         key-n key   )   (setvar "userr5" key-n)   (prompt ",[brf OK!],"))(defun brksett(bbb)   (setq bk1 bbb)   (setvar "userr2" bk1)   (prompt ",[brk OK!],"))(defun wirsett(wir)   (setq wire-scale wir)   (setvar "USERR3" wire-scale)   (prompt ",[wir OK!],"))(defun dwgsett(dwg)   (setq dwg-scale (/ dwg 100))   (setvar "LTSCALE" dwg)   (setvar "USERR1" dwg-scale)   (setq ard nil)   (setq lmx "0,0" lmy (list (* dwg 841)(* dwg 594)))   (command "limits" lmx lmy)   (prompt ",[dwg OK!],")   (prin1))(defun dimsett(dsc / p1 a )   (command "layer" "unlock" "*" "")   (setq p1 (getvar "VIEWCTR"))   (command ".insert" "dimdot" p1 """""" "ERASE" (entlast) "")   (command "dim" 				"dimblk" "dimdot"		"dimasz" "1.3"		"dimcen" "-1"			"dimdle" "2" 				"dimblk1" "dimdot"	"dimblk2" "dimdot"				"dimdli" "8"			"dimexe" "2" 		"dimexo" "2"			"dimlfac" "1" 				"dimtad" "1"			"dimtih" "off" 	"dimtix" "on"			"dimtm" "0" 				"dimtoh" "on"			"dimtol" "off"    "dimtxt" "2.5"			"dimse1" "off" 				"dimse2" "off"			"dimassoc" "1"		    "dimclre" "bylayer"	"dimclrd" "bylayer" 				"dimclrt" "bylayer"	"dimtofl" "on"				"dimgap" 1				"dimunit" 2			"dimdec" 0            "exit")   (setvar "dimscale" dsc)   (prompt ",[dim OK!],")	(setq a (ssget "X"(list (cons 0 "DIMENSION"))))	(if a (command "dim1" "update" a "")))(defun jget(a)(get_tile a))(defun nosetting()  (setq ddwgs nil djbrw nil djwis nil djiss nil djbrf nil ooo nil        sss nil bbb nil ggg nil jdot nil getxx nil))(defun dwgsetting()  (if ooo (setvar "ORTHOMODE" (atoi ooo)))  (if sss (setvar "SNAPMODE"  (atoi sss)))  (if ggg (setvar "GRIDMODE"  (atoi ggg)))  (if bbb (setvar "BLIPMODE"  (atoi bbb)))  (if jdot (setvar "LUPREC" jdot))  (if jdot (setvar "DIMDEC" jdot)))(defun sc_def()  (setq getxx (atoi (get_tile "jds_li")))  (cond    ((= 0 getxx)(setq sc_li 1))    ((= 1 getxx)(setq sc_li 2))    ((= 2 getxx)(setq sc_li 10))    ((= 3 getxx)(setq sc_li 20))    ((= 4 getxx)(setq sc_li 30))    ((= 5 getxx)(setq sc_li 50))    ((= 6 getxx)(setq sc_li 60))    ((= 7 getxx)(setq sc_li 100))    ((= 8 getxx)(setq sc_li 150))    ((= 9 getxx)(setq sc_li 200))    ((= 10 getxx)(setq sc_li 300))    ((= 11 getxx)(setq sc_li 400))    ((= 12 getxx)(setq sc_li 500))    ((= 13 getxx)(setq sc_li 600))  )  (setq ddwgs sc_li)  (setq djwis (/ sc_li 100.0))  (setq djiss sc_li)  (setq djbrw (* sc_li 2))  (setq djbrf sc_li)  (set_tile "jdws" (rtos ddwgs 2 0))  (set_tile "jwis" (rtos djwis 2 4))  (set_tile "jdis" (rtos djiss 2 0))  (set_tile "jbrw" (rtos djbrw 2 0))  (set_tile "jbrf" (rtos djbrf 2 4))  (setq ddwgs (rtos ddwgs 2 0))  (setq djwis (rtos djwis 2 4))  (setq djiss (rtos djiss 2 0))  (setq djbrw (rtos djbrw 2 0))  (setq djbrf (rtos djbrf 2 4)))(defun lt_sc_get(/ lt_sc)  (setq lt_sc (getvar "LTSCALE"))  (setq lt_sc_key nil)  (cond    ((= 1.0 lt_sc)  (setq lt_sc_key "0"))    ((= 2.0 lt_sc)  (setq lt_sc_key "1"))    ((= 10.0 lt_sc) (setq lt_sc_key "2"))    ((= 20.0 lt_sc) (setq lt_sc_key "3"))    ((= 30.0 lt_sc) (setq lt_sc_key "4"))    ((= 50.0 lt_sc) (setq lt_sc_key "5"))    ((= 60.0 lt_sc) (setq lt_sc_key "6"))    ((= 100.0 lt_sc)(setq lt_sc_key "7"))    ((= 150.0 lt_sc)(setq lt_sc_key "8"))    ((= 200.0 lt_sc)(setq lt_sc_key "9"))    ((= 300.0 lt_sc)(setq lt_sc_key "10"))    ((= 400.0 lt_sc)(setq lt_sc_key "11"))    ((= 500.0 lt_sc)(setq lt_sc_key "12"))    ((= 600.0 lt_sc)(setq lt_sc_key "13"))    (T (prompt "\n Drawing Scale is Not-Matching "))  ))(setq jinbox_dw(load_dialog "jdwgs")) (defun help_dwgs()(acad_helpdlg "lisp-hlp.hlp" "dwgs"))(defun C:DWGS(/ o-m b-m s-m g-m ddwgs djwis djiss djbrw djbrf xxx jdot                ooo sss ggg bbb dim-scale lt-scale jinbox_dw kkkk jlww)  (setq pds-xxx nil)  (setq jlww nil)  (setq kkkk nil)  (command "UCSICON" "OFF")  (setvar "LUNITS" 2)  (setq lt-scale (GETVAR "LTSCALE")        bk1 (GETVAR "USERR2")        wire-scale (GETVAR "USERR3")        key-n (GETVAR "USERR5")        dim-scale (GETVAR "DIMSCALE")        o-m (GETVAR "ORTHOMODE")        b-m (GETVAR "BLIPMODE")        s-m (GETVAR "SNAPMODE")        g-m (GETVAR "GRIDMODE")  )  (lt_sc_get)  (if (= jinbox_dw nil)(setq jinbox_dw(load_dialog "jdwgs")))  (setq xxx 3)  (new_dialog "jinbox" jinbox_dw)  (if lt-scale   (set_tile "jdws" (rtos lt-scale 2 1)))  (if wire-scale (set_tile "jwis" (rtos wire-scale 2 4)))  (if dim-scale  (set_tile "jdis" (rtos dim-scale 2 1)))  (if bk1        (set_tile "jbrw" (rtos bk1 2 1)))  (if key-n      (set_tile "jbrf" (rtos key-n 2 1)))  (if lt_sc_key  (set_tile "jds_li" lt_sc_key))  (setq lll(getvar "LUPREC"))  (cond    ((= lll 0)(set_tile "jdot0" "1"))    ((= lll 2)(set_tile "jdot2" "1"))    ((= lll 4)(set_tile "jdot4" "1"))    (T (set_tile "jdot4" "1"))  )  (setq lll nil)  (if (= line-work "Light")(set_tile "jlww1" "1")(set_tile "jlww2" "1"))    (set_tile "jotm" (itoa o-m))  (set_tile "jblm" (itoa b-m))  (set_tile "jsnm" (itoa s-m))  (set_tile "jgrm" (itoa g-m))  (set_tile "jname" _dwgname)  (while (> xxx 2)    (action_tile "jdws" "(setq ddwgs $value)")    (action_tile "jwis" "(setq djwis $value)")    (action_tile "jdis" "(setq djiss $value)")    (action_tile "jbrw" "(setq djbrw $value)")    (action_tile "jbrf" "(setq djbrf $value)")    (action_tile "jotm" "(setq ooo $value)")    (action_tile "jsnm" "(setq sss $value)")    (action_tile "jgrm" "(setq ggg $value)")    (action_tile "jblm" "(setq bbb $value)")    (action_tile "jlimit" "(setq kkkk 1)(done_dialog)")    (action_tile "jdot0" "(setq jdot 0)")    (action_tile "jdot2" "(setq jdot 2)")    (action_tile "jdot4" "(setq jdot 4)")    (action_tile "jlww1" "(setq jlww 1)")    (action_tile "jlww2" "(setq jlww 2)")    (action_tile "pds_key" "(setq pds-xxx 1)(done_dialog)")    (action_tile "jds_li" "(sc_def)")    (action_tile "accept" "(dwgsetting)(done_dialog)")    (action_tile "cancel" "(nosetting)(done_dialog)")    (action_tile "help" "(help_dwgs)")    (setq xxx (start_dialog))  )  (action_tile "accept" "(dwgsetting)")  (done_dialog)  (if ddwgs (dwgsett (atof ddwgs)))  (if djbrw (brksett (atof djbrw)))  (if djwis (wirsett (atof djwis)))  (if djiss (dimsett (atof djiss)))  (if djbrf (brfsett (atof djbrf)))  (if jlww (line-ww jlww))  (if kkkk (c:zaa))  (if (= pds-xxx 1)(pds_key))  (princ))(defun dtr (a) (* pi (/ a 180.0)))(defun rtd (a) (/ (* a 180.0) pi))(defun new-sn () (setvar "osmode" olds)(setq olds nil)(prin1))(defun old-nea () (setq olderr *error* *error* wierror chm 0)  (setq snap-ang (getvar "snapang"))(setq olds (getvar "osmode"))  (setvar "osmode" 512))(defun old-mid () (setq olds (getvar "osmode"))(setvar "osmode" 2))(defun wierror (s)  (if (/= s "function cancelled") (princ (strcat "\nerror: " s)))  (setvar "osmode" olds)  (setq *error* olderr)  (princ))(defun jw_ty_set(a)  (cond    ((= a 0) (mode_tile "ww1" 2))    ((= a 1) (mode_tile "ww2" 2))    ((= a 2) (mode_tile "ww3" 2))    ((= a 3) (mode_tile "ww4" 2))    ((= a 4) (mode_tile "ww5" 2))    ((= a 5) (mode_tile "ww6" 2))    ((= a 6) (mode_tile "ww7" 2))    ((= a 7) (mode_tile "ww8" 2))    ((= a 8) (mode_tile "ww9" 2))    ((= a 10) (mode_tile "wr2" 2))    ((= a 11) (mode_tile "wr3" 2))    ((= a 12) (mode_tile "wr4" 2))    ((= a 13) (mode_tile "wr5" 2))    ((= a 14) (mode_tile "wr6" 2))    ((= a 15) (mode_tile "wr7" 2))    ((= a 16) (mode_tile "wr8" 2))    ((= a 17) (mode_tile "wr9" 2))    ((= a 18) (mode_tile "wh2" 2))    ((= a 19) (mode_tile "wh3" 2))    ((= a 20) (mode_tile "wh4" 2))    ((= a 21) (mode_tile "wh5" 2))    ((= a 22) (mode_tile "wh6" 2))    ((= a 23) (mode_tile "wh7" 2))    ((= a 24) (mode_tile "wh8" 2))    ((= a 25) (mode_tile "wh9" 2))    ((= a 41) (mode_tile "lle" 2))    ((= a 42) (mode_tile "llt" 2))    ((= a 43) (mode_tile "lltv" 2))    ((= a 44) (mode_tile "llf" 2))    ((= a 45) (mode_tile "lls" 2))    ((= a 46) (mode_tile "llex" 2))    ((= a 47) (mode_tile "lldc" 2))    ((= a 48) (mode_tile "llu" 2))    ((= a 49) (mode_tile "lloa" 2))  ))(defun jsel_run_w (a)  (cond    ((= a 0) (c:w1))   ((= a 10) (c:wr2)) ((= a 18) (c:wh2))    ((= a 1) (c:w2))   ((= a 11) (c:wr3)) ((= a 19) (c:wh3))    ((= a 2) (c:w3))   ((= a 12) (c:wr4)) ((= a 20) (c:wh4))    ((= a 3) (c:w4))   ((= a 13) (c:wr5)) ((= a 21) (c:wh5))    ((= a 4) (c:w5))   ((= a 14) (c:wr6)) ((= a 22) (c:wh6))    ((= a 5) (c:w6))   ((= a 15) (c:wr7)) ((= a 23) (c:wh7))    ((= a 6) (c:w7))   ((= a 16) (c:wr8)) ((= a 24) (c:wh8))    ((= a 7) (c:w8))   ((= a 17) (c:wr9)) ((= a 25) (c:wh9))    ((= a 8) (c:w9))    ((= a 9) (c:w10))    ((= a 41) (setq jw_ty 41)(c:lle))    ((= a 42) (setq jw_ty 42)(c:llt))    ((= a 43) (setq jw_ty 43)(c:lltv))    ((= a 44) (setq jw_ty 44)(c:llf))    ((= a 45) (setq jw_ty 45)(c:lls))    ((= a 46) (setq jw_ty 46)(c:llex))    ((= a 47) (setq jw_ty 47)(c:lldc))    ((= a 48) (setq jw_ty 48)(c:llu))    ((= a 49) (setq jw_ty 49)(c:lloa))    ((= a 98) (pds_key))  )  (prin1))(setq jinbox_wi(load_dialog "jwire")) (defun help_jjw()(acad_helpdlg "lisp-hlp.hlp" "wire"))(defun C:WW()(c:jwire))(defun C:JWIRE(/ jinbox xxx jkey acc)  (setq acc nil)  (if (= jinbox_wi nil)(setq jinbox_wi(load_dialog "jwire")))  (new_dialog "jinwire" jinbox_wi)  (if (= jw_ty nil)(setq jw_ty 41))  (jw_ty_set jw_ty)  (setq xxx 3 jkey nil)  (while (> xxx 2)    (action_tile "ww1"  "(setq jw_ty 0)(setq acc 1)(done_dialog)")    (action_tile "ww2"  "(setq jw_ty 1)(setq acc 1)(done_dialog)")    (action_tile "ww3"  "(setq jw_ty 2)(setq acc 1)(done_dialog)")    (action_tile "ww4"  "(setq jw_ty 3)(setq acc 1)(done_dialog)")    (action_tile "ww5"  "(setq jw_ty 4)(setq acc 1)(done_dialog)")    (action_tile "ww6"  "(setq jw_ty 5)(setq acc 1)(done_dialog)")    (action_tile "ww7"  "(setq jw_ty 6)(setq acc 1)(done_dialog)")    (action_tile "ww8"  "(setq jw_ty 7)(setq acc 1)(done_dialog)")    (action_tile "ww9"  "(setq jw_ty 8)(setq acc 1)(done_dialog)")    (action_tile "ww0"  "(setq jw_ty 9)(done_dialog)")    (action_tile "wr2"  "(setq jw_ty 10)(setq acc 1)(done_dialog)")    (action_tile "wr3"  "(setq jw_ty 11)(setq acc 1)(done_dialog)")    (action_tile "wr4"  "(setq jw_ty 12)(setq acc 1)(done_dialog)")    (action_tile "wr5"  "(setq jw_ty 13)(setq acc 1)(done_dialog)")    (action_tile "wr6"  "(setq jw_ty 14)(setq acc 1)(done_dialog)")    (action_tile "wr7"  "(setq jw_ty 15)(setq acc 1)(done_dialog)")    (action_tile "wr8"  "(setq jw_ty 16)(setq acc 1)(done_dialog)")    (action_tile "wr9"  "(setq jw_ty 17)(done_dialog)")    (action_tile "wh2"  "(setq jw_ty 18)(setq acc 1)(done_dialog)")    (action_tile "wh3"  "(setq jw_ty 19)(setq acc 1)(done_dialog)")    (action_tile "wh4"  "(setq jw_ty 20)(setq acc 1)(done_dialog)")    (action_tile "wh5"  "(setq jw_ty 21)(setq acc 1)(done_dialog)")    (action_tile "wh6"  "(setq jw_ty 22)(setq acc 1)(done_dialog)")    (action_tile "wh7"  "(setq jw_ty 23)(setq acc 1)(done_dialog)")    (action_tile "wh8"  "(setq jw_ty 24)(setq acc 1)(done_dialog)")    (action_tile "wh9"  "(setq jw_ty 25)(done_dialog)")    (action_tile "lle"  "(setq jw_ty 41)(setq acc 1)(done_dialog)")    (action_tile "llt"  "(setq jw_ty 42)(setq acc 1)(done_dialog)")    (action_tile "lltv" "(setq jw_ty 43)(setq acc 1)(done_dialog)")    (action_tile "llf"  "(setq jw_ty 44)(setq acc 1)(done_dialog)")    (action_tile "lls"  "(setq jw_ty 45)(setq acc 1)(done_dialog)")    (action_tile "llex" "(setq jw_ty 46)(setq acc 1)(done_dialog)")    (action_tile "lldc" "(setq jw_ty 47)(setq acc 1)(done_dialog)")    (action_tile "llu"  "(setq jw_ty 48)(setq acc 1)(done_dialog)")    (action_tile "lloa" "(setq jw_ty 49)(setq acc 1)(done_dialog)")    (action_tile "pds_key" "(setq acc 2)(done_dialog)")    (action_tile "help" "(help_jjw)")    (setq xxx (start_dialog))  )  (action_tile "accept" "(setq jw_ty jw_ty)(setq acc 1)(done_dialog)")  (action_tile "cancel" "(done_dialog)")  (done_dialog)  (if (= acc 1)(jsel_run_w jw_ty))  (if (= acc 2)(pds_key)))(defun j_empty()(prompt "\n\t Select is \"Cancel\" ...."))(defun jsel_run_l (a)  (cond    ((= a 1) (c:on))    ((= a 11)(c:cc))    ((= a 21)(c:lt1))    ((= a 2) (c:off))   ((= a 12)(c:cl))    ((= a 22)(c:lt2))    ((= a 3) (c:lla))   ((= a 13)(c:ch1))   ((= a 23)(c:lt3))    ((= a 4) (c:ula))   ((= a 14)(c:ch3))   ((= a 24)(c:lt4))    ((= a 5) (c:lock))  ((= a 15)(c:ch2))   ((= a 25)(c:lt1a))    ((= a 6) (c:uula))  ((= a 16)(c:ch4))   ((= a 26)(c:lt1b))    ((= a 7) (c:oon))   ((= a 17)(j_empty)) ((= a 27)(c:lt2a))    ((= a 8) (j_empty)) ((= a 18)(j_empty)) ((= a 28)(c:lty))    ((= a 9) (j_empty)) ((= a 19)(j_empty)) ((= a 29)(c:ltt))    ((= a 31)(c:c1))    ((= a 40)(c:c10))    ((= a 32)(c:c2))    ((= a 41)(c:c11))    ((= a 33)(c:c3))    ((= a 42)(c:c12))    ((= a 34)(c:c4))    ((= a 43)(c:c15))    ((= a 35)(c:c5))    ((= a 44)(j_empty))    ((= a 36)(c:c6))    ((= a 45)(j_empty))    ((= a 37)(c:c7))    ((= a 46)(j_empty))    ((= a 38)(c:c8))    ((= a 47)(j_empty))    ((= a 39)(c:c9))    ((= a 48)(c:coo))    ((= a 98)(pds_key))  )  (prin1))(setq jinbox_la(load_dialog "jlayer")) (defun help_jjl()(acad_helpdlg "lisp-hlp.hlp" "layer"))(defun C:JJL()(c:jlayer))(defun C:JLAYER(/ jinbox xxx jkey)  (setq jinbox_la(load_dialog "jlayer"))  (new_dialog "jinlayer" jinbox_la)  (setq xxx 3 jkey nil)  (while (> xxx 2)    (action_tile "jct1"  "(setq jkey 1)(done_dialog)")    (action_tile "jct2"  "(setq jkey 2)(done_dialog)")    (action_tile "jct3"  "(setq jkey 3)(done_dialog)")    (action_tile "jct4"  "(setq jkey 4)(done_dialog)")    (action_tile "jct5"  "(setq jkey 5)(done_dialog)")    (action_tile "jct6"  "(setq jkey 6)(done_dialog)")    (action_tile "jct7"  "(setq jkey 7)(done_dialog)")    (action_tile "jct8"  "(setq jkey 8)(done_dialog)")    (action_tile "jct9"  "(setq jkey 9)(done_dialog)")    (action_tile "jla1"  "(setq jkey 11)(done_dialog)")    (action_tile "jla2"  "(setq jkey 12)(done_dialog)")    (action_tile "jla3"  "(setq jkey 13)(done_dialog)")    (action_tile "jla4"  "(setq jkey 14)(done_dialog)")    (action_tile "jla5"  "(setq jkey 15)(done_dialog)")    (action_tile "jla6"  "(setq jkey 16)(done_dialog)")    (action_tile "jla7"  "(setq jkey 17)(done_dialog)")    (action_tile "jla8"  "(setq jkey 18)(done_dialog)")    (action_tile "jla9"  "(setq jkey 19)(done_dialog)")    (action_tile "jlt1"  "(setq jkey 21)(done_dialog)")    (action_tile "jlt2"  "(setq jkey 22)(done_dialog)")    (action_tile "jlt3"  "(setq jkey 23)(done_dialog)")    (action_tile "jlt4"  "(setq jkey 24)(done_dialog)")    (action_tile "jlt5"  "(setq jkey 25)(done_dialog)")    (action_tile "jlt6"  "(setq jkey 26)(done_dialog)")    (action_tile "jlt7"  "(setq jkey 27)(done_dialog)")    (action_tile "jlt8"  "(setq jkey 28)(done_dialog)")    (action_tile "jlt9"  "(setq jkey 29)(done_dialog)")    (action_tile "jco1"  "(setq jkey 31)(done_dialog)")    (action_tile "jco2"  "(setq jkey 32)(done_dialog)")    (action_tile "jco3"  "(setq jkey 33)(done_dialog)")    (action_tile "jco4"  "(setq jkey 34)(done_dialog)")    (action_tile "jco5"  "(setq jkey 35)(done_dialog)")    (action_tile "jco6"  "(setq jkey 36)(done_dialog)")    (action_tile "jco7"  "(setq jkey 37)(done_dialog)")    (action_tile "jco8"  "(setq jkey 38)(done_dialog)")    (action_tile "jco9"  "(setq jkey 39)(done_dialog)")    (action_tile "jco10" "(setq jkey 40)(done_dialog)")    (action_tile "jco11" "(setq jkey 41)(done_dialog)")    (action_tile "jco12" "(setq jkey 42)(done_dialog)")    (action_tile "jco13" "(setq jkey 43)(done_dialog)")    (action_tile "jco14" "(setq jkey 44)(done_dialog)")    (action_tile "jco15" "(setq jkey 45)(done_dialog)")    (action_tile "jco16" "(setq jkey 46)(done_dialog)")    (action_tile "jco17" "(setq jkey 47)(done_dialog)")    (action_tile "jco18" "(setq jkey 48)(done_dialog)")    (action_tile "pds_key" "(setq jkey 98)(done_dialog)")    (action_tile "help"  "(help_jjl)")    (setq xxx (start_dialog))  )  (action_tile "accept" "(done_dialog)")  (done_dialog)  (jsel_run_l jkey))(defun BLOCK-LIST()(acad_helpdlg "BLK-LIST.hlp" "fl"))(defun GET-NAME(/ keyy bna)   (setvar "OSMODE" 0)   (setq keyy 1)   (if (= bl_name1 nil)(setq bnam "FL240")(setq bnam bl_name1))   (while keyy      (prompt "\n Set Block name of Light <")(prin1 BNAM)      (setq bna (getstring "> / ? : "))      (if (= bna "?")         (BLOCK-LIST)         (progn            (if (or (= bna nil)(= bna ""))                (setq bna bnam)                (setq bnam bna)            )            (setq bnam (strcase bnam))            (setq keyy nil)         )      )   )   (setq bl_name1 bnam))(setq jinbox_rm(load_dialog "jroom"))(defun help_lid()(acad_helpdlg "lisp-hlp.hlp" "lid"))(defun room_reset_1()  (set_tile "room_cal"    (rtos (setq room_cal (/ (* room_ea room_lum room_f room_u) room_a )) 2 2))  (set_tile "room_pus" (rtos (* (/ room_cal room_lux) 100) 2 2)))(defun room_reset_2()  (set_tile "room_ea"    (rtos (setq room_ea (/ (* room_a room_lux) (* room_lum room_u room_f))) 2 2))  (set_tile "room_cal"    (rtos (setq room_cal (/ (* room_ea room_lum room_f room_u) room_a)) 2 2))  (set_tile "room_pus" (rtos (* (/ room_cal room_lux) 100) 2 2)))(defun room_reset_3()  (setq room_d (/ room_a (* room_h (+ room_w room_l))))  (get_roomds room_d)  (set_tile "room_d" (strcat (rtos room_d 2 2) "=>" room_ds)))(defun get_roomds (a)  (cond    ((< a 0.7)  (setq room_ds "J"))    ((< a 0.9)  (setq room_ds "I"))    ((< a 1.125)(setq room_ds "H"))    ((< a 1.375)(setq room_ds "G"))    ((< a 1.75) (setq room_ds "F"))    ((< a 2.25) (setq room_ds "E"))    ((< a 2.75) (setq room_ds "D"))    ((< a 3.5)  (setq room_ds "C"))    ((< a 4.5)  (setq room_ds "B"))    (T (setq room_ds "A"))  ))(defun room_recet_4()  (if (= (strcase bnam) "DETS")    (progn      (set_tile "room_det_u" (rtos (/ room_a 150) 2 2))      (set_tile "room_det_o" (rtos (/ room_a 75) 2 2))    )    (if (= (strcase bnam) "DETC")      (progn        (set_tile "room_det_u" (rtos (/ room_a 60) 2 2))        (set_tile "room_det_o" (rtos (/ room_a 30) 2 2))      )      (progn        (set_tile "room_det_u" (rtos (/ room_a 70) 2 2))        (set_tile "room_det_o" (rtos (/ room_a 35) 2 2))      )    )  ))(defun room_img_set(a / img_name x y)  (setq img_name (strcat "sym(" a ")"))  (setq x (dimx_tile "ltg_img"))  (setq y (dimy_tile "ltg_img"))  (start_image "ltg_img")  (fill_image 0 0 x y 7)  (fill_image 0 0 x y 0)  (slide_image 0 0 x y img_name)  (end_image))(defun ltg_set_name(a)  (set_tile "ltg_sel" a))(defun jget_img(/ key)  (setq key nil)  (new_dialog "jinroom_ltg" jinbox_rm)  (set_tile "ltg_sel" (strcase bnam))  (mode_tile "ltg_sel" 2)  (action_tile "fl120"  "(setq bnam $key)(done_dialog)")  (action_tile "fl120b"  "(setq bnam $key)(done_dialog)")  (action_tile "fl220"  "(setq bnam $key)(done_dialog)")  (action_tile "fl420"  "(setq bnam $key)(done_dialog)")  (action_tile "fl140"  "(setq bnam $key)(done_dialog)")  (action_tile "fl140b"  "(setq bnam $key)(done_dialog)")  (action_tile "fl240"  "(setq bnam $key)(done_dialog)")  (action_tile "fl340"  "(setq bnam $key)(done_dialog)")  (action_tile "fl440"  "(setq bnam $key)(done_dialog)")  (action_tile "fl120d"  "(setq bnam $key)(done_dialog)")  (action_tile "fl120bd"  "(setq bnam $key)(done_dialog)")  (action_tile "fl220d"  "(setq bnam $key)(done_dialog)")  (action_tile "fl420d"  "(setq bnam $key)(done_dialog)")  (action_tile "fl140d"  "(setq bnam $key)(done_dialog)")  (action_tile "fl140bd"  "(setq bnam $key)(done_dialog)")  (action_tile "fl240d"  "(setq bnam $key)(done_dialog)")  (action_tile "fl340d"  "(setq bnam $key)(done_dialog)")  (action_tile "fl440d"  "(setq bnam $key)(done_dialog)")  (action_tile "ildown"   "(setq bnam $key)(done_dialog)")  (action_tile "ildo-d"   "(setq bnam $key)(done_dialog)")  (action_tile "il60"   "(setq bnam $key)(done_dialog)")  (action_tile "ild"   "(setq bnam $key)(done_dialog)")  (action_tile "ilb"   "(setq bnam $key)(done_dialog)")  (action_tile "ilbd"   "(setq bnam $key)(done_dialog)")  (action_tile "ile"   "(setq bnam $key)(done_dialog)")  (action_tile "detd"   "(setq bnam $key)(done_dialog)")  (action_tile "dets"   "(setq bnam $key)(done_dialog)")  (action_tile "detc"   "(setq bnam $key)(done_dialog)")  (action_tile "ltg_sel" "(setq bnam $value)")  (start_dialog)  (action_tile "accept" "(done_dialog)")  (set_tile "jblm" (strcase bnam))  (room_img_set bnam)  (mode_tile "jblm" 2)  (room_recet_4))(defun c:liderr()  (setq lid_key nil        room_h nil        room_d nil        room_u nil        room_f nil        room_lux nil        room_lum nil  ))(defun C:LID(/ xxx olds fp1 fp2 fp3 fp4 angh angv arh arv hd vd             fp5 X1 X2 X3 Y1 Y2 Y3)  (POINT-LIB)   (setq xxx 3)  (setq lid_key nil)  (if (= jinbox_rm nil)(setq jinbox_rm(load_dialog "jroom")))  (new_dialog "jinroom" jinbox_rm)  (set_tile "room_w"   (rtos (setq room_w (/ (distance fp1 fp4) 1000)) 2 2))  (set_tile "room_l"   (rtos (setq room_l (/ (distance fp1 fp2) 1000)) 2 2))  (set_tile "room_a"   (rtos (setq room_a (/ (getvar "AREA") 1000000)) 2 2))  (if (= room_h nil)(setq room_h 2.2))  (set_tile "room_h" (rtos room_h 2 2))  (room_reset_3)  (if (= room_u nil)(setq room_u 0.7))  (if (= room_f nil)(setq room_f 0.7))  (if (= room_lux nil)(setq room_lux 300))  (if (= room_lum nil)(setq room_lum 6400))  (set_tile "room_u"   (rtos room_u 2 2))  (set_tile "room_f"   (rtos room_f 2 2))  (set_tile "room_lux" (rtos room_lux 2 2))  (set_tile "room_lum" (rtos room_lum 2 2))  (room_reset_2)  (if (= bl_name1 nil)(setq bnam "FL240")(setq bnam bl_name1))  (set_tile "jblm" (strcase bnam))  (room_img_set bnam)  (mode_tile "jblm" 2)  (room_recet_4)  (while (> xxx 2)    (action_tile "room_ea"  "(setq room_ea  (atof $value))(room_reset_1)")    (action_tile "room_f"   "(setq room_f   (atof $value))(room_reset_2)")    (action_tile "room_u"   "(setq room_u   (atof $value))(room_reset_2)")    (action_tile "room_lux" "(setq room_lux (atof $value))(room_reset_2)")    (action_tile "room_lum" "(setq room_lum (atof $value))(room_reset_2)")    (action_tile "room_h"   "(setq room_h   (atof $value))(room_reset_3)")    (action_tile "img_ty" "(jget_img)")    (action_tile "jblm" "(setq bnam $value)")    (action_tile "jxno" "(jgetname 1)(done_dialog)")    (action_tile "jxdi" "(jgetname 2)(done_dialog)")    (action_tile "jsin" "(jgetname 3)(done_dialog)")    (action_tile "pds_key" "(setq lid_key 98)(done_dialog)")    (action_tile "help" "(help_lid)")    (setq xxx (start_dialog))  )  (action_tile "accept" "(setq lid_key 99)(done_dialog)")  (action_tile "cancel" "(setq lid_key 100)(done_dialog)")  (command "undo" "group")  (j_room lid_key)  (command "undo" "end"))(defun jgetname(a)(setq lid_key a)(setq bnam (get_tile "jblm")))(defun j_room(lid_key)  (setq olderr  *error* *error* rmerror chm 0)  (setq olds nil)(old-inte)  (cond    ((= lid_key 3)(j_lid3))    ((= lid_key 2)(j_lid2))    ((= lid_key 1)(j_lid1))    ((= lid_key 0)(j_lid0))    ((= lid_key 98)(pds_key))    ((= lid_key 99)(prompt "\n Select was O.K, but Program is Terminated, If error's Typing LIDERR.."))    ((= lid_key 100)(prompt "\n Select was CANCEL, Program is Terminated, If error's Typing LIDERR.."))    (T (prompt "\n Select was CANCEL, Program is Terminated, If error's Typing LIDERR.."))  )  (setq bl_name1 bnam)  (new-sn))(defun rmerror (s)        (if (/= s "Function cancelled")                (princ (strcat "\nError: " s))        )        (setvar "osmode" olds)        (setvar "orthomode" oldo)        (setq p nil)        (setq *error* olderr)        (princ))(defun dtr (a)(* pi (/ a 180.0)))(defun rtd (a)(/ (* a 180.0) PI))(defun old-inte()(setq olds(getvar "OSMODE"))(setvar "OSMODE" 33))(defun old-non()(setq olds(getvar "OSMODE"))(setvar "OSMODE" 0))(defun new-sn()(setvar "OSMODE" olds))(DEFUN J_LID1()  (ARR-CONT)   (setvar "OSMODE" 0)  (setq ana ang        ANGH (angle FP4 FP1)        ANGV (angle FP2 FP1)        HD (distance FP1 FP4)        VD (distance FP1 FP2)        HDD (/ HD (* HN 2.0))        VDD (/ VD (* VN 2.0))        ARH (* 2 HDD)        ARV (* 2 VDD)        IP (polar FP3 ANGV VDD)        IP (polar IP ANGH HDD)  )  (command ".insert" bnam IP "" "" ANG)  (if (> VN 1.1)    (if (> hn 1)      (command "ARRAY" "L" "" "R" VN HN ARV ARH)      (command "array" "l" "" "r" vn hn arv)    )    (if (> hn 1)      (command "ARRAY" "L" "" "R" VN HN ARH )    )  )  (prompt "\n Hor-Dis = : ")(prin1 arh)(prompt " Ver-Dis = :")(prin1 arv))(DEFUN J_LID2()  (setq po-mid (inters fp1 fp3 fp2 fp4))  (if (= hsid nil)(setq hsid 3000.0))  (prompt "\n How many OFFSET in Horizontal {---} <")(prin1 hsid)  (prompt "> : ")(setq hsize (getint))  (if (or (= hsize nil)(= hsize ""))(setq hsize hsid))(setq hsid hsize)  (if (= vsid nil)(setq vsid 3000.0))  (prompt "\n How many OFFSET in Vertical {|||} <")(prin1 vsid)  (prompt "> : ")(setq vsize (getint))  (if (or (= vsize nil)(= vsize ""))(setq vsize vsid))(setq vsid vsize)  (setq hna (/ (distance fp4 fp1) hsize))  (setq vna (/ (distance fp1 fp2) vsize))  (if (> (rem hna 1.0) 0.5)    (setq hna (1+ (fix hna)))    (setq hna (fix hna))  )  (if (> (rem vna 1.0) 0.5)    (setq vna (1+ (fix vna)))    (setq vna (fix vna))  )  (if (< vna 1)(setq vna 1))  (if (< hna 1)(setq hna 1))  (ARR-CONT)  (setq hhh (/ (* (- hna 1) hsize) 2))  (setq vvv (/ (* (- vna 1) vsize) 2))  (setq po-sta (list (- (car po-mid) hhh) (- (cadr po-mid) vvv)))  (setvar "OSMODE" 0)  (command ".insert" bnam po-sta "" "" ang)  (if (> vna 1.0)    (if (> hna 1.0)      (command "array" "last" "" "r" vna hna (list 0 0) (list hsize vsize))      (command "array" "last" "" "r" vna hna vsize)    )    (if (> hna 1.0)      (command "array" "last" "" "r" vna hna hsize)    )  )  (prompt "\n Hor-Dis = : ")(prin1 hsize)  (prompt " Ver-Dis = :")(prin1 vsize))(DEFUN J_LID3()  (setvar "OSMODE" 0)  (grdraw fp1 fp3 6)  (setq l-ang (angle fp1 fp3))  (setq l-dis (/ (distance fp1 fp3) 2))  (setq fp5 (polar fp1 l-ang l-dis))  (if (= ana nil)(setq ana 0))  (prompt "\n How To Rotaion for Lighting Fixture { Angle } <")(prin1 ana)  (prompt "> : ")(setq ang (getint))  (if (or (= ang nil)(= ang ""))(setq ang ana))  (SETQ ANA ANG)(command ".insert" BNAM FP5 "" "" ANG))(defun point-lib(/ point1 point2 x1 x2 y1 y2 lx hx ly hy)                     (old-endint)   (prompt "\n Pick First corner <")(prin1 point_1)   (setq POINT1 (getpoint "> : "))   (if (= point1 nil)(setq point1 point_1))   (prompt "\n Pick Second corner <")(prin1 point_2)   (setq POINT2 (getcorner POINT1 "> : "))   (if (= point2 nil)(setq point2 point_2))   (setq point_1 point1 point_2 point2)   (setvar "OSMODE" 0)   (setq X1 (car POINT1) X2 (car POINT2) Y1 (cadr POINT1) Y2 (cadr POINT2))   (if (> x1 x2) (progn (setq lx x2 hx x1)) (progn (setq lx x1 hx x2)))   (if (> y1 y2) (progn (setq ly y2 hy y1)) (progn (setq ly y1 hy y2)))   (setq fp3 (list lx ly) fp4 (list lx hy) fp1 (list hx hy) fp2 (list hx ly))   (grdraw fp1 fp2 6)   (grdraw fp2 fp3 6)   (grdraw fp3 fp4 6)   (grdraw fp4 fp1 6)   (command "area" fP1 fP2 fP3 fP4 "")   (setq r-area(/ (getvar "area") 1000000.0))   (setq r-width(rtos (/ (distance fp1 fp4) 1000.0) 2 1))   (setq r-lenth(rtos (/ (distance fp1 fp2) 1000.0) 2 1))   (prompt "\n The Room Area is -> W:")(prin1 r-width)                       (prompt " x L:")(prin1 r-lenth)   (prompt " = AREA:")(prin1 (rtos r-area 2 2))(prompt "(m2) .., If error's Typing LIDERR..")   (new-sn))(defun arr-cont()   (if (= hna nil)(setq hna 2))  (prompt "\n How many LIGHT in Horizontal {---} <")(prin1 hna)  (prompt "> : ")(setq hn (getint))  (if (or (= hn nil)(= hn ""))(setq hn hna))(setq hna hn)  (if (= vna nil)(setq vna 2))  (prompt "\n How many LIGHT in Vertical {|||} <")(prin1 vna)  (prompt "> : ")(setq vn (getint))  (if (or (= vn nil)(= vn ""))(setq vn vna))(setq vna vn)  (if (= ana nil)(setq ana 0))  (prompt "\n How To Rotaion for Lighting Fixture {Angle} <")(prin1 ana)  (prompt "> : ")(setq ang (getint))  (if (or (= ang nil)(= ang ""))(setq ang ana)))(defun c:lid1()(point-lib)(get-name)(old-non)(j_lid1)(new-sn))(defun c:lid2()(point-lib)(get-name)(old-non)(j_lid2)(new-sn))(defun c:lid3()(point-lib)(get-name)(old-non)(j_lid3)(new-sn))(defun jli_ch(a)  (cond    ((= a 1) (jli_ch_la entty))       ((= a 2) (jli_ch_co entty))       ((= a 3) (jli_ch_lt entty))       ((= a 4) (jli_ch_po entty))       ((= a 51)(jli_ch_te1 entty))      ((= a 52)(jli_ch_te2 entty))      ((= a 53)(jli_ch_te3 entty))      ((= a 54)(jli_ch_te4 entty))      ((= a 6) (jli_ch_dt entty))       ((= a 7) (jblock_s7 x2))          ((= a 8) (jli_ch_ep entty))       ((= a 9) (jli_ch_va entty))       ((= a 98)(pds_key))             ))(defun jli_ch_la(a)  (done_dialog)  (setq name (getstring "\n Enter Change-Layer Name ? : "))  (command "CHPROP" a "" "LAYER" name ""))(defun jli_ch_co(a)  (setq name (getstring "\n Enter Change-Color Name ? : "))  (command "CHPROP" a "" "COLOR" name ""))(defun jli_ch_lt(a)  (setq name (getstring "\n Enter Change-Ltype Name ? : "))  (command "CHPROP" a "" "LTYPE" name ""))(defun jli_ch_po(a)  (setq p1 (getpoint "\n Pick Change-Point ? : "))  (command "CHANGE" a "" p1))(defun jli_ch_te1(a)  (setq _text (getstring "\n New Text ? : " 1))  (command "CHANGE" a "" "" "" "" "" "" _text))(defun jli_ch_te2(a)  (setq p1 (getpoint "\n Pick Change-Point ? : "))  (command "CHANGE" a "" p1 "" "" "" "" ""))(defun jli_ch_te3(a)  (setq _hi (getint "\n New Higth ? : "))  (command "CHANGE" a "" "" "" "" _hi "" ""))(defun jli_ch_te4(a)  (setq _st (getstring "\n New Style ? : "))  (command "CHANGE" a "" "" "" _st "" "" ""))(if (= nil jblock_s7)(load"JBLOCK"))(defun jli_ch_ep(a)  (command "EXPLODE" a))(defun jli_ch_va(a)  (setq _text (getstring "\n New Dimension-Text ? : " 1))  (command "DIM1" "NEW" _text a ""))(defun help_li()(acad_helpdlg "lisp-hlp.hlp" "list"))(defun c:jlist()(c:li))(defun C:LI(/ entty list1 list2)   (old-non)   (setq entty (entsel "\nSelect object/<None>: "))   (if entty      (setq list1 (cdr (assoc 0 (setq list2 (entget (car entty))))))   )   (if (= jinbox_li nil)(setq jinbox_li(load_dialog "jlist")))   (setq ch_key nil)   (cond      ((= list1 "LINE")    (list_li list2))      ((= list1 "INSERT")  (list_bl list2))      ((= list1 "CIRCLE")  (list_ci list2))      ((= list1 "POLYLINE")(list_pl list2))      ((= list1 "LWPOLYLINE")(list_pl list2))      ((= list1 "TEXT")    (list_te list2))      ((= list1 "MTEXT")   (list_te list2))      ((= list1 "ARC")     (list_ci list2))      ((= list1 "DIMENSION")(list_di list2))      (T (list_oth entty))   )   (if (= entty nil)      (progn		(prompt "\n Select is Cancel -- Now [List] command")		(command "list")	  )   )   (done_dialog)   (new-sn))(defun li_find(a b)(setq data1(cdr (assoc a b))))(defun f_x(a) (setq datap(rtos (car a) 2 2)))(defun f_y(a) (setq datap(rtos (cadr a) 2 2)))(defun f_z(a) (setq datap(rtos (caddr a) 2 2)))(defun list_oth(A)(command "list" "si" a )(prin1))(defun list_li(x / ch_key)  (new_dialog "jinlist_li" jinbox_li)  (setq x0 (li_find 0 x))  (setq x8 (li_find 8 x))  (setq x6 (li_find 6 x))  (setq x62 (li_find 62 x))  (if (= x6 nil)    (setq x6 "BYLAYER")    (if (= x6 0)      (setq x6 "BYBLOCK")    )  )  (if (= x62 nil)    (setq x62 "BYLAYER")    (if (= x62 0)      (setq x62 "BYBLOCK")      (setq x62 (rtos x62 2 0))    )  )  (setq x10 (li_find 10 x))  (setq x11 (li_find 11 x))  (setq xa (rtos (rtd (angle x10 x11)) 2 8))  (setq x12 (rtos (distance x10 x11) 2 8))  (setq x10 (strcat (f_x x10) ", " (f_y x10) ", " (f_z x10)))  (setq x11 (strcat (f_x x11) ", " (f_y x11) ", " (f_z x11)))  (set_tile "jli0"  x0)  (set_tile "jli8"  x8)  (set_tile "jli6"  x6)  (set_tile "jli62" x62)  (set_tile "jli10" x10)  (set_tile "jli11" x11)  (set_tile "jli12" x12)  (set_tile "jlia"  xa)  (action_tile "ch_la" "(setq ch_key 1)(done_dialog)")  (action_tile "ch_co" "(setq ch_key 2)(done_dialog)")  (action_tile "ch_lt" "(setq ch_key 3)(done_dialog)")  (action_tile "ch_po" "(setq ch_key 4)(done_dialog)")  (action_tile "pds_key" "(setq ch_key 98)(done_dialog)")  (action_tile "help"  "(help_li)")  (setq xxx(start_dialog))  (action_tile "accept" "(done_dialog)")  (if ch_key (progn (done_dialog)(jli_ch ch_key))))(defun list_bl(x)  (new_dialog "jinlist_bl" jinbox_li)  (setq x0 (li_find 0 x))  (setq x2 (li_find 2 x))  (setq x8 (li_find 8 x))  (setq x41 (rtos (li_find 41 x) 2 8))  (setq x42 (rtos (li_find 42 x) 2 8))  (setq x43 (rtos (li_find 43 x) 2 8))  (setq x50 (rtos (rtd (li_find 50 x)) 2 8))  (setq x10 (li_find 10 x))  (setq x10 (strcat (f_x x10) ", " (f_y x10) ", " (f_z x10)))  (set_tile "jli0"  x0)  (set_tile "jli2"  x2)  (set_tile "jli8"  x8)  (set_tile "jli41" x41)  (set_tile "jli42" x42)  (set_tile "jli43" x43)  (set_tile "jli50" x50)  (set_tile "jli10" x10)  (action_tile "ch_la" "(setq ch_key 1)(done_dialog)")  (action_tile "ch_s7" "(setq ch_key 7)(done_dialog)")  (action_tile "ch_po" "(setq ch_key 4)(done_dialog)")  (action_tile "ch_ep" "(setq ch_key 8)(done_dialog)")  (action_tile "pds_key" "(setq ch_key 98)(done_dialog)")  (action_tile "help"  "(help_li)")  (setq xxx(start_dialog))  (action_tile "accept" "(done_dialog)")  (if ch_key (progn (done_dialog)(jli_ch ch_key))))(defun list_ci(x)  (new_dialog "jinlist_ci" jinbox_li)  (setq x0 (li_find 0 x))  (setq x8 (li_find 8 x))  (setq x6 (li_find 6 x))  (setq x62 (li_find 62 x))  (if (= x6 nil)    (setq x6 "BYLAYER")    (if (= x6 0)      (setq x6 "BYBLOCK")    )  )  (if (= x62 nil)    (setq x62 "BYLAYER")    (if (= x62 0)      (setq x62 "BYBLOCK")      (setq x62 (rtos x62 2 0))    )  )  (setq x40 (rtos (li_find 40 x) 2 8))  (setq x10 (li_find 10 x))  (setq x10 (strcat (f_x x10) ", " (f_y x10) ", " (f_z x10)))  (set_tile "jli0"  x0)  (set_tile "jli8"  x8)  (set_tile "jli6"  x6)  (set_tile "jli40" x40)  (set_tile "jli62" x62)  (set_tile "jli10" x10)  (action_tile "ch_la" "(setq ch_key 1)(done_dialog)")  (action_tile "ch_co" "(setq ch_key 2)(done_dialog)")  (action_tile "ch_lt" "(setq ch_key 3)(done_dialog)")  (action_tile "ch_po" "(setq ch_key 4)(done_dialog)")  (action_tile "pds_key" "(setq ch_key 98)(done_dialog)")  (action_tile "help"  "(help_li)")  (setq xxx(start_dialog))  (action_tile "accept" "(done_dialog)")  (if ch_key (progn (done_dialog)(jli_ch ch_key))))(defun find_flag(a)  (setq f72 (li_find 72 a))  (setq f73 (li_find 73 a))  (cond    ((and (= f72 1)(= f73 0))(setq x7x "Center"))    ((and (= f72 2)(= f73 0))(setq x7x "Right"))    ((and (= f72 3)(= f73 0))(setq x7x "Align"))    ((and (= f72 4)(= f73 0))(setq x7x "Middle"))    ((and (= f72 5)(= f73 0))(setq x7x "Fit"))    ((and (= f72 0)(= f73 1))(setq x7x "BL"))    ((and (= f72 1)(= f73 1))(setq x7x "BC"))    ((and (= f72 2)(= f73 1))(setq x7x "BR"))    ((and (= f72 0)(= f73 2))(setq x7x "ML"))    ((and (= f72 1)(= f73 2))(setq x7x "MC"))    ((and (= f72 2)(= f73 2))(setq x7x "MR"))    ((and (= f72 0)(= f73 3))(setq x7x "TL"))    ((and (= f72 1)(= f73 3))(setq x7x "TC"))    ((and (= f72 2)(= f73 3))(setq x7x "TR"))    (T (setq x7x "Normal"))  )  (if (or (< 0 f72 5)(< 0 f73 4))      (setq x10 (li_find 11 x))      (setq x10 (li_find 10 x))  )  (setq x10 (strcat (f_x x10) ", " (f_y x10) ", " (f_z x10))))(defun list_te(x)  (new_dialog "jinlist_te" jinbox_li)  (setq x0 (li_find 0 x))  (setq x1 (li_find 1 x))  (setq x7 (li_find 7 x))  (setq xft1 (strcase (cdr (assoc 3 (tblsearch "STYLE" x7)))))  (setq xft2 (strcase (cdr (assoc 4 (tblsearch "STYLE" x7)))))  (if (or (= xft2 "")(= xft2 nil))    (setq xft xft1)    (setq xft (strcat xft1 "+" xft2))  )  (setq x8 (li_find 8 x))  (setq x6 (li_find 6 x))  (setq x62 (li_find 62 x))  (if (= x6 nil)    (setq x6 "BYLAYER")    (if (= x6 0)      (setq x6 "BYBLOCK")    )  )  (if (= x62 nil)    (setq x62 "BYLAYER")    (if (= x62 0)      (setq x62 "BYBLOCK")      (setq x62 (rtos x62 2 0))    )  )  (setq x40 (rtos (li_find 40 x) 2 8))  (setq x41 (rtos (li_find 41 x) 2 8))  (setq x50 (rtos (rtd (li_find 50 x)) 2 8))  (find_flag x)  (set_tile "jli0"  x0)  (set_tile "jli1"  x1)  (set_tile "jli7"  x7)  (set_tile "jli8"  x8)  (set_tile "jli6"  x6)  (set_tile "jli40" x40)  (set_tile "jli41" x41)  (set_tile "jli50" x50)  (set_tile "jli62" x62)  (set_tile "jli10" x10)  (set_tile "jli7x" x7x)  (set_tile "jlift" xft)  (action_tile "ch_la" "(setq ch_key 1)(done_dialog)")  (action_tile "ch_co" "(setq ch_key 2)(done_dialog)")  (action_tile "ch_te" "(setq ch_key 51)(done_dialog)")  (action_tile "ch_po" "(setq ch_key 52)(done_dialog)")  (action_tile "ch_hi" "(setq ch_key 53)(done_dialog)")  (action_tile "ch_st" "(setq ch_key 54)(done_dialog)")  (action_tile "pds_key" "(setq ch_key 98)(done_dialog)")  (action_tile "help"  "(help_li)")  (setq xxx(start_dialog))  (action_tile "accept" "(done_dialog)")  (if ch_key (progn (done_dialog)(jli_ch ch_key))))(defun list_pl(x)  (new_dialog "jinlist_pl" jinbox_li)  (setq x0 (li_find 0 x))  (setq x8 (li_find 8 x))  (setq x6 (li_find 6 x))  (setq x62 (li_find 62 x))  (if (= x6 nil)    (setq x6 "BYLAYER")    (if (= x6 0)      (setq x6 "BYBLOCK")    )  )  (if (= x62 nil)    (setq x62 "BYLAYER")    (if (= x62 0)      (setq x62 "BYBLOCK")      (setq x62 (rtos x62 2 0))    )  )  (setq x40 (rtos (li_find 40 x) 2 8))  (setq x41 (rtos (li_find 41 x) 2 8))  (set_tile "jli0"  x0)  (set_tile "jli8"  x8)  (set_tile "jli6"  x6)  (set_tile "jli62" x62)  (set_tile "jli40" x40)  (set_tile "jli41" x41)  (action_tile "ch_la" "(setq ch_key 1)(done_dialog)")  (action_tile "ch_co" "(setq ch_key 2)(done_dialog)")  (action_tile "ch_lt" "(setq ch_key 3)(done_dialog)")  (action_tile "ch_ep" "(setq ch_key 8)(done_dialog)")  (action_tile "pds_key" "(setq ch_key 98)(done_dialog)")  (action_tile "help"  "(help_li)")  (setq xxx(start_dialog))  (action_tile "accept" "(done_dialog)")  (if ch_key (progn (done_dialog)(jli_ch ch_key))))(defun list_di(x)  (new_dialog "jinlist_di" jinbox_li)  (setq x0 (li_find 0 x))  (setq x8 (li_find 8 x))  (setq x6 (li_find 6 x))  (setq x62 (li_find 62 x))  (if (= x6 nil)    (setq x6 "BYLAYER")    (if (= x6 0)      (setq x6 "BYBLOCK")    )  )  (if (= x62 nil)    (setq x62 "BYLAYER")    (if (= x62 0)      (setq x62 "BYBLOCK")      (setq x62 (rtos x62 2 0))    )  )  (setq x13 (li_find 13 x))  (setq x14 (li_find 14 x))  (setq x12 (rtos (distance x13 x14) 2 8))  (setq x13 (strcat (f_x x13) ", " (f_y x13) ", " (f_z x13)))  (setq x14 (strcat (f_x x14) ", " (f_y x14) ", " (f_z x14)))  (setq x1 (li_find 1 x))  (if (= x1 "")(setq x1 "Is Default"))  (set_tile "jli0"  x0)  (set_tile "jli8"  x8)  (set_tile "jli6"  x6)  (set_tile "jli62" x62)  (set_tile "jli13" x13)  (set_tile "jli14" x14)  (set_tile "jli12" x12)  (set_tile "jli1"  x1)  (action_tile "ch_la" "(setq ch_key 1)(done_dialog)")  (action_tile "ch_co" "(setq ch_key 2)(done_dialog)")  (action_tile "ch_ep" "(setq ch_key 8)(done_dialog)")  (action_tile "ch_va" "(setq ch_key 9)(done_dialog)")  (action_tile "pds_key" "(setq ch_key 98)(done_dialog)")  (action_tile "help"  "(help_li)")  (setq xxx(start_dialog))  (action_tile "accept" "(done_dialog)")  (if ch_key (progn (done_dialog)(jli_ch ch_key))))(setq jinbox_li(load_dialog "jlist")) (defun c:cal1( / act_key set_dis back_sp change_calstr cal_answer              _item _len _cut _cnt _str _chkdot _chknum _chk _s _dia              _dianame _keylist)    (defun act_key(LIST)        (foreach _item LIST            (action_tile _item              "(setq @CALSTR (strcat @CALSTR $key))(set_dis)")        )    )    (defun set_dis()        (setq _len (strlen @CALSTR))        (setq _cut (- _len 17))        (if (< _cut 1)            (setq _cut 1))        (setq _str (substr @CALSTR  _cut 20))        (set_tile "dis" _str)    )    (defun back_sp()        (setq _len (strlen @CALSTR))        (if (> _len 0)            (setq @CALSTR (substr @CALSTR 1 (1- _len)))        )        (set_dis)    )    (defun cal_answer()        (setq _str (change_calstr))        (setq test _str)        (setq _str (c:cal _str))        (if _str            (progn                (setq _str (rtos _str 2 5))                (set_tile "answer" _str)            )            (set_tile "answer" "!!Error")        )    )    (defun change_calstr()        (setq _cnt 1              _chk 'T              _chknum nil              _chkdot nil              _str ""        )        (setq _len (strlen @CALSTR))        (if (< _len 1)            (setq _chk nil))        (repeat _len            (setq _s (strcat (substr @CALSTR _cnt 1)))            (cond                ((and (>= _s "0") (<= _s "9"))                    (setq _str (strcat _str _s))                    (setq _chknum 'T)                )                ((= _s ".")                    (setq _str (strcat _str _s))                    (setq _chknum nil                          _chkdot 'T                    )                )                ('T                    (if (and (= _chknum 'T)(= _chkdot nil))                        (setq _str (strcat _str ".0" _s))                        (setq _str (strcat _str _s))                    )                    (setq _chknum nil                          _chkdot nil                    )                )            )            (setq _cnt (1+ _cnt))        )        (if (and (= _chknum 'T) (= _chkdot nil))            (setq _str (strcat _str ".0"))        )        _str    )    (_autoxload "geomcal")    (setq _dia (load_dialog "jcal1"))    (setq _dianame (new_dialog "cal" _dia))    (setq _keylist '("0" "1" "2" "3" "4" "5" "6" "7" "8" "9" "+" "-" "/" "*"                     "(" ")" "."))    (setq @CALSTR "")    (act_key _keylist)    (action_tile "<" "(back_sp)")    (action_tile "=" "(cal_answer)")    (action_tile "clear" "(setq @CALSTR \"\") (set_dis) (set_tile \"answer\" \"\")")    (start_dialog)    (unload_dialog _dia))(princ);;;------------------------------                    /;;; Make by Park Dae-sig                             /;;; Date is 1995-00-00                               /;;; Where is "JIN" Electric co.                      /;;; (HP) 018-250-7324                                /;;;------------------------------                    /; - Last Up-Date is 1998-10-14 (P.D.S)               /;*****************************************************;;-------------------------------------------------------------------------(defun BLOCK-LIST()(acad_helpdlg "BLK-LIST.hlp" "fl"))(setq jinbox_ca(load_dialog "jcals")) ; Loading Dialog-Box(defun help_cals()(acad_helpdlg "lisp-hlp.hlp" "cals"))(defun set_cals_key (a)	(cond		((= a 1)(set_tile "cals_b1" "1"))		((= a 2)(set_tile "cals_b2" "1"))		((= a 3)(set_tile "cals_b3" "1"))		((= a 4)(set_tile "cals_b4" "1"))		((= a 5)(set_tile "cals_b5" "1"))		((= a 6)(set_tile "cals_b6" "1"))		((= a 7)(set_tile "cals_b7" "1"))		((= a 8)(set_tile "cals_b8" "1"))		(T nil)	))(defun C:CALS(/ cal_key)  (setq cal_key nil)  (if (= jinbox_ca nil)(setq jinbox_ca(load_dialog "jcals")))  (new_dialog "jincals" jinbox_ca)  (set_cals_key cals_key)  (action_tile "cals1" "(setq cal_key 1)(done_dialog)")  (action_tile "cals2" "(setq cal_key 2)(done_dialog)")  (action_tile "cals3" "(setq cal_key 3)(done_dialog)")  (action_tile "cals4" "(setq cal_key 4)(done_dialog)")  (action_tile "cals5" "(setq cal_key 5)(done_dialog)")  (action_tile "cals6" "(setq cal_key 6)(done_dialog)")  (action_tile "cals7" "(setq cal_key 7)(done_dialog)")  (action_tile "cals8" "(setq cal_key 8)(done_dialog)")  (action_tile "cals_b1" "(setq cal_key 1)(done_dialog)")  (action_tile "cals_b2" "(setq cal_key 2)(done_dialog)")  (action_tile "cals_b3" "(setq cal_key 3)(done_dialog)")  (action_tile "cals_b4" "(setq cal_key 4)(done_dialog)")  (action_tile "cals_b5" "(setq cal_key 5)(done_dialog)")  (action_tile "cals_b6" "(setq cal_key 6)(done_dialog)")  (action_tile "cals_b7" "(setq cal_key 7)(done_dialog)")  (action_tile "cals_b8" "(setq cal_key 8)(done_dialog)")  (action_tile "pds_key" "(setq cal_key 98)(done_dialog)")  (action_tile "help" "(help_cals)")  (action_tile "accept" "(setq cal_key cals_key)(done_dialog)")  (action_tile "cancel" "(setq cal_key 100)(done_dialog)")  (start_dialog);  (action_tile "accept" "(setq cal_key cals_key)(done_dialog)");  (action_tile "cancel" "(setq cal_key 100)(done_dialog)");  (if (= cal_key nil)(setq cal_key cals_key))  (if cal_key		(if (> 8 cal_key)			(setq cals_key  cal_key)		)  )  (j_calsx cal_key))(defun j_calsx(cal_key)  (setq olds nil)(old-non)  (cond    ((= cal_key 1)(j_cals))    ((= cal_key 2)(j_cals2))    ((= cal_key 3)(j_tamp3))    ((= cal_key 4)(j_call))    ((= cal_key 5)(j_cal6))    ((= cal_key 6)(j_cal60))    ((= cal_key 7)(j_t6))    ((= cal_key 98)(pds_key))    (T (prompt "\n Terminated............"))  )  (new-sn));===================================================================;;----------------------------STARTING OF LISP'S---------------------------------;;----------------------------setting's defuolt-------------------------------(defun dtr (a)(* pi (/ a 180.0)))(defun rtd (a)(/ (* a 180.0) PI))(defun old-non()(setq olds(getvar "OSMODE"))(setvar "OSMODE" 0))(defun new-sn()(setvar "OSMODE" olds));;-------------------------------------------------------------------------(defun count-sel-text(sel-t1 / n1 i count1 sel-tn sel-td)   (setq n1 (sslength sel-t1))   (setq i 0)   (setq count1 0)   (setq n1 (- n1 1))   (while (<= i n1)      (setq sel-tn (entget (ssname sel-t1 i)))      (setq sel-td (atof (cdr (assoc 1 sel-tn))))      (setq count1 (+ count1 sel-td))      (setq i (+ i 1))   )   (setq total-text count1)	(setq m_data (strcat "Calcurator Number is =[" (rtos count1) "]"))	(command "MODEMACRO" m_data)   (prin1));----------------------------------------------------------------------------(defun J_CALS (/ sel-t1 p1)   (prompt "\n\n ****PICK NUMBER MULTIPLE--(ONLY NUMBER)****")   (setq sel-t1 (sel_text))   (COUNT-SEL-TEXT sel-t1)   (prompt "\n\n ****  THANK YOU! CONTED NUMBER'S = [")   (prin1 total-text)   (prompt "] ****")   (prin1)   (setq total-text (rtos total-text 2))   (setq p1 (getpoint "\n ENTER TEXT START POINT ?"))   (command "TEXT" P1 "250" "" total-text));---------------------------------------------------------------------------(defun J_CALL (/ CA1 N1 I TT T1 T2 TOTAL ETT KKK TN)   (prompt "\n\n ><>< ****PICK NUMBER MULTIPLE--(ONLY NUMBER)**** ><><")   (setq sel-t1 (sel_text))   (COUNT-SEL-TEXT sel-t1)   (prompt "\n\n ****  THANK YOU! CONTED NUMBER'S = [")   (prin1 total-text)   (prompt "] ****")   (prin1)   (setq total-text (rtos total-text 2))   (setq ETT (entsel "\n ->->-> SELECT TEXT FOR TOTAL ? <-<-<-"))   (if ETT (command "CHANGE" ETT "" "" "" "" "" "" total-text)));--------------------------------------------------------------------------(defun J_TAMP3 (/ E1 NL N I CHM E2 T0 TT1 TT2 ED vvv ppp)   (setq OLDERR *ERROR* *ERROR* TEXERROR CHM 0)   (setq I 0)   (if (or (= amp_volt "")(= amp_volt nil))(setq amp_volt "380"))   (if (or (= amp_pole "")(= amp_pole nil))(setq amp_pole "3"))   (setq vvv amp_volt)   (setq ppp amp_pole)   (setq E1 (sel_text))   (prompt "\n Enter Pole ? (ex - 1P,3P) <")(prin1 ppp)   (setq amp_pole (getstring "> ? : "))   (if (or (= amp_pole nil)(= amp_pole ""))(setq amp_pole ppp))   (prompt "\n Enter Voltage ? (ex - 208,220,380,440) <")(prin1 vvv)   (setq amp_volt (getstring "> ? : "))   (if (or (= amp_volt nil)(= amp_volt ""))(setq amp_volt vvv))   (if E1      (progn         (setq NL (sslength E1))         (setq N (- NL 1))         (while (<= I N)            (setq ED (entget (setq E2 (ssname E1 I))))            (setq T0 (cdr (assoc 0 ED)))            (setq TT1 (assoc 1 ED))            (setq TT2 (cdr TT1))            (prompt "\nLoad is ")(prin1 TT2)(prompt "(kVA) -> ")            (if (= "3" amp_pole)(cals_amp3 amp_volt))            (if (= "1" amp_pole)(cals_amp1 amp_volt))            (prompt " Amp. is :")(prin1 TT)(prompt "(A)")            (if (= TT "0.0")               (prompt " !! Select is Not Number's !! ")               (progn                  (setq TT (strcat TT "A"))                  (setq ED (SUBST (CONS 1 TT) (assoc 1 ED) ED))                  (entmod ED)               ) ; progn end            ) ; if end            (setq I (1+ I))         ) ; while end      ) ; progn end   ) ; if end   (prin1)) ; defun end;--------------------------------------------------------------------------(defun cals_amp3(a)   (cond      ((= a "380")(setq TT (rtos (/ (atof TT2) (* 0.38 (sqrt 3))) 2 1)))      ((= a "440")(setq TT (rtos (/ (atof TT2) (* 0.44 (sqrt 3))) 2 1)))      ((= a "208")(setq TT (rtos (/ (atof TT2) (* 0.208 (sqrt 3))) 2 1)))      ((= a "220")(setq TT (rtos (/ (atof TT2) (* 0.22 (sqrt 3))) 2 1)))      (T (setq TT (rtos (/ (atof TT2) (* (/ (atof a) 1000) (sqrt 3))) 2 1)))   ));--------------------------------------------------------------------------(defun cals_amp1(a)   (cond      ((= a "380")(setq TT (rtos (/ (atof TT2) 0.38  ) 2 1)))      ((= a "440")(setq TT (rtos (/ (atof TT2) 0.44  ) 2 1)))      ((= a "208")(setq TT (rtos (/ (atof TT2) 0.208 ) 2 1)))      ((= a "220")(setq TT (rtos (/ (atof TT2) 0.22  ) 2 1)))      (T (setq TT (rtos (/ (atof TT2) (* (/ (atof a) 1000) (sqrt 3))) 2 1)))   ));--------------------------------------------------------------------------(defun J_CAL60 (/ K1 K2 K3 K4 K5 K6 tol kw fac flo par tl1 tl2 dl1 dl2 ts1                  ts2 l l1 t1 t2 tn tl dl df t-load d-load factor p1 p2 p3)   (setq TOL "TOTAL LOAD : "         KW  " (VA)"         FAC "DEMAND FACTOR : "         FLO "DEMAND LOAD : "         PAR " (%)"   );---------------Select Demand Load   (prompt "\n\t >>***** SELCET DEMAND-LOAD : *****<<")   (setq TS1 (CAR (entsel)))   (setq dem-total (atof (cdr (assoc 1 (entget TS1)))))   (prompt "\n Demand Load => [")(prin1 dem-total)(prompt "] ");---------------Select Total Load   (prompt "\n\t <<===== SELCET TOTAL-LOAD : =====>>")   (setq sel-t1(sel_text))   (count-sel-text sel-t1)   (setq gra-total total-text)   (prompt "\n Total Load => [")(prin1 gra-total)(prompt "] ");---------------Calcuration   (setq dem-factor (rtos (* (/ dem-total gra-total) 100) 2 2))   (setq g-total (strcat tol (rtos gra-total 2 0) kw))   (setq d-total (strcat flo (rtos dem-total 2 0) kw))   (setq factor  (strcat fac dem-factor par));---------------TEXT TYPING   (setq P1 (getpoint " TEXT START POINT?"))   (setq P2 (POLAR P1 (DTR 270) 450))   (setq P3 (POLAR P2 (DTR 270) 450))   (command "TEXT" P1 "250" "0" g-total)   (command "TEXT" P2 "250" "0" FACTOR)   (command "TEXT" P3 "250" "0" d-total));-------------------------------------------------------------------------(defun J_CALS2 (/ p l n e os as ns st s nsl osl sl si chf                  couu total total2 si CA1 N1 I TT T1 T2)   (prompt "\n\n ****PICK NUMBER MULTIPLE--(ONLY NUMBER)****")   (TERPRI)   (setq sel-t1 (sel_text))   (count2 sel-t1)   (count-sel-text sel-t1)   (setq TOTAL (rtos total-text 2 3))   (setq total2 (strcat total " / " (rtos couu 2 3)))   (prompt "\n\n ****  THANK YOU! CONTED NUMBER'S = [")   (prompt total2)   (prompt "] ****")   (prin1)   (setq P1 (getpoint "\n ENTER TEXT START POINT ?"))   (command "TEXT" P1 "250" "" TOTAL2));-------------------------------------------------------------------------(defun count2 (p)  (if p    (progn      (setq couu 0)      (setq osl 1 os "/")      (setq nsl 1 ns "")      (setq l 0 n (sslength p))      (while (< l n)         (setq e (entget (ssname p l)))         (setq chf nil si 1)         (setq s (cdr (setq as (assoc 1 e))))         (while (= osl (setq sl (strlen (setq st (substr s si osl)))))            (if (= st os)               (progn                  (setq s (strcat ns (substr s (+ si osl))))                  (setq chf t)                  (setq si (+ si nsl))               )               (setq si (1+ si))            )         )         (if chf (setq couu (+ (atof s) couu)))         (setq l (1+ l))      )    )  ));;;--------------------------------------------------------------------------;;;---------------MAIN SETTING---------------------(defun J_CAL6 (/  K1 K2 K3 K4 K5 K6 tol kw fac flo par tl1 tl2 dl1 dl2 ts1                  ts2 l l1 t1 t2 tn tl dl df t-load d-load factor p1 p2 p3)   (setq TOL "TOTAL LOAD : "         KW  " (VA)"         FAC "DEMAND FACTOR : "         FLO "DEMAND LOAD : "         PAR " (%)"   );---------------Select 60% Load-----------------   (prompt "\n\t >>***** SELCET 60%-LOAD : *****<<")   (setq sel-t1(sel_text))   (count-sel-text sel-t1)   (setq gra-total60 total-text)   (prompt "\n 60% Total Load => [")(prin1 gra-total60)(prompt "] ");---------------Select 100% Load-----------------   (prompt "\n\t <<===== SELCET TOTAL-LOAD : =====>>")   (setq sel-t1(sel_text))   (count-sel-text sel-t1)   (setq gra-total100 total-text)   (prompt "\n 100% Total Load => [")(prin1 gra-total100)(prompt "] ");---------------Calcuration -------------   (setq dem-total (+ (* gra-total60 0.6) gra-total100))   (setq gra-total (+ gra-total60 gra-total100))   (setq dem-factor (rtos (* (/ dem-total gra-total) 100) 2 2))   (setq g-total (strcat tol (rtos gra-total 2 0) kw))   (setq d-total (strcat flo (rtos dem-total 2 0) kw))   (setq factor  (strcat fac dem-factor par));---------------TEXT TYPING-----------------   (setq P1 (getpoint " TEXT START POINT?"))   (setq P2 (POLAR P1 (DTR 270) 450))   (setq P3 (POLAR P2 (DTR 270) 450))   (command "TEXT" P1 "250" "0" g-total)   (command "TEXT" P2 "250" "0" FACTOR)   (command "TEXT" P3 "250" "0" d-total));;;--------------------------------------------------------------------------;(prompt "\n TYPE command : CALS ");;;--------------------------------------------------------------------------;JTRAY.LSP;*****************************************************; - This program is Wiring in Drawing (JWIRE.LSP)    /;   command:"JTR, JTRAY"                             /;;;------------------------------                    /;;; Make by Park Dae-sig                             /;;; Date is 1997-11-06                               /;;; Where is "JIN" Electric co.                      /;;; (HP) 018-250-7324                                /;;;------------------------------                    /; - Last Up-Date is 1998-11-06 (P.D.S)               /;*****************************************************;--------------------------------------------------------------------------(defun dtr (a) (* pi (/ a 180.0)))(defun rtd (a) (/ (* a 180.0) pi))(defun wierror (s)  (if (/= s "function cancelled") (princ (strcat "\nerror: " s)))  (setvar "osmode" olds)  (setq *error* olderr)  (princ));;-------------------------------------------------------------------------(defun in_tr (a)(command ".insert" a))(defun in_tr_1 (a)(command ".insert" a "nea"))(defun in_tr_2 (a)(command ".insert" a "end" PAUSE """"));;-------------------------------------------------------------------------(defun jsel_run_tr (a)  (cond    ((= a 1) (in_tr "te-3"))    ((= a 2) (in_tr "tt-3"))    ((= a 3) (in_tr "tc-3"))    ((= a 4) (in_tr "te-4"))    ((= a 5) (in_tr "tt-4"))    ((= a 6) (in_tr "tc-4"))    ((= a 7) (in_tr "te-6"))    ((= a 8) (in_tr "tt-6"))    ((= a 9) (in_tr "tc-6"))    ((= a 10)(in_tr "te-7"))    ((= a 11)(in_tr "tt-7"))    ((= a 12)(in_tr "tc-7"))    ((= a 13)(in_tr "te-9"))    ((= a 14)(in_tr "tt-9"))    ((= a 15)(in_tr "tc-9"))    ((= a 16)(in_tr "te-12"))    ((= a 17)(in_tr "tt-12"))    ((= a 18)(in_tr "tc-12"))    ((= a 21)(in_tr_1 "t-dt3"))    ((= a 22)(in_tr_1 "t-dt4"))    ((= a 23)(in_tr_1 "t-dt6"))    ((= a 24)(in_tr_1 "t-dt7"))    ((= a 25)(in_tr_1 "t-dt9"))    ((= a 26)(in_tr_1 "t-dt12"))    ((= a 27)(in_tr_1 "t-dt3a"))    ((= a 28)(in_tr_1 "t-dt4a"))    ((= a 29)(in_tr_1 "t-dt6a"))    ((= a 30)(in_tr_1 "t-dt7a"))    ((= a 31)(in_tr_1 "t-dt9a"))    ((= a 32)(in_tr_1 "t-dt12a"))    ((= a 41)(in_tr "tray300"))    ((= a 42)(in_tr "tray450"))    ((= a 43)(in_tr "tray600"))    ((= a 44)(in_tr "tray750"))    ((= a 45)(in_tr "tray900"))    ((= a 46)(in_tr "tray1200"))    ((= a 51)(in_tr_2 "t-end"))    ((= a 52)(in_tr_2 "t-end2"))    ((= a 53)(in_tr_1 "t-end3"))    ((= a 98) (pds_key))  )  (setq jkey nil)  (prin1));;-------------------------------------------------------------------------(setq jinbox_tr(load_dialog "jtray")) ; Loading Dialog-Box(defun help_jjw()(acad_helpdlg "lisp-hlp.hlp" "wire"));;-------------------------------------------------------------------------;;-------------------------------------------------------------------------(defun C:JTR()(c:jtray))(defun C:JTRAY(/ jinbox xxx jkey)  (if (= jinbox_tr nil)(setq jinbox_tr(load_dialog "jtray")))  (new_dialog "jintray" jinbox_tr)  (setq xxx 3 jkey nil)  (while (> xxx 2)    (action_tile "te3"  "(setq jkey 1)(done_dialog)")    (action_tile "tt3"  "(setq jkey 2)(done_dialog)")    (action_tile "tc3"  "(setq jkey 3)(done_dialog)")    (action_tile "te4"  "(setq jkey 4)(done_dialog)")    (action_tile "tt4"  "(setq jkey 5)(done_dialog)")    (action_tile "tc4"  "(setq jkey 6)(done_dialog)")    (action_tile "te6"  "(setq jkey 7)(done_dialog)")    (action_tile "tt6"  "(setq jkey 8)(done_dialog)")    (action_tile "tc6"  "(setq jkey 9)(done_dialog)")    (action_tile "te7"  "(setq jkey 10)(done_dialog)")    (action_tile "tt7"  "(setq jkey 11)(done_dialog)")    (action_tile "tc7"  "(setq jkey 12)(done_dialog)")    (action_tile "te9"  "(setq jkey 13)(done_dialog)")    (action_tile "tt9"  "(setq jkey 14)(done_dialog)")    (action_tile "tc9"  "(setq jkey 15)(done_dialog)")    (action_tile "te12" "(setq jkey 16)(done_dialog)")    (action_tile "tt12" "(setq jkey 17)(done_dialog)")    (action_tile "tc12" "(setq jkey 18)(done_dialog)")    (action_tile "dt3"  "(setq jkey 21)(done_dialog)")    (action_tile "dt4"  "(setq jkey 22)(done_dialog)")    (action_tile "dt6"  "(setq jkey 23)(done_dialog)")    (action_tile "dt7"  "(setq jkey 24)(done_dialog)")    (action_tile "dt9"  "(setq jkey 25)(done_dialog)")    (action_tile "dt12" "(setq jkey 26)(done_dialog)")    (action_tile "dt3a"  "(setq jkey 27)(done_dialog)")    (action_tile "dt4a"  "(setq jkey 28)(done_dialog)")    (action_tile "dt6a"  "(setq jkey 29)(done_dialog)")    (action_tile "dt7a"  "(setq jkey 30)(done_dialog)")    (action_tile "dt9a"  "(setq jkey 31)(done_dialog)")    (action_tile "dt12a" "(setq jkey 32)(done_dialog)")    (action_tile "tpl3"  "(setq jkey 41)(done_dialog)")    (action_tile "tpl4"  "(setq jkey 42)(done_dialog)")    (action_tile "tpl6"  "(setq jkey 43)(done_dialog)")    (action_tile "tpl7"  "(setq jkey 44)(done_dialog)")    (action_tile "tpl9"  "(setq jkey 45)(done_dialog)")    (action_tile "tpl12" "(setq jkey 46)(done_dialog)")    (action_tile "t_end"   "(setq jkey 51)(done_dialog)")    (action_tile "t_end2"  "(setq jkey 52)(done_dialog)")    (action_tile "t_end3"  "(setq jkey 53)(done_dialog)")    (action_tile "pds_key" "(setq jkey 98)(done_dialog)")    (action_tile "help" "(help_jjw)")    (setq xxx (start_dialog))  )  (action_tile "accept" "(setq jkey 97)(done_dialog)")  (action_tile "cancel" "(done_dialog)")  (done_dialog)  (if jkey (jsel_run_tr jkey)));JCUB.LSP;*****************************************************; - This program is Cublcle Plan or MCC Diagram      /;   command : "CUB, PNL, MCC"                        /;;;------------------------------                    /;;; Make by Park Dae-sig                             /;;; Date is 1995-00-00                               /;;; Where is "JIN" Electric co.                      /;;; (HP) 018-250-7324                                /;;;------------------------------                    /; - Last Up-Date is 1998-10-14 (P.D.S)               /;*****************************************************;;-------------------------------------------------------------------------(defun BLOCK-LIST()(acad_helpdlg "BLK-LIST.hlp" "fl"))(setq jinbox_cub(load_dialog "jcub")) ; Loading Dialog-Box(defun help_cub()(acad_helpdlg "lisp-hlp.hlp" "cub"))(defun C:CUB(/ )  (setq cub_key nil)  (if (= jinbox_cub nil)(setq jinbox_cub (load_dialog "jcub")))  (new_dialog "jincub" jinbox_cub)  (action_tile "lvp"  "(setq cub_key 1)(done_dialog)")  (action_tile "trp"  "(setq cub_key 2)(done_dialog)")  (action_tile "shp"  "(setq cub_key 3)(done_dialog)")  (action_tile "mcc"  "(setq cub_key 4)(done_dialog)")  (action_tile "mdia" "(setq cub_key 5)(done_dialog)")  (action_tile "pdia" "(setq cub_key 6)(done_dialog)")  (action_tile "cdrl" "(setq cub_key 7)(done_dialog)")  (action_tile "cdrt" "(setq cub_key 8)(done_dialog)")  (action_tile "cdrs" "(setq cub_key 9)(done_dialog)")  (action_tile "pds_key" "(setq cub_key 98)(done_dialog)")  (action_tile "help" "(help_cub)")  (start_dialog)  (action_tile "accept" "(done_dialog)")  (action_tile "cancel" "(setq cub_key 100)(done_dialog)")  (j_cub cub_key))(defun j_cub(cub_key)  (old-non)(LA-SET "CUB" 103)  (cond    ((= cub_key 1)(j_pnl-lvp))    ((= cub_key 2)(j_pnl-trp))    ((= cub_key 3)(j_pnl-shp))    ((= cub_key 4)(j_pnl-mcc))    ((= cub_key 5)(j_dia-mcc))    ((= cub_key 6)(j_dia-pnl))    ((= cub_key 7)(make-door-1 50))    ((= cub_key 8)(make-door-2 200))    ((= cub_key 9)(make-door-2 50))    ((= cub_key 98)(pds_key))    ((= key "?")(acad_helpdlg "lisp-hlp.hlp" "cub"))    (T (prompt "\n Terminated............"))  )  (new-sn)(la-back)(prin1));===================================================================(defun j_pnl-mcc()   (setq pnl-w (getreal "\n Panel Width Size ? <600> :"))   (if (= pnl-w nil) (setq pnl-w 600))   (setq pnl-d (getreal "\n Panel Depth Size ? <600> :"))   (if (= pnl-d nil) (setq pnl-d 600))   (make-body)   (setq p5 (polar p3 (dtr 135) 70))   (setq p6 (polar p4 (dtr 45) 70))   (command "line" p1 p3 "" "line" p5 p6 ""))(defun j_pnl-lvp()   (setq pnl-w (getreal "\n Panel Width Size ? <800> :"))   (if (= pnl-w nil) (setq pnl-w 800))   (setq pnl-d (getreal "\n Panel Depth Size ? <1600> :"))   (if (= pnl-d nil) (setq pnl-d 1600))   (make-body)   (make-doorx 3))(defun j_pnl-trp()   (setq pnl-w (getreal "\n Panel Width Size ? <2000> :"))   (if (= pnl-w nil) (setq pnl-w 2000))   (setq pnl-d (getreal "\n Panel Depth Size ? <2000> :"))   (if (= pnl-d nil) (setq pnl-d 2000))   (make-body)   (make-doorx 2))(defun j_pnl-shp()   (setq pnl-w (getreal "\n Panel Width Size ? <1200> :"))   (if (= pnl-w nil) (setq pnl-w 1200))   (setq pnl-d (getreal "\n Panel Depth Size ? <2500> :"))   (if (= pnl-d nil) (setq pnl-d 2500))   (make-body)   (make-doorx 1));---------------------------------------------------------------------------(defun make-body()   (initget 1)   (setq p1 (getpoint "\n Panel Insert Point ? :"))   (setq p2 (polar p1 0 pnl-w))   (setq p3 (polar p2 (dtr 90) pnl-d))   (setq p4 (polar p1 (dtr 90) pnl-d))   (command "pline" p1 "W" 0 "" p2 p3 p4 "c"))(defun make-doorx(p-key / d-p1 d-p2 d-p3 d-p4 d-p5 d-p6 d-p7 ang1 ang2 dist1)   (cond      ((= p-key 1)(setq d-size 50))      ((= p-key 2)(setq d-size 200))      ((= p-key 3)(setq d-size 50))   )   (command "Color" 5)   (repeat 2      (setq d-p1 p4)      (setq d-p2 p3)      (setvar "OSMODE" 0)      (setq ang1 (angle d-p1 d-p2))      (setq ang2 (angle d-p2 d-p1))      (setq d-p3 (polar d-p1 ang1 d-size))      (setq d-p4 (polar d-p2 ang2 d-size))      (if (= p-key 3)         (setq dist1 (distance d-p3 d-p4))         (setq dist1 (/ (distance d-p3 d-p4) 2))      )      (setq d-p5 (polar d-p3 (+ ang1 (dtr 30)) dist1))      (if (/= p-key 3)         (progn            (setq d-p6 (polar d-p4 (- ang2 (dtr 30)) dist1))            (setq d-p7 (polar d-p3 ang1 dist1))            (command "line" d-p3 d-p5 "" "arc" "c" d-p3 d-p7 d-p5)            (command "line" d-p4 d-p6 "" "arc" "c" d-p4 d-p6 d-p7)         )         (progn            (command "line" d-p3 d-p5 "" "arc" "c" d-p3 d-p4 d-p5)         )      )      (setq p4 p2 p3 p1)   )   (command "Color" "Bylayer")); SH-cubicle's door(defun c:cdr2(/ d-size)   (prompt "\n SH-Cubicle's Door Make (offset is 50) ")   (old-endint)(la-set "CUB" 103)   (make-door-2 50)   (new-sn)(la-back)(prin1)); TR-cubicle's door(defun c:cdr3(/ d-size)   (prompt "\n TR-Cubicle's Door Make (offset is 200) ")   (old-endint)(la-set "CUB" 103)   (make-door-2 200)   (new-sn)(la-back)(prin1)); Two-door system drawing(defun make-door-2(d-size / p1 p2 p3 p4 p5 p6 p7 ang1 ang2 dist1)   (setvar "OSMODE" 33)   (setq p1 (getpoint "\n First Fance at \"Door-Post [LEFT]\" select :"))   (setq p2 (getpoint "\n Second Fance at \"Door-Post [RIGHT]\" select :"))   (setvar "OSMODE" 0)   (setq ang1 (angle p1 p2))   (setq ang2 (angle p2 p1))   (setq p3 (polar p1 ang1 d-size))   (setq p4 (polar p2 ang2 d-size))   (setq dist1 (/ (distance p3 p4) 2))   (setq p5 (polar p3 (+ ang1 (dtr 30)) dist1))   (setq p6 (polar p4 (- ang2 (dtr 30)) dist1))   (setq p7 (polar p3 ang1 dist1))   (command "Color" 5)   (command "line" p3 p5 "" "arc" "c" p3 p7 p5)   (command "line" p4 p6 "" "arc" "c" p4 p6 p7)   (command "Color" "Bylayer"))(defun c:cdr1()   (old-endint)(la-set "CUB" 103)   (prompt "\n LV-Cubicle's Door Make (offset is 50) ")   (make-door-1 50)   (new-sn)(la-back)(prin1))(defun make-door-1(d-size / p1 p2 p3 p4 p5 ang1 ang2 dist1)   (setvar "OSMODE" 33)   (setq p1 (getpoint "\n First Fance at \"Door-Post\" select :"))   (setq p2 (getpoint "\n Second Fance at \"Door-Handle\" select :"))   (setvar "OSMODE" 0)   (setq ang1 (angle p1 p2))   (setq ang2 (angle p2 p1))   (setq p3 (polar p1 ang1 d-size))   (setq p4 (polar p2 ang2 d-size))   (setq dist1 (distance p3 p4))   (setq p5 (polar p3 (+ ang1 (dtr 30)) dist1))   (command "Color" 5)   (command "line" p3 p5 "")   (command "arc" "c" p3 p4 p5)   (command "Color" "Bylayer"))(defun c:mcc()(old-non)(la-set "LINE" 3)(j_dia-mcc)(la-back)(new-sn))(defun j_dia-mcc(/ po1 po2 po3 po4 po5 po6 po7 key v-dis               mo-n mo-n2 no nn pox pox2 pox3 olds)   (command "color" "bylayer" "linetype" "s" "bylayer" "")   (setq key1 1)   (while key1      (initget "Full Simple ?")      (setq key         (getkword "\n Mcc-Schedule Type ? = Full(9)/Simple(4)/?:<S> ")      )      (if (or (= key "")(= key nil))(setq key "Simple"))      (cond         ((= key "Simple")(setq v-dis 4000)(setq key1 nil))         ((= key "Full")  (setq v-dis 9000)(setq key1 nil))         ((= key "?")(acad_helpdlg "lisp-hlp.hlp" "Top")(setq key nil))         (T (acad_helpdlg "lisp-hlp.hlp" "Top")(setq key nil))      )   )   (setq po1(getpoint "\n Pick the MCC-SCHEDULE point ? <Upper-Left>:"))   (setq po2(polar po1 (dtr 352.22) 3693.59))   (setq po3(polar po1 (dtr 351.822) 3725.9))   (setq po4(polar po1 (dtr 351.431) 3758.39))   (setq po5(polar po1 (dtr 357.7) 13322.8))   (setq po6(polar po1 (dtr 311.909) 13213.6))   (setq po7(polar po6 0 6000))   (command "insert" "*mo-main" po1 """")    (if (= key "Simple")      (command "insert" "*mo-sc4" po6 """")        (command "insert" "*mo-sc9" po6 """")     )   (setq mo-n(getreal "\n Enter Motor's Count ? <Number>:"))   (setq mo-n2 mo-n)   (setvar "PDMODE" 3)   (setvar "PDSIZE" -3)   (while (>= mo-n 1)      (command "point" po5)      (setq po5 (polar po5 0 3000))      (setq mo-n (1- mo-n))   )   (command "color" 6)   (while (>= mo-n2 1)      (if (= mo-n2 1.0)(command "color" 3))      (command "line" po7 (polar po7 (dtr 270) v-dis) "")      (if (>= mo-n2 2.0) (setq po7 (polar po7 0 3000)))      (setq mo-n2 (1- mo-n2))   )   (if (= key "Simple")       (setq no 5 nn no)       (setq no 10 nn no)   )   (repeat no      (cond         ((or (= no nn)(= no 1))(command "color" 3))         (T (command "color" 6))      )      (command "line" po6 po7 "")      (setq po6 (polar po6 (dtr 270) 1000))      (setq po7 (polar po7 (dtr 270) 1000))      (setq no (1- no))   )   (command "color" 9)   (command "line" po2 (list (car po7) (cadr po2)) "")   (command "line" po3 (list (car po7) (cadr po3)) "")   (command "line" po4 (list (car po7) (cadr po4)) "")   (command "color" 15 "linetype" "s" "elp" "")   (setq pox (list (+ (car po7) 1500) (cadr po1)))   (setq pox2 (polar pox (dtr 270) 7422.21))   (setq pox3 (polar po1 (dtr 270) 7422.21))   (command "line" po1 pox pox2 pox3 "")   (command "insert" "*mo-gt" pox """")   (command "color" "bylayer" "linetype" "s" "bylayer" ""))(defun c:pnl()(old-endint)(la-set "LINE" 3)(j_dia-pnl)(la-back)(new-sn))(defun cb_array(po cb_count cb_name cb_dist / po33)   (setq po33 po)   (while (>= cb_count 1)      (command "insert" cb_name po33 """")      (setq po33 (polar po33 (dtr 270) cb_dist))      (setq cb_count (1- cb_count))   )   (setq po3 po33))(defun j_dia-pnl(/ po1 po2 po3 po4 po4-1 po4-2 po4-3 po4-4               co-4 co-3 co-2 co-1 po5-1 po5-2 po5-3 po5-4 olds)   (setvar "OSMODE" 33)   (setq po1(getpoint "\n Panel Diagram corner point ? <Upper-Left>:"))   (setvar "OSMODE" 0)   (setq po2(polar po1 (dtr 270) 2969.58))   (setq po3(polar po2 0 2537.86))   (setq po4-1 po3         po4-2 (polar po4-1 0 700)         po4-3 (polar po4-2 0 700)         po4-4 (polar po4-3 0 700)   )   (command "insert" "*m-main" po1 """")   (setq co-4(getreal "\n Enter 4-Pole Break Number's ? :"))   (setq co-3(getreal "\n Enter 3-Pole Break Number's ? :"))   (setq co-2(getreal "\n Enter 2-Pole Break Number's ? :"))   (setq co-1(getreal "\n Enter 1-Pole Break Number's ? :"))   (cb_array po3 co-4 "*m-m4p" 1500)   (cb_array po3 co-3 "*m-m3p" 1200)   (cb_array po3 co-2 "*m-e2p" 900)   (cb_array po3 co-1 "*m-m1p" 600)   (command "insert" "*m-gtnt" po3 """")   (setq po5-1 (polar po3 (dtr 270) 900)         po5-2 (polar po5-1 0 700)         po5-3 (polar po5-2 0 700)         po5-4 (polar po5-3 0 700)         po5-4 (polar po5-4 (dtr 270) 1069.29)   )   (command "color" "9")   (command "line" po4-1 po5-1 "")   (command "line" po4-2 po5-2 "")   (command "line" po4-3 po5-3 "")   (command "line" po4-4 po5-4 "")   (command "color" "bylayer")   (prin1))(defun chbb_name_1(/ a)  (setq a2 nil)  (setq a (entsel "\n\t* Pick an object to be Select-block : "))  (if a (setq name1 (cdr (assoc 2 (entget (car a)))))(setq a2 T)))(defun chbb_name_2(/ a)  (setq a (entsel "\n\t* Pick an object to be Service-block : "))  (if a (setq name2 (cdr (assoc 2 (entget (car a)))))))(defun chbb_set_1()  (chbb_name_1)  (set_tile "chbb_name1" name1))(defun chbb_set_2()(set_tile "chbb_name2" name2))(defun chbb_call()  (setq name1(get_tile "chbb_name1"))  (setq name2(get_tile "chbb_name2"))  (setq op1(get_tile "chbb_op1"))  (setq op2(get_tile "chbb_op2"))  (setq op3(get_tile "chbb_op3")))(defun c:chbb(/ name1 name2 op1 op2 op3 xxx a2 kkk kkk1 kkk2)  (chbb_name_1)  (chbb_name_2)  (setq kkk 333)  (while kkk    (CHBB-MAIN)    (if kkk1 (chbb_name_1))    (if kkk2 (chbb_name_2))  ))(defun CHBB-MAIN()    (setq kkk1 nil kkk2 nil)  (if (= jinbox_chbb nil)(setq jinbox_chbb(load_dialog "jchbb")))  (new_dialog "jinchbb" jinbox_chbb)  (if name1 (set_tile "chbb_name1" name1))  (if name2 (set_tile "chbb_name2" name2))  (set_tile "chbb_op1" "1")  (set_tile "chbb_op2" "1")  (set_tile "chbb_op3" "0")  (if a2 (mode_tile "chbb_name1" 2)(mode_tile "chbb_name2" 2))  (setq xxx 3)  (while (> xxx 2)    (action_tile "chbb_na1" "(setq kkk1 333 name1 nil)(done_dialog)")    (action_tile "chbb_na2" "(setq kkk2 333 name2 nil)(done_dialog)")    (action_tile "chbb_name1" "(setq name1 $value)")    (action_tile "chbb_name2" "(setq name2 $value)")    (action_tile "chbb_op1" "(setq op1 $value)")    (action_tile "chbb_op2" "(setq op2 $value)")    (action_tile "chbb_op3" "(setq op3 $value)")    (action_tile "cancel" "(setq name2 nil kkk1 nil kkk2 nil kkk nil)(done_dialog)")    (setq xxx (start_dialog))  )  (if (and (/= name1 nil)(/= name2 nil))    (if (and (/= name1 "")(/= name2 ""))      (progn        (setq kkk1 nil kkk2 nil kkk nil)        (chbb name1 name2 op1 op2 op3)      )    )  ))(defun chbb (bna s_name op1 op2 op3            / i os_old olderr myerror blk1 s_blk1 ebl nl l1 e2 ed ban0 p1 y0)  (setq bna (strcase bna))  (setq s_name (strcase s_name))   (setq ch1 0)   (setq i 0)   (setvar "CMDECHO" 0)   (setq os_old (getvar "OSMODE"))   (setvar "OSMODE" 0)   (setq olderr *error* *error* myerror chm 0)   (prompt "\n\t\t  *** select the block's *** : ")   (setq ebl (ssget (list (cons 2 bna))))   (prompt "\n\n\n\t\t    *** pless wate - changed ***")   (setq nl (sslength ebl))(setq l1 (- nl 1))   (while (<= i l1)      (setq e2 (ssname ebl i))      (setq ed (entget e2))      (setq bna0 (cdr (assoc 2 ed)))      (if (= op1 "0")        (setq blag (rtd 0))        (setq blag (rtd (cdr (assoc 50 ed))))      )      (if (= op2 "0")        (setq blsc 1)        (setq blsc (cdr (assoc 41 ed)))      )      (setq blla (cdr (assoc 8 ed)))      (setq p1 (cdr (assoc 10 ed)))      (if (= (strcase bna) (strcase bna0))         (progn            (command "erase" e2 "")            (command ".insert" s_name p1 blsc "" blag)            (if (= op3 "1")(command "chprop" (entlast) "" "la" blla ""))            (setq ch1 (+ ch1 1))         )      )      (setq i (+ i 1))   )   (prompt (strcat      "\n\t" "thank you! changed [" bna "]-->[" s_name "] count is = "))   (prin1 ch1) (setvar "osmode" os_old)(prin1)	(setq m_data (strcat "CHBB //" bna "// --> //" s_name "// count is = <" (itoa ch1) ">"))	(command "MODEMACRO" m_data))(defun C:ecc(/ e1 i nl n ed t0 e2 pps ppe ang-bb ang-rem)  (prompt "\n\t This Program is Erase at \"Arch-Center Line\" :")  (prompt "\n\t Select \"Select Arch-Center Line's \" :")  (command "undo" "group")  (setq i 0)  (setq e1(ssget))  (IF (/= e1 nil)    (progn      (setq nl(sslength e1))      (setq n(- nl 1))      (while (<= i n)        (setq ed(entget(setq e2(ssname e1 i))))        (setq t0(cdr (assoc 0 ed)))        (if (= "LINE" t0)          (progn            (setq pps(cdr (assoc 10 ed)))            (setq ppe(cdr (assoc 11 ed)))            (setq ang-bb (rtd (angle pps ppe)))            (setq ang-rem (rem ang-bb 90.0))            (if (or (< ang-rem 2) (> ang-rem 88.0))              (command "erase" e2 "")            )          )        )        (setq i(1+ i))      )    )  )  (command "undo" "end"))(defun C:enn(/ e1 i nl n ed t0 e2 pps ppe ang-bb ang-rem)  (prompt "\n\t This Program is Erase at \"Room-Name-Number\" :")  (prompt "\n\t Select \"Select Arch-Room-Name-Number's \" :")  (command "undo" "group")  (setq i 0)  (setq e1(ssget))  (IF (/= e1 nil)    (progn      (setq nl(sslength e1))      (setq n(- nl 1))      (while (<= i n)        (setq ed(entget(setq e2(ssname e1 i))))        (setq t0(cdr (assoc 0 ed)))        (if (= "TEXT" t0)          (progn            (setq des-room(atof (cdr (assoc 1 ed))))            (if (> des-room 100.0)              (command "erase" e2 "")            )          )        )        (setq i(1+ i))      )    )  )  (command "undo" "end"))(defun c:ew() (command "erase" "w"))(defun c:ec() (command "erase" "c"))(defun fill-comm (a)   (prompt "\n\t Now Fillet-radious as [")(prin1 a)   (prompt "].. Thank-you ! ")   (setvar "FILLETRAD" a)(prin1))(defun c:f05() (fill-comm 50)  (command "fillet" "" ))(defun c:f1 () (fill-comm 100) (command "fillet" "" ))(defun c:f15() (fill-comm 150) (command "fillet" "" ))(defun c:f2 () (fill-comm 200) (command "fillet" "" ))(defun c:f25() (fill-comm 250) (command "fillet" "" ))(defun c:f3 () (fill-comm 300) (command "fillet" "" ))(defun c:f35() (fill-comm 350) (command "fillet" "" ))(defun c:f4 () (fill-comm 400) (command "fillet" "" ))(defun c:f45() (fill-comm 450) (command "fillet" "" ))(defun c:f0 () (fill-comm 0.0) (command "fillet" "" ))(defun c:f5 () (fill-comm 500) (command "fillet" "" ))(defun c:f55() (fill-comm 550) (command "fillet" "" ))(defun c:f6 () (fill-comm 600) (command "fillet" "" ))(defun c:f65() (fill-comm 650) (command "fillet" "" ))(defun c:f7 () (fill-comm 700) (command "fillet" "" ))(DEFUN C:Fc()   (prompt "\n\t The Fillet command as [CROSSING].. Thank-you ! ")   (COMMAND "FILLET" "C"))(DEFUN C:cmc()   (prompt "\n\t The chamfer command as [CROSSING].. Thank-you ! ")   (COMMAND "chamfer" "C"))(defun line-fill(key / pnt1 pnt2 pnt3 pnt4 a b)   (graphscr)   (old-qua)	(setvar "OSMODE" 16)   (prompt "\n\t Extend-Fillet command -Radious is [")   (prin1 (getvar "FILLETRAD"))(prompt "] - :")   (setq pnt1 (getpoint "\nFirst corner of rectangle : "))   (setq pnt3 (getpoint "\nSecond corner of rectangle : "))   (setvar "osmode" 0)   (if (= key 1)      (progn         (setq pnt2 (list (car pnt3) (cadr pnt1)))         (setq pnt4 (list (car pnt1) (cadr pnt3)))         (setq f-new1 (distance pnt1 pnt2))         (setq f-new2 (distance pnt3 pnt2))      )      (progn         (setq pnt4 (list (car pnt3) (cadr pnt1)))         (setq pnt2 (list (car pnt1) (cadr pnt3)))         (setq f-new1 (distance pnt1 pnt2))         (setq f-new2 (distance pnt3 pnt2))      )   )   (if (< f-new1 f-new2)(setq f-new f-new1)(setq f-new f-new2))   (command "line" pnt1 pnt2 "")   (setq a (entlast))   (command "line" pnt2 pnt3 "")   (setq b (entlast))   (new-sn)   (setq f-dir (getvar "FILLETRAD"))   (setq f-old f-dir)   (if (< f-new f-dir)      (setq f-dir (- f-new 1))   )   (setvar "FILLETRAD" f-dir)   (command "fillet" a b)   (setvar "FILLETRAD" f-old)   (prin1))(defun C:LH () (line-fill 1) (prin1))(defun C:LV () (line-fill 2) (prin1))(defun po-get()  (setvar "ORTHOMODE" 1)  (setq xx 1)  (setq po1 (getpoint "\n First point : "))  (if po1    (progn      (setvar "osmode" 0)      (setq po2 (getpoint po1 "\t Second point : "))      (command "line" po1 po2 "")      (setq xx 0)    )  ))(defun po-get2(p1 p2 / ang-first po2 xp1 xp2 yp1 yp2)	(setvar "ORTHOMODE" 1)	(setq ang-first (rtd (angle p1 p2)))	(if (<= ang-first 45)(setq ang1 0)		(if (<= ang-first 135)(setq ang1 90)			(if (<= ang-first 225)(setq ang1 180)				(if (<= ang-first 315)(setq ang1 270)				)			)		)	)	(setq stp1 (getpoint p2 "\n Select Second Block : (QUA Point)"))	(setvar "OSMODE" 0)	(setq xp1 (car p1) yp1 (cadr p1))	(setq xp2 (car stp1) yp2 (cadr stp1))	(if (or (= ang1 0)(= ang1 180))		(if (> yp1 yp2)(setq stp2 (polar stp1 (dtr 90) (- yp1 yp2)))			(if (< yp1 yp2)(setq stp2 (polar stp1 (dtr 270) (- yp2 yp1)))			)		)	)	(if (or (= ang1 90)(= ang1 270))		(if (> xp1 xp2)(setq stp2 (polar stp1 (dtr 0) (- xp1 xp2)))			(if (< xp1 xp2)(setq stp2 (polar stp1 (dtr 180) (- xp2 xp1)))			)		)	)	(command "line" stp1 stp2 ""))(defun ll-msg()   (graphscr)   (prompt "\t Extend-Fillet command -Radious is[")   (prin1 (getvar "FILLETRAD"))(prompt "] :"))(defun fdi-get()   (setq pnt5 (inters pnt1 pnt2 pnt3 pnt4 nil))   (setq f-dis1 (distance pnt1 pnt5))   (setq f-dis2 (distance pnt3 pnt5))   (setq f-old (getvar "FILLETRAD"))   (setq f-rad f-old)   (if (> f-dis1 f-dis2)(setq f-dis f-dis2)(setq f-dis f-dis1))   (if (> f-rad f-dis)(setq f-rad (- f-dis 1)))   (if (= f-old f-rad)      (setq f-rad nil)      (setvar "FILLETRAD" f-rad)   ))(defun C:LL (/ po1 po2 pnt1 pnt2 pn3 pnt4 pnt5               a b f-dis1 f-dis2 f-dia f-rad f-old)  (setq a nil b nil f-rad nil xx 0 po1 nil)  (old-qua)  (LL-MSG)  (PO-GET)  (setq pnt1 po1 pnt2 po2)  (setq a (entlast))  (setvar "osmode" 16)  (PO-GET2 pnt1 pnt2)  (if (= xx 0)    (progn      (setq pnt3 stp1 pnt4 stp2)      (setq b (entlast))      (FDI-GET)	   (setvar "OSMODE" 0)      (command "fillet" a b)      (if f-rad (setvar "FILLETRAD" f-old))    )  )  (new-sn))(defun C:LR(/ xx po1 po2 po1-c po1-e po2-c po2-e fil-r dist1 ang1)   (setq xx nil)   (setq fil-r (getvar "FILLETRAD"))   (if (> fil-r 1)(setq xx 1)(setq xx 0))   (if (= fil-r 0)      (prompt "\n Radius < 1 --> Program is **cancel** ")      (progn         (old-qua)         (setq po1 (getpoint "\n Enter First Point :"))         (setq po2 (getpoint po1 "\n Enter Second Point :"))         (setq dist1 (distance po1 po2))         (if (< dist1 (* fil-r 2))            (progn               (setq xx 0)               (prompt "\n Distance < Radius --> Program is **cancel** ")            )         )         (while (= xx 1)            (setvar "OSMODE" 0)            (setq ang1 (angle po1 po2))            (setq po1-c (polar po1 (+ (dtr 0) ang1) fil-r))                (setq po1-e (polar po1-c (+ (dtr 90) ang1) fil-r))             (setq po2-c (polar po2 (+ (dtr 180) ang1) fil-r))            (setq po2-e (polar po2-c (+ (dtr 90) ang1) fil-r))            (command "arc" "c" po1-c po1-e po1)             (command "arc" "c" po2-c po2 po2-e)             (command "line" po1-e po2-e "")                 (setq xx 0)         )         (new-sn)      )   ))                                      (defun c:ell() (c:ll)(c:lle))(defun c:exll()(c:ll)(c:llex))(defun c:tll() (c:ll)(c:llt))(defun c:tvll()(c:ll)(c:lltv))(defun c:fll() (c:ll)(c:llf))(defun c:sll() (c:ll)(c:lls))(defun c:dcll()(c:ll)(c:lldc))(defun c:oall()(c:ll)(c:lloa))(defun c:ull() (c:ll)(c:llu))(defun C:CL2(/ a1 a2 b2 la-name)   (setq olderr  *error* *error* myerror chm 0)   (prompt "\n ** Select entities to be changed : ")   (setq a1 (ssget))   (if a1      (progn         (prompt "\n ** Point to entity on target layer : ")         (setq a2 (entsel))         (if a2            (progn               (setq b2 (entget (car a2)))               (setq la-name (cdr (assoc 8 b2)))               (setq lt-name (cdr (assoc 6 b2)))               (setq co-name (cdr (assoc 62 b2)))               (if (= lt-name nil)(setq lt-name "bylayer"))               (if (= co-name nil)(setq co-name "bylayer"))            )            (setq la-name (getstring "\n Enter target Layer Name : "))         )         (command "CHPROP" a1 "" "layer" la-name "c" co-name "lt" lt-name "")      )   ))(defun c:ti1()(command "insert" "ti1"))(defun c:ti2()(command "insert" "ti2"))(DEFUN C:OF(/ kk aa p1)	(prompt "\n\t Cable Tray's Border Box Drawing :[")(prin1 of_key)(prompt "]")	(if (= of_key nil)(set_of_key))	(setq kk 1)	(if (= nil (SETQ AA(ENTSEL "\n Select of the Tray Box : <Pick>")))		(set_of_key)		(progn			(setq p1 (getpoint "\n Enter Inside Position of Tray box : "))			(command "offset" of_key aa p1 "")			(command "chprop" "last" "" "color" 7 "")			(while kk				(SETQ AA(ENTSEL "\n Select of the Tray Box : <Pick>"))				(if aa					(progn						(setq p1 (getpoint "\n Enter Inside Position of Tray box : "))						(command "offset" of_key aa p1 "")						(command "chprop" "last" "" "color" 7 "")					)					(setq kk nil)				)			)		)	))(defun set_of_key(/ a)	(prompt "\n Enter Border Space = <")(prin1 of_key)(setq a (getdist "> ? :"))	(if a(setq of_key a)))(defun myerr(msg)	(if (/= msg "Function cancelled")(princ (strcat "\nError: " msg)))	(setq *error* err)(princ))(defun c:pp()  (setq err *error* *error* myerr)(textscr)(setvar "cmdecho" 0)  (if (= "DIM" (getvar "cmdnames")) (command "exit"))(setvar "cmdecho" 1)  (fp)  (while (/= fm "")(rp)(fp))  (setq *error* err)(GRAPHSCR)(princ))(defun fp()  (command "purge")(command "all")(princ "\n")(command "")(princ "\n")(command "")  (setq fm (getvar "cmdnames") cm fm))(defun rp()  (while (/= cm "")(command "y")(setq cm (getvar "cmdnames"))))(defun C:TA(/ e1 nl n tt i e2 ed t0 tt1 tt2) 	(setq olderr  *error* *error* TEXERROR chm 0)	(prompt " = Text Change -> All Line ")(setq ts(sel_text))	(if ts (progn (setq l(sslength ts))	(setq sz(getstring "New Text :" t))	(setq m_data (strcat "New Text All = <" sz ">"))	(command "MODEMACRO" m_data)	(chg_text ts sz 1))))(defun c:i(/ a olds)	(setq olderr  *error* *error* TEXERROR chm 0)	(old-non)	(setq b (strcase (getvar "INSNAME")))  (prompt "\n Insert Block Name ? : <")(prin1 b)	(setq a (strcase (getstring "> ? :")))	(if (or (= a nil) (= a ""))(setq a b))	(setq m_data (strcat "InsertT Block Name = <" a ">"))	(command "MODEMACRO" m_data)	(command "_.insert" a )	(new-sn)	(prin1))	(defun c:nilt(/ aa bb)	(setq aa(getstring "\n\t Enter selection Text ? :" T))	(prin1 aa)	(setq bb(ssget "x" (list (cons 0 "TEXT")(cons 1 aa))))	(prin1 bb)	(if bb (command "SELECT" bb "")))(defun c:nilt2(/ aa bb)	(setq aa (cdr (assoc 1 (entget (car (entsel "\n Select by selection Text ? : "))))))	(prin1 aa)	(setq bb(ssget "x" (list (cons 0 "TEXT")(cons 1 aa))))	(prin1 bb)	(if bb (command "SELECT" bb "")))(defun c:eee()	(c:nilt2)	(command "Erase" "P" ""))(defun c:+()(if (not c:t_num)(load "k_tnum"))(c:t_num))(defun c:-()(if (not c:t_num)(load "k_tnum"))(c:t_num))(defun c:*()(if (not c:t_num)(load "k_tnum"))(c:t_num))(defun c:/()(if (not c:t_num)(load "k_tnum"))(c:t_num))(load "jenn")(load "jt")(LOAD"JTT2")(defun c:tt()(c:jtt))(defun c:jtnn()(load "jtnn")(c:jtnn))(defun c:tnn()(c:jtnn))(defun c:dd()(c:ddedits))(load "ddedits.vlx")(princ)(prin1)(DEFUN C:TB (/ loop en1 th ag b1 b2 b3 b4 xx yy bx)  (setvar "cmdecho" 0)  (command "undo" "group")  (setq loop T)  (while loop    (setq en1 (entsel "\n>> Select Text entity :"))    (if en1      (if (= "TEXT" (cdr (assoc 0 (entget (car en1)))))        (setq loop nil              en1 (entget (car en1))        )      )    )  )  (setq th (cdr (assoc 40 en1)))         (setq th (/ th 2))   (setq ag (rtd (cdr (assoc 50 en1))))   (setq bs (cdr (assoc 10 en1)))         (setq bx (car (cdr (textbox en1))))    (setq bx (mapcar '+ bx (list (* 2 th) (* 2 th))))  (setq xx (car bx))  (setq yy (car (cdr bx)))  (setq b1 (polar bs (dtr (+ 225 ag)) (* 1.414 th))        b2 (polar b1 (dtr ag) xx)        b3 (polar b2 (dtr (+ 90 ag)) yy)        b4 (polar b1 (dtr (+ 90 ag)) yy)  )  (setq osm (getvar "osmode"))  (setvar "osmode" 0)  (command "pline" b1 b2 b3 b4 "c")  (command "chprop" (entlast) "" "la" "b" "")  (command "undo" "end")  (setvar "osmode"  osm)  (princ))(prin1);;;------------------------------                    /;;; Make by Kill K.S                                 /;;; Date is 1995-00-00                               /;;; Where is "JIN" Electric co.                      /;;; (HP) 018-250-7324                                /;;;------------------------------                    /; - Last Up-Date is 1998-10-22 (P.D.S)               /;*****************************************************;======ÀÌÇÏ T3,5,6Àº ¸í·ÉÀÌ µèÁö ¾ÊÀ½.=============;--------------------------------------------------------------------------;(defun c:t6()(j_t6)(prin1));(defun J_T6 (/ E1 NL N I CHM E2 T0 TT1 TT2 ED);   (setq OLDERR *ERROR* *ERROR* TEXERROR CHM 0);   (setq I 0);   (setq E1 (sel_text));   (if E1;      (progn;         (setq NL (sslength E1));         (setq N (- NL 1));         (while (<= I N);            (setq ED (entget (setq E2 (ssname E1 I))));            (setq TT1 (assoc 1 ED));            (setq TT2 (cdr TT1));            (prompt "\n[ OLD TEXT(")(prin1 TT2)(prompt ") - ");            (setq TT (rtos (* (atof TT2) 0.6) 2 0));            (prompt "NEW TEXT :" T);            (prin1 TT);            (if (/= TT "");               (progn;                  (setq ED (SUBST (CONS 1 TT) (assoc 1 ED) ED));                  (entmod ED);               ) ; progn end;            ) ; if end;            (setq I (1+ I));         ) ; while end;      ) ; progn end;   ) ; if end;) ; defun end;--------------------------------------------------------------------------;(defun C:T5 (/ E1 NL N I CHM E2 T0 TT1 TT2 ED);   (setq OLDERR *ERROR* *ERROR* TEXERROR CHM 0);   (setq I 0);   (setq E1 (sel_text));   (if E1;      (progn;         (setq NL (sslength E1));         (setq N (- NL 1));         (while (<= I N);            (setq ED (entget (setq E2 (ssname E1 I))));            (setq TT1 (assoc 1 ED));            (setq TT2 (cdr TT1));            (prompt "\n[ OLD TEXT(")(prin1 TT2)(prompt ") - ");            (setq TT (rtos (* (atof TT2) 0.5) 2 0));            (prompt "NEW TEXT :" T);            (prin1 TT);            (if (/= TT "");               (progn;                  (setq ED (SUBST (CONS 1 TT) (assoc 1 ED) ED));                  (entmod ED);               ) ; progn end;            ) ; if end;            (setq I (1+ I));         ) ; while end;      ) ; progn end;   ) ; if end;) ; defun end;(defun C:T3 (/ E1 NL N I CHM E2 T0 TT1 TT2 ED);   (setq OLDERR *ERROR* *ERROR* TEXERROR CHM 0);   (setq I 0);   (setq E1 (sel_text));   (if E1;      (progn;         (setq NL (sslength E1));         (setq N (- NL 1));         (while (<= I N);            (setq ED (entget (setq E2 (ssname E1 I))));            (setq TT1 (assoc 1 ED));            (setq TT2 (cdr TT1));            (prompt "\n[ OLD TEXT(")(prin1 TT2)(prompt ") - ");            (setq TT (rtos (/ (atof TT2) 3) 2 0));            (prompt "NEW TEXT :" T);            (prin1 TT);            (if (/= TT "");               (progn;                  (setq ED (SUBST (CONS 1 TT) (assoc 1 ED) ED));                  (entmod ED);               ) ; progn end;            ) ; if end;            (setq I (1+ I));         ) ; while end;      ) ; progn end;   ) ; if end;) ; defun end;(defun C:TZZ (/ E1 NL N I CHM E2 T0 TT1 TT2 ED);;   (setq OLDERR *ERROR* *ERROR* TEXERROR CHM 0);   (setq I 0);   (setq ii (getreal "\n Enter Plus No.? : ")) ; ÁÖ¾îÁø¼ýÀÚ¸¦ ´õÇÔ;   (setq E1 (sel_text));   (if E1;      (progn;         (setq NL (sslength E1));         (setq N (- NL 1));         (while (<= I N);            (setq ED (entget (setq E2 (ssname E1 I))));            (setq TT1 (assoc 1 ED));            (setq TT2 (cdr TT1));            (prompt "\n[ OLD TEXT(")(prin1 TT2)(prompt ") - ");            (setq TT (rtos (+ (atof TT2) ii) 2 0));            (prompt "NEW TEXT :" T);            (prin1 TT);            (if (/= TT "");               (progn;                  (setq ED (SUBST (CONS 1 TT) (assoc 1 ED) ED));                  (entmod ED);               ) ; progn end;            ) ; if end;            (setq I (1+ I));         ) ; while end;      ) ; progn end;   ) ; if end;) ; defun end;(defun xxxx()(prompt "\n Select is O.K "));;-------------------------------------------------------------------------;;-------------------------------------------------------------------------;;-------------------------------------------------------------------------;(defun jsel_run_w (a);  (setq olderr  *error* *error* myerror chm 0);  (cond;    ((= a 0) (w-elh));    ((= a 1) (w-elv));    ((= a 2) (w-tlh));    ((= a 3) (w-tlv));    ((= a 4) (w-tvlh));    ((= a 5) (w-tvlv));    ((= a 6) (w-flh));    ((= a 7) (w-flv));    ((= a 8) (w-slh));    ((= a 9) (w-slv));    ((= a 10)(w-exlh));    ((= a 11)(w-exlv));    ((= a 12)(w-dclh));    ((= a 13)(w-dclv));    ((= a 14)(w-oalh));    ((= a 15)(w-oalv));  );  (prin1););(defun C:JJW()(c:jwire));(defun C:JWIRE(/ jinbox xxx jkey);  (if (= jinbox_wi nil)(setq jinbox(load_dialog "jwire")));  (new_dialog "jinwire" jinbox_wi);  (setq xxx 3 jkey nil);  (while (> xxx 2);    (action_tile "elh"  "(setq jkey 0)(done_dialog)");    (action_tile "elv"  "(setq jkey 1)(done_dialog)");    (action_tile "tlh"  "(setq jkey 2)(done_dialog)");    (action_tile "tlv"  "(setq jkey 3)(done_dialog)");    (action_tile "tvlh" "(setq jkey 4)(done_dialog)");    (action_tile "tvlv" "(setq jkey 5)(done_dialog)");    (action_tile "flh"  "(setq jkey 6)(done_dialog)");    (action_tile "flv"  "(setq jkey 7)(done_dialog)");    (action_tile "slh"  "(setq jkey 8)(done_dialog)");    (action_tile "slv"  "(setq jkey 9)(done_dialog)");    (action_tile "exlh" "(setq jkey 10)(done_dialog)");    (action_tile "exlv" "(setq jkey 11)(done_dialog)");    (action_tile "dclh" "(setq jkey 12)(done_dialog)");    (action_tile "dclv" "(setq jkey 13)(done_dialog)");    (action_tile "oalh" "(setq jkey 14)(done_dialog)");    (action_tile "oalv" "(setq jkey 15)(done_dialog)");    (action_tile "help" "(help_jjw)");    (setq xxx (start_dialog));  );  (action_tile "accept" "(done_dialog)");  (done_dialog);  (jsel_run_w jkey););(defun C:XLOAD(/ xlla olds);   (setq olderr  *error* *error* myerror chm 0);   (if (= xln nil)(setq xln "ACAD"));   (prompt (strcat"\n\n\t Enter the LISP name ? <"xln"> : ="));   (setq xlla(strcase(getstring)))(if (= xlla "")(xload xln);   (progn (xload xlla)(setq xln xlla)))(PRIN1););(defun C:EPIN();   (setq bb (getstring "\n [Insert & Explode]Block Name ? : "));   (if bb (command ".insert" bb "end" pause "" "" "" "Explode" "L" ));   (prompt "\n Thankyou !! ..... Last insert Object was Exploded !!");   (prin1));;;;---------------------------------------------------------------------;;;; ******* Hide Function's **********;;;;---------------------------------------------------------------------;Extention Lisp Call;(defun C:BV()(load "break")(BKW));(defun C:BH()(load "break")(BKW));(defun C:CHS()(LOAD "CHS")(C:CHS));(defun C:SSLT()(load "chs")(C:SSLT));(defun C:ESS()(load "chs")(C:ESS));(defun C:CHT()(LOAD "CHTEXT")(C:CHT));(defun C:CTT()(load "ctt")(C:CTT));(defun C:CHBB()(LOAD "CHBB")(C:CHBB));(defun C:LID()(LOAD "ROOM"));(defun C:EBK()(LOAD "EBK")(C:EBK));(defun C:CALS()(LOAD "CALS")(C:CALS));(defun C:CALS2()(LOAD "CALS")(C:CALS2));(defun C:CALL()(LOAD "CALS")(C:CALL));(defun C:BII()(LOAD "BII")(C:BII));(defun c:ddeerem()(if (not c:ddeerem)(Xload "eerem"))(c:ddeerem));(defun C:MOF()(load"moffset")(OLD-SN)(C:MOFFSET)(NEW-SN));(defun C:TIMES()(load"bigclock")(C:CLOCK));---- Panacia Display Board Utility;(defun C:DDS()(GRAPHSCR)(command "dldbpstatic")(grread)(command "dldbpstatic"));(defun C:DDD()(GRAPHSCR)(command "DLDBPDIM")(prin1));(defun C:DDC()(GRAPHSCR)(command "DLDCOLOR")(prin1));(defun C:DDH()(TEXTSCR)(command"DLDHELP")(prin1));;;;------------------------------------------------------------------------;;(defun C:MTR(/ CUTL SS LS PT1 PT2 kk);;  (prompt "\nSelect cutting edge: ");;  (setq CUTL (ssget));;  (old-sn);;  (setq kk 1);;  (while kk;;    (prompt "\nSelect objects to trim with Crossing Window");;    (setq PT1 (getpoint "\nFirst point: "));;    (if pt1;;       (progn;;          (setq PT2 (getcorner PT1 "\n2nd point: ");;                SS (ssget "C" PT1 PT2);;                LS (sslength SS);;                PT2 (polar PT1 (angle PT1 PT2) (/ (distance PT1 PT2) 2));;          );;          (if ss;;             (progn;;                (command "trim" CUTL "");;                (repeat LS;;                   (setq LS (- LS 1));;                   (command (list (ssname SS LS) PT2));;                );;                (command "");;             );;          );;       );;       (setq kk nil);;    );;  );;  (new-sn);;);;;;------------------------------------------------------------------------;;(defun C:MEX(/ CUTL SS LS PT1 PT2 kk);; (prompt "\nSelect boundary: ")(setq CUTL (ssget))(old-sn)(setq kk 1);; (while kk;;    (prompt "\nSelect objects to extend with Crossing Window");;    (setq PT1 (getpoint "\nFirst point: "));;    (if pt1;;       (progn;;          (setq PT2 (getcorner PT1 "\n2nd point: ");;                SS (ssget "C" PT1 PT2);;                LS (sslength SS);;                pt2 (polar pt1 (angle pt1 pt2) (/ (distance pt1 pt2) 2));;          );;          (if ss;;             (progn;;                (command "extend" CUTL "");;                (repeat LS;;                   (setq LS (- LS 1));;                   (command (list (ssname SS LS) PT2));;                );;                (command "");;                );;             );;          );;          (setq kk nil);;       );;    );; (new-sn);;);(defun C:ZC()  (command "ZOOM" "C")(prin1));(defun C:SCR() (command "script"));(defun C:ZWC();/ p1 p2 p3);  (prompt "\n Select Box [ Zoom & Center ] ");  (setq p1 (getpoint "\First point: "));  (setq p2 (getcorner p1 "\Second point: "));  (setq ang (angle p1 p2));  (setq dts (/ (distance p1 p2) 2));  (setq p3 (polar p1 ang dts));  (command "Zoom" p1 p2);  (command "Zoom" "C" p3 ""););(AUTOARXLOAD "CXDOCBAR.ARX" '("DOCBAR"));;=============È­¸é»ö»ó Åä±Û..;(ToggleScreenColor Ã¹¹øÂ° È­¸é »ö»ó , Ã¹¹øÂ° ½ÊÀÚ¼± »ö»ó , µÎ¹øÂ° È­¸é »ö»ó , µÎ¹øÂ° ½ÊÀÚ¼± »ö»ó)(defun c:tg1 ()(ToggleScreenColor 0 7 7 0))(defun c:tg2 ()(ToggleScreenColor 2 3 4 5))(defun ToggleScreenColor (BackColor1 CrosshairColor1 BackColor2 CrosshairColor2 / AcadPrefDisp CurrentOleCol reback reCrosshair)   (vl-load-com)   (setq AcadPrefDisp          (vla-get-display (vla-get-Preferences (vla-get-application (vlax-get-acad-object))))         CurrentOleCol          (vlax-variant-value (vlax-variant-change-type (vla-get-GraphicsWinModelBackgrndColor AcadPrefDisp) vlax-vbLong))   )   (if (= CurrentOleCol (AciColToOleCol BackColor1 ))     (setq reback BackColor2 reCrosshair CrosshairColor2)     (setq reback BackColor1 reCrosshair CrosshairColor1)   )   (vla-put-GraphicsWinModelBackgrndColor AcadPrefDisp (AciColToOleCol reback))   (vla-put-ModelCrosshairColor AcadPrefDisp (AciColToOleCol reCrosshair)))(defun AciColToOleCol (AciColNumber)  (nth AciColNumber       '(0          255        65535      65280      16776960   16711680   16711935   16777215   8421504    12632256   255        8421631    166        5460902    128        4210816    76        2500172    38         1250086    16639      8429567    10662      5466278    8320       4214912    4940	      2502732    2598       1251366    33023      8437759    21414      5471398        16512      4219008    9804       2505036    4902       1252646    49151	     8445951    31910      5476774    24704      4223104    14668      2507596    7462       1253670    65535        8454143    42662      5482150    32896      4227200    19532      2509900    9766       1254950    65471      8454111    42620      5482129    32864      4227184    19513      2509891        9757       1254945    65408      8454079    42579      5482108    32832	     4227168    19494      2509881    9747       1254941    65344      8454047    42537      5482088    32800        4227152    19475      2509872    9738       1254936    65280      8454016    42496      5482067    32768      4227136    19456      2509862    9728       1254931    4259584    10485632        2729472    6858323    2129920    5275712    1264640    3165222    665088     1582611    8453888    12582784   5481984    8169043    4227072    6324288    2509824    3755046    1254912        1910291    12582656   14679936   8168960    9545299    6324224    7372864    3755008    4410406    1910272    2172435    16776960   16777088   10921472   10921555   8421376    8421440        5000192    5000230    2500096    2500115    16760576   16768896   10910720   10916179   8413184    8417344    4995328    4997926    2497792    2498835    16744448   16760704   10900224        10910803   8404992    8413248    4990464    4995366    2495232    2497811    16728064   16752512   10889472   10905683   8396800    8409152    4985600    4993062    2492928    2496531        16711680   16744576   10878976   10900307   8388608    8405056    4980736    4990502    2490368    2495251    16711744   16744607   10879017   10900328   8388640    8405072    4980755        4990512    2490378    2495256    16711808   16744639   10879059   10900348   8388672    8405088    4980774    4990521    2490387    2495261    16711871   16744671   10879100   10900369        8388704    8405104    4980793    4990531    2490397    2495265    16711935   16744703   10879142   10900390   8388736    8405120    4980812    4990540    2490406    2495270    12517631        14647551   8126630    9524134    6291584    7356544    3735628    4400716    1900582    2167590    8388863    12550399   5439654    8147878    4194432    6307968    2490444    3745356        1245222    1905446    4194559    10453247   2687142    6837158    2097280    5259392    1245260    3155532    655398     1577766    5526612    7763574    10000536   12303291   14540253        16777215       )  )) 